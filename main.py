import os
import json
import random
import datetime
import asyncio
from collections import defaultdict
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, PreCheckoutQueryHandler
from threading import Thread
from flask import Flask

# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8378526693:AAFOwAb6pVp1GOE0tXZN4PDLFnD_TTT1djg")
PROVIDER_TOKEN = os.environ.get("PROVIDER_TOKEN", "TEST_PROVIDER_TOKEN")
ADMIN_CODE = os.environ.get("ADMIN_CODE", "1337")

# üéØ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ò –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –°–¢–ê–í–ö–ê
MIN_BET = 1
MAX_BET = 100000

# ‚è±Ô∏è –í–†–ï–ú–Ø –ê–ù–ò–ú–ê–¶–ò–ò –î–õ–Ø –ö–ê–ñ–î–û–ô –ò–ì–†–´ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
DICE_DELAYS = {
    "üé∞": 1.5,  # –°–ª–æ—Ç—ã - —Å–∞–º–∞—è –¥–æ–ª–≥–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
    "üéØ": 2.5,  # –î–∞—Ä—Ç—Å
    "üé≤": 2.5,  # –ö—É–±–∏–∫
    "üé≥": 3.5,  # –ë–æ—É–ª–∏–Ω–≥
    "‚öΩ": 3.5,  # –§—É—Ç–±–æ–ª
    "üèÄ": 3.5   # –ë–∞—Å–∫–µ—Ç–±–æ–ª
}

# üí∞ –ü–ê–ö–ï–¢–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø (1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 –∏–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞)
PRODUCTS = {
    "pack_5": {"title": "5 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 5 ‚≠ê", "price": 5, "currency": "XTR", "credits": 5},
    "pack_10": {"title": "10 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 10 ‚≠ê", "price": 10, "currency": "XTR", "credits": 10},
    "pack_25": {"title": "25 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 25 ‚≠ê", "price": 25, "currency": "XTR", "credits": 25},
    "pack_50": {"title": "50 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 50 ‚≠ê", "price": 50, "currency": "XTR", "credits": 50},
    "pack_100": {"title": "100 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 100 ‚≠ê", "price": 100, "currency": "XTR", "credits": 100},
    "pack_250": {"title": "250 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 250 ‚≠ê", "price": 250, "currency": "XTR", "credits": 250},
    "pack_500": {"title": "500 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 500 ‚≠ê", "price": 500, "currency": "XTR", "credits": 500},
    "pack_1000": {"title": "1000 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 1000 ‚≠ê", "price": 1000, "currency": "XTR", "credits": 1000}
}

# üéÅ –í–´–í–û–î –°–†–ï–î–°–¢–í - –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–£–ú–ú–ê –ò –í–ê–†–ò–ê–ù–¢–´
MIN_WITHDRAWAL = 15
WITHDRAWAL_AMOUNTS = [15, 25, 50, 100]

# üéÆ –ë–ê–ó–û–í–´–ï –í–´–ò–ì–†–´–®–ò –î–õ–Ø –°–¢–ê–í–ö–ò 1 ‚≠ê
BASE_PRIZES = {
    "üé∞": {
        "–¢–†–ò –ë–ê–†–ê": 5,
        "–¢–†–ò –í–ò–®–ù–ò": 10, 
        "–¢–†–ò –õ–ò–ú–û–ù–´": 15,
        "–î–ñ–ï–ö–ü–û–¢ 777": 20
    },
    "üéØ": {"–ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨": 3},
    "üé≤": {"–í–´–ü–ê–õ–û 6": 3},
    "üé≥": {"–°–¢–†–ê–ô–ö": 3},
    "‚öΩ": {
        "–°–õ–ê–ë–´–ô –£–î–ê–†": 0.1,
        "–£–î–ê–† –ú–ò–ú–û": 0.2,
        "–ë–õ–ò–ó–ö–ò–ô –£–î–ê–†": 0.5,
        "–•–û–†–û–®–ò–ô –ì–û–õ": 1.2,
        "–°–£–ü–ï–†–ì–û–õ": 1.5
    },
    "üèÄ": {
        "–ü–†–û–ú–ê–•": 0.1,
        "–ö–ê–°–ê–¢–ï–õ–¨–ù–û": 0.15,
        "–û–¢–°–ö–û–ö": 0.2,
        "–¢–†–ï–•–û–ß–ö–û–í–´–ô": 1.4,
        "–°–õ–≠–ú-–î–ê–ù–ö": 1.4
    }
}

# üé∞ –°–ò–°–¢–ï–ú–ê –°–ï–†–ò–ô –ü–û–ë–ï–î (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø)
WIN_STREAK_BONUSES = {
    2: {"multiplier": 1.1, "message": "üî• –°–µ—Ä–∏—è –∏–∑ 2 –ø–æ–±–µ–¥! –ë–æ–Ω—É—Å +10% –∫ –≤—ã–∏–≥—Ä—ã—à—É!"},
    3: {"multiplier": 1.25, "message": "üî•üî• –°–µ—Ä–∏—è –∏–∑ 3 –ø–æ–±–µ–¥! –ë–æ–Ω—É—Å +25% –∫ –≤—ã–∏–≥—Ä—ã—à—É!"},
    5: {"multiplier": 1.5, "message": "üî•üî•üî• –°–ï–†–ò–Ø –ò–ó 5 –ü–û–ë–ï–î! –ú–ï–ì–ê –ë–û–ù–£–° +50% –∫ –≤—ã–∏–≥—Ä—ã—à—É!"}
}

# üéÅ –°–ò–°–¢–ï–ú–ê –°–õ–£–ß–ê–ô–ù–´–• –ú–ï–ì–ê-–í–´–ò–ì–†–´–®–ï–ô (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø)
MEGA_WIN_CONFIG = {
    "chance": 0.006,  # 0.6% —à–∞–Ω—Å –Ω–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à
    "min_multiplier": 1.5,    # –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç 1.5x
    "max_multiplier": 5       # –¥–æ 5x
}

# üîÑ –°–ò–°–¢–ï–ú–ê –í–û–ó–í–†–ê–¢–û–í –ü–†–ò –ü–†–û–ò–ì–†–´–®–ï (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø)
REFUND_CONFIG = {
    "min_refund": 0.02,       # 2% –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
    "max_refund": 0.1         # 10% –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
}

# üéÅ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–ï–î–ï–õ–¨–ù–´–• –ù–ê–ì–†–ê–î
WEEKLY_BONUS_CONFIG = {
    "min_daily_games": 5,           # –º–∏–Ω–∏–º—É–º 5 –∏–≥—Ä –≤ –¥–µ–Ω—å
    "required_days": 7,             # 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    "base_percent": 0.01,           # 1% –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    "bonus_per_extra_game": 0.0005, # +0.05% –∑–∞ –∫–∞–∂–¥—É—é –∏–≥—Ä—É —Å–≤–µ—Ä—Ö –º–∏–Ω–∏–º—É–º–∞
    "max_extra_bonus": 0.02         # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø. –Ω–∞–≥—Ä–∞–¥–∞ +2%
}

# üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
REFERRAL_CONFIG = {
    "reward_percent": 0.10,  # 10% –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
    "min_referee_games": 3,  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
    "min_referee_deposit": 10  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
}

# üéüÔ∏è –°–ò–°–¢–ï–ú–ê –ü–†–û–ú–û–ö–û–î–û–í
PROMO_CONFIG = {
    "max_active_promos": 50,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    "default_uses": 100,      # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    "min_amount": 5,          # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    "max_amount": 1000        # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
}

# üéÆ –ü–û–õ–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ì–† (–° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú–ò –í–û–ó–í–†–ê–¢–ê–ú–ò –î–õ–Ø –í–°–ï–• –ò–ì–†)
GAMES_CONFIG = {
    "üé∞": {
        "values": {
            # –û–ë–´–ß–ù–´–ï –°–õ–û–¢–´ - 64 –∑–Ω–∞—á–µ–Ω–∏—è, 4 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö
            1: {"win": True, "base_prize": BASE_PRIZES["üé∞"]["–¢–†–ò –ë–ê–†–ê"], "message": "üé∞ –¢–†–ò –ë–ê–†–ê! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #2 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #3 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #4 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            5: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #5 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            6: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #6 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            7: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #7 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            8: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #8 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            9: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #9 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            10: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #10 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            11: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #11 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            12: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #12 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            13: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #13 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            14: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #14 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            15: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #15 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            16: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #16 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            17: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #17 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            18: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #18 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            19: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #19 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            20: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #20 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            21: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #21 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            22: {"win": True, "base_prize": BASE_PRIZES["üé∞"]["–¢–†–ò –í–ò–®–ù–ò"], "message": "üé∞ –¢–†–ò –í–ò–®–ù–ò! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            23: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #23 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            24: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #24 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            25: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #25 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            26: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #26 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            27: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #27 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            28: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #28 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            29: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #29 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            30: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #30 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            31: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #31 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            32: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #32 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            33: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #33 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            34: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #34 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            35: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #35 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            36: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #36 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            37: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #37 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            38: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #38 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            39: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #39 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            40: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #40 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            41: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #41 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            42: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #42 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            43: {"win": True, "base_prize": BASE_PRIZES["üé∞"]["–¢–†–ò –õ–ò–ú–û–ù–ê"], "message": "üé∞ –¢–†–ò –õ–ò–ú–û–ù–ê! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            44: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #44 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            45: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #45 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            46: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #46 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            47: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #47 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            48: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #48 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            49: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #49 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            50: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #50 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            51: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #51 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            52: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #52 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            53: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #53 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            54: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #54 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            55: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #55 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            56: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #56 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            57: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #57 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            58: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #58 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            59: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #59 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            60: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #60 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            61: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #61 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            62: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #62 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            63: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #63 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            64: {"win": True, "base_prize": BASE_PRIZES["üé∞"]["–î–ñ–ï–ö–ü–û–¢ 777"], "message": "üé∞ –î–ñ–ï–ö–ü–û–¢ 777! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"}
        }
    },
    "üéØ": {
        "values": {
            # –î–ê–†–¢–° - 6 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (6)
            1: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            5: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            6: {"win": True, "base_prize": BASE_PRIZES["üéØ"]["–ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨"], "message": "üéØ - –ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"}
        }
    },
    "üé≤": {
        "values": {
            # –ö–û–°–¢–ò - 6 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (6)
            1: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            5: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            6: {"win": True, "base_prize": BASE_PRIZES["üé≤"]["–í–´–ü–ê–õ–û 6"], "message": "üé≤ - –í–´–ü–ê–õ–û 6! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"}
        }
    },
    "üé≥": {
        "values": {
            # –ë–û–£–õ–ò–ù–ì - 6 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (6)
            1: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            5: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            6: {"win": True, "base_prize": BASE_PRIZES["üé≥"]["–°–¢–†–ê–ô–ö"], "message": "üé≥ - –°–¢–†–ê–ô–ö! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"}
        }
    },
    "‚öΩ": {
        "values": {
            # –§–£–¢–ë–û–õ - 5 –∑–Ω–∞—á–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ 3 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö (–≥–æ–ª—ã)
            1: {"win": False, "base_prize": BASE_PRIZES["‚öΩ"]["–°–õ–ê–ë–´–ô –£–î–ê–†"], "message": "‚öΩ –°–ª–∞–±—ã–π —É–¥–∞—Ä... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": BASE_PRIZES["‚öΩ"]["–£–î–ê–† –ú–ò–ú–û"], "message": "‚öΩ –£–¥–∞—Ä –º–∏–º–æ –≤–æ—Ä–æ—Ç... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": True, "base_prize": BASE_PRIZES["‚öΩ"]["–ë–õ–ò–ó–ö–ò–ô –£–î–ê–†"], "message": "‚öΩ –ë–ª–∏–∑–∫–æ –∫ –≤–æ—Ä–æ—Ç–∞–º! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            4: {"win": True, "base_prize": BASE_PRIZES["‚öΩ"]["–•–û–†–û–®–ò–ô –ì–û–õ"], "message": "‚öΩ –ì–û–û–û–õ! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            5: {"win": True, "base_prize": BASE_PRIZES["‚öΩ"]["–°–£–ü–ï–†–ì–û–õ"], "message": "‚öΩ –°–£–ü–ï–†–ì–û–û–û–õ! –ú–ï–ì–ê –í–´–ò–ì–†–´–®: {prize} ‚≠ê"}
        }
    },
    "üèÄ": {
        "values": {
            # –ë–ê–°–ö–ï–¢–ë–û–õ - 5 –∑–Ω–∞—á–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ 2 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö (–±—Ä–æ—Å–∫–∏)
            1: {"win": False, "base_prize": BASE_PRIZES["üèÄ"]["–ü–†–û–ú–ê–•"], "message": "üèÄ –ü—Ä–æ–º–∞—Ö... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": BASE_PRIZES["üèÄ"]["–ö–ê–°–ê–¢–ï–õ–¨–ù–û"], "message": "üèÄ –ö–æ—Å–Ω—É–ª–æ—Å—å –∫–æ–ª—å—Ü–∞... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": BASE_PRIZES["üèÄ"]["–û–¢–°–ö–û–ö"], "message": "üèÄ –û—Ç—Å–∫–æ–∫... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": True, "base_prize": BASE_PRIZES["üèÄ"]["–¢–†–ï–•–û–ß–ö–û–í–´–ô"], "message": "üèÄ –¢—Ä–µ—Ö–æ—á–∫–æ–≤—ã–π! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            5: {"win": True, "base_prize": BASE_PRIZES["üèÄ"]["–°–õ–≠–ú-–î–ê–ù–ö"], "message": "üèÄ –°–õ–≠–ú-–î–ê–ù–ö! –ú–ï–ì–ê –í–´–ò–ì–†–´–®: {prize} ‚≠ê"}
        }
    }
}

# üé∞ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –°–õ–û–¢–û–í 777 (–¢–û–õ–¨–ö–û –î–ñ–ï–ö–ü–û–¢) - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
SLOTS_777_CONFIG = {
    "üé∞": {
        "values": {
            # –°–õ–û–¢–´ 777 - 64 –∑–Ω–∞—á–µ–Ω–∏—è, –¢–û–õ–¨–ö–û 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (64) —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –ø—Ä–∏–∑–æ–º
            1: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #2 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #3 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #4 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            5: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #5 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            6: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #6 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            7: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #7 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            8: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #8 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            9: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #9 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            10: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #10 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            11: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #11 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            12: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #12 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            13: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #13 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            14: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #14 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            15: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #15 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            16: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #16 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            17: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #17 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            18: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #18 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            19: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #19 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            20: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #20 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            21: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #21 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            22: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #22 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            23: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #23 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            24: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #24 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            25: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #25 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            26: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #26 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            27: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #27 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            28: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #28 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            29: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #29 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            30: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #30 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            31: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #31 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            32: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #32 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            33: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #33 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            34: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #34 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            35: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #35 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            36: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #36 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            37: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #37 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            38: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #38 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            39: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #39 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            40: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #40 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            41: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #41 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            42: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #42 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            43: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #43 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            44: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #44 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            45: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #45 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            46: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #46 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            47: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #47 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            48: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #48 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            49: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #49 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            50: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #50 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            51: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #51 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            52: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #52 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            53: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #53 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            54: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #54 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            55: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #55 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            56: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #56 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            57: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #57 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            58: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #58 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            59: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #59 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            60: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #60 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            61: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #61 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            62: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #62 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            63: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #63 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            64: {"win": True, "base_prize": 50, "message": "üé∞ –î–ñ–ï–ö–ü–û–¢ 777! –ú–ï–ì–ê –í–´–ò–ì–†–´–®: {prize} ‚≠ê"}  # 50x —Å—Ç–∞–≤–∫–∏
        }
    }
}

# üóÉÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•
user_data = defaultdict(lambda: {
    'game_balance': 0.0,
    'total_games': 0,
    'total_wins': 0,
    'total_deposited': 0,
    'real_money_spent': 0,
    'current_bet': 5,
    'registration_date': datetime.datetime.now().isoformat(),
    'last_activity': datetime.datetime.now().isoformat(),
    'slots_mode': 'normal',
    'win_streak': 0,
    'max_win_streak': 0,
    'mega_wins_count': 0,
    'total_mega_win_amount': 0.0,
    'referral_code': None,
    'referral_by': None,
    'referrals_count': 0,
    'referral_earnings': 0.0,
    'used_promo_codes': [],
    'muted_until': None,
    'warnings': [],
    'vip_until': None
})

# üÜï –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò –° –ù–ï–î–ï–õ–¨–ù–´–ú–ò –ù–ê–ì–†–ê–î–ê–ú–ò
user_activity = defaultdict(lambda: {
    'weekly_streak_days': 0,
    'weekly_total_bets': 0,
    'weekly_total_games': 0,
    'last_weekly_bonus_date': None,
    'daily_games_count': 0,
    'last_activity_date': None,
    'current_week_start': None
})

# üÜï –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ö–û–î–´
referral_codes = {}

# üÜï –ü–†–û–ú–û–ö–û–î–´
promo_codes = {}

# üÜï –°–ò–°–¢–ï–ú–ê –ë–ê–ù–û–í
banned_users = {}

# üÜï –°–ò–°–¢–ï–ú–ê –ú–£–¢–û–í
muted_users = {}

# üÜï –°–ò–°–¢–ï–ú–ê –í–ê–†–ù–û–í
user_warnings = defaultdict(list)

# üÜï –°–ò–°–¢–ï–ú–ê VIP
vip_users = {}

# üÜï –õ–û–ì–ò –î–ï–ô–°–¢–í–ò–ô
admin_logs = []

admin_mode = defaultdict(bool)
user_sessions = defaultdict(dict)
withdrawal_requests = defaultdict(list)

# üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•
def save_data():
    try:
        data = {
            'user_data': dict(user_data),
            'user_activity': dict(user_activity),
            'admin_mode': dict(admin_mode),
            'withdrawal_requests': dict(withdrawal_requests),
            'referral_codes': referral_codes,
            'promo_codes': promo_codes,
            'banned_users': banned_users,
            'muted_users': muted_users,
            'user_warnings': dict(user_warnings),
            'vip_users': vip_users,
            'admin_logs': admin_logs
        }
        with open('data.json', 'w') as f:
            json.dump(data, f, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def load_data():
    try:
        with open('data.json', 'r') as f:
            data = json.load(f)
            user_data.update(data.get('user_data', {}))
            user_activity.update(data.get('user_activity', {}))
            admin_mode.update(data.get('admin_mode', {}))
            withdrawal_requests.update(data.get('withdrawal_requests', {}))
            referral_codes.update(data.get('referral_codes', {}))
            promo_codes.update(data.get('promo_codes', {}))
            banned_users.update(data.get('banned_users', {}))
            muted_users.update(data.get('muted_users', {}))
            user_warnings.update(data.get('user_warnings', {}))
            vip_users.update(data.get('vip_users', {}))
            admin_logs.extend(data.get('admin_logs', []))
        
        migrate_user_data()
        migrate_activity_data()
        
    except FileNotFoundError:
        pass

# üÜï –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –î–õ–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
def migrate_user_data():
    for user_id, data in user_data.items():
        if 'win_streak' not in data:
            data['win_streak'] = 0
        if 'max_win_streak' not in data:
            data['max_win_streak'] = 0
        if 'mega_wins_count' not in data:
            data['mega_wins_count'] = 0
        if 'total_mega_win_amount' not in data:
            data['total_mega_win_amount'] = 0.0
        if 'slots_mode' not in data:
            data['slots_mode'] = 'normal'
        if 'referral_code' not in data:
            data['referral_code'] = None
        if 'referral_by' not in data:
            data['referral_by'] = None
        if 'referrals_count' not in data:
            data['referrals_count'] = 0
        if 'referral_earnings' not in data:
            data['referral_earnings'] = 0.0
        if 'used_promo_codes' not in data:
            data['used_promo_codes'] = []
        if 'muted_until' not in data:
            data['muted_until'] = None
        if 'warnings' not in data:
            data['warnings'] = []
        if 'vip_until' not in data:
            data['vip_until'] = None

def migrate_activity_data():
    for user_id, activity in user_activity.items():
        if 'weekly_streak_days' not in activity:
            activity.update({
                'weekly_streak_days': 0,
                'weekly_total_bets': 0,
                'weekly_total_games': 0,
                'last_weekly_bonus_date': None,
                'daily_games_count': 0,
                'last_activity_date': None,
                'current_week_start': None
            })

# üÜï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô –ê–î–ú–ò–ù–ê
def log_admin_action(admin_id: int, action: str, target_id: int = None, details: str = ""):
    log_entry = {
        'admin_id': admin_id,
        'action': action,
        'target_id': target_id,
        'details': details,
        'timestamp': datetime.datetime.now().isoformat()
    }
    admin_logs.append(log_entry)
    save_data()

# üÜï –ü–†–û–í–ï–†–ö–ê –ú–£–¢–ê
async def check_mute(user_id: int) -> tuple:
    if user_id in muted_users:
        mute_data = muted_users[user_id]
        mute_until = datetime.datetime.fromisoformat(mute_data['muted_until'])
        if datetime.datetime.now() < mute_until:
            time_left = mute_until - datetime.datetime.now()
            return True, f"–î–æ —Ä–∞–∑–º—É—Ç–∞: {str(time_left).split('.')[0]}"
        else:
            del muted_users[user_id]
            save_data()
    return False, ""

# üÜï –í–´–î–ê–ß–ê –ú–£–¢–ê
async def mute_user(user_id: int, admin_id: int, minutes: int, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    mute_until = datetime.datetime.now() + datetime.timedelta(minutes=minutes)
    muted_users[user_id] = {
        'muted_until': mute_until.isoformat(),
        'reason': reason,
        'muted_by': admin_id,
        'muted_at': datetime.datetime.now().isoformat()
    }
    save_data()
    log_admin_action(admin_id, "mute", user_id, f"{minutes} –º–∏–Ω—É—Ç, –ø—Ä–∏—á–∏–Ω–∞: {reason}")

# üÜï –°–ù–Ø–¢–ò–ï –ú–£–¢–ê
async def unmute_user(user_id: int, admin_id: int):
    if user_id in muted_users:
        del muted_users[user_id]
        save_data()
        log_admin_action(admin_id, "unmute", user_id)
        return True
    return False

# üÜï –í–´–î–ê–ß–ê –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø
async def warn_user(user_id: int, admin_id: int, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    warning = {
        'reason': reason,
        'warned_by': admin_id,
        'warned_at': datetime.datetime.now().isoformat()
    }
    user_warnings[user_id].append(warning)
    user_data[user_id]['warnings'].append(warning)
    save_data()
    log_admin_action(admin_id, "warn", user_id, f"–ø—Ä–∏—á–∏–Ω–∞: {reason}")

# üÜï –°–ù–Ø–¢–ò–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø
async def unwarn_user(user_id: int, admin_id: int, warning_index: int = -1):
    if user_id in user_warnings and user_warnings[user_id]:
        if warning_index == -1:  # –°–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ
            removed_warning = user_warnings[user_id].pop()
            user_data[user_id]['warnings'] = user_warnings[user_id]
        else:  # –°–Ω—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            if 0 <= warning_index < len(user_warnings[user_id]):
                removed_warning = user_warnings[user_id].pop(warning_index)
                user_data[user_id]['warnings'] = user_warnings[user_id]
            else:
                return False
        save_data()
        log_admin_action(admin_id, "unwarn", user_id, f"–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {removed_warning['reason']}")
        return True
    return False

# üÜï –í–´–î–ê–ß–ê VIP –°–¢–ê–¢–£–°–ê
async def give_vip(user_id: int, admin_id: int, days: int):
    vip_until = datetime.datetime.now() + datetime.timedelta(days=days)
    vip_users[user_id] = {
        'vip_until': vip_until.isoformat(),
        'given_by': admin_id,
        'given_at': datetime.datetime.now().isoformat()
    }
    user_data[user_id]['vip_until'] = vip_until.isoformat()
    save_data()
    log_admin_action(admin_id, "give_vip", user_id, f"{days} –¥–Ω–µ–π")

# üÜï –°–ù–Ø–¢–ò–ï VIP –°–¢–ê–¢–£–°–ê
async def remove_vip(user_id: int, admin_id: int):
    if user_id in vip_users:
        del vip_users[user_id]
        user_data[user_id]['vip_until'] = None
        save_data()
        log_admin_action(admin_id, "remove_vip", user_id)
        return True
    return False

# üÜï –ü–†–û–í–ï–†–ö–ê VIP –°–¢–ê–¢–£–°–ê
async def check_vip(user_id: int) -> tuple:
    if user_id in vip_users:
        vip_data = vip_users[user_id]
        vip_until = datetime.datetime.fromisoformat(vip_data['vip_until'])
        if datetime.datetime.now() < vip_until:
            time_left = vip_until - datetime.datetime.now()
            return True, f"VIP –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å: {str(time_left).split('.')[0]}"
        else:
            await remove_vip(user_id, vip_data['given_by'])
    return False, ""

# üé∞ –°–ò–°–¢–ï–ú–ê –°–ï–†–ò–ô –ü–û–ë–ï–î, –ú–ï–ì–ê-–í–´–ò–ì–†–´–®–ï–ô –ò –í–û–ó–í–†–ê–¢–û–í
def calculate_win_bonuses(user_id: int, base_prize: float, bet: int, emoji: str, is_win: bool) -> tuple:
    user = user_data[user_id]
    bonus_messages = []
    
    base_win_amount = base_prize * bet
    
    # üîÑ –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–´–ô –í–û–ó–í–†–ê–¢ 2-10% –ü–†–ò –ü–†–û–ò–ì–†–´–®–ï –î–õ–Ø –í–°–ï–• –ò–ì–†
    if not is_win and base_prize == 0:
        refund_percent = random.uniform(REFUND_CONFIG["min_refund"], REFUND_CONFIG["max_refund"])
        refund_amount = round(bet * refund_percent, 1)
        
        base_win_amount = refund_amount
        bonus_messages.append(f"üîÑ –í–æ–∑–≤—Ä–∞—Ç {refund_percent*100:.1f}% –æ—Ç —Å—Ç–∞–≤–∫–∏: {refund_amount} ‚≠ê")
    
    # üî• –°–ò–°–¢–ï–ú–ê –°–ï–†–ò–ô –ü–û–ë–ï–î
    if is_win and base_prize > 0:
        user['win_streak'] += 1
        user['max_win_streak'] = max(user['max_win_streak'], user['win_streak'])
        
        for streak, bonus in WIN_STREAK_BONUSES.items():
            if user['win_streak'] == streak:
                streak_multiplier = bonus["multiplier"]
                base_win_amount *= streak_multiplier
                bonus_messages.append(bonus["message"])
                break
    else:
        if user['win_streak'] > 0:
            bonus_messages.append(f"üíî –°–µ—Ä–∏—è –ø–æ–±–µ–¥ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –Ω–∞ {user['win_streak']}!")
        user['win_streak'] = 0
    
    # üéâ –°–ò–°–¢–ï–ú–ê –°–õ–£–ß–ê–ô–ù–´–• –ú–ï–ì–ê-–í–´–ò–ì–†–´–®–ï–ô
    if is_win and base_prize > 0 and random.random() < MEGA_WIN_CONFIG["chance"]:
        mega_multiplier = random.uniform(MEGA_WIN_CONFIG["min_multiplier"], MEGA_WIN_CONFIG["max_multiplier"])
        base_win_amount *= mega_multiplier
        user['mega_wins_count'] += 1
        user['total_mega_win_amount'] += base_win_amount - (base_prize * bet)
        
        bonus_messages.append(f"üéâ –ú–ï–ì–ê-–í–´–ò–ì–†–´–®! x{mega_multiplier:.1f} –∫ –≤—ã–∏–≥—Ä—ã—à—É!")
    
    final_prize = round(base_win_amount, 1)
    
    return final_prize, bonus_messages

# üÜï –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
def generate_referral_code(user_id: int) -> str:
    code = f"REF{user_id % 10000:04d}"
    while code in referral_codes:
        code = f"REF{random.randint(1000, 9999)}"
    return code

async def process_referral_reward(user_id: int, bet_amount: float, win_amount: float):
    try:
        user = user_data[user_id]
        
        if user['referral_by']:
            referrer_id = user['referral_by']
            
            if (user_data[user_id]['total_games'] >= REFERRAL_CONFIG["min_referee_games"] and
                user_data[user_id]['total_deposited'] >= REFERRAL_CONFIG["min_referee_deposit"]):
                
                loss_amount = max(0, bet_amount - win_amount)
                
                if loss_amount > 0:
                    referral_reward = round(loss_amount * REFERRAL_CONFIG["reward_percent"], 1)
                    user_data[referrer_id]['game_balance'] += referral_reward
                    user_data[referrer_id]['referral_earnings'] += referral_reward
                    
                    save_data()
                    
                    return referral_reward, referrer_id
        
        return 0, None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_referral_reward: {e}")
        return 0, None

# üÜï –°–ò–°–¢–ï–ú–ê –ü–†–û–ú–û–ö–û–î–û–í
def generate_promo_code() -> str:
    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    while True:
        code = ''.join(random.choices(chars, k=8))
        if code not in promo_codes:
            return code

def create_promo_code(amount: int, uses: int, created_by: int) -> str:
    code = generate_promo_code()
    promo_codes[code] = {
        'amount': amount,
        'uses_left': uses,
        'created_by': created_by,
        'created_at': datetime.datetime.now().isoformat(),
        'used_by': []
    }
    save_data()
    return code

def use_promo_code(user_id: int, code: str) -> tuple:
    code = code.upper()
    
    if code not in promo_codes:
        return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    promo = promo_codes[code]
    
    if promo['uses_left'] <= 0:
        return False, "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
    
    if user_id in promo['used_by']:
        return False, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"
    
    user_data[user_id]['game_balance'] += promo['amount']
    user_data[user_id]['used_promo_codes'].append(code)
    promo['uses_left'] -= 1
    promo['used_by'].append(user_id)
    
    save_data()
    return True, f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo['amount']} ‚≠ê"

# üÜï –°–ò–°–¢–ï–ú–ê –ë–ê–ù–û–í
async def check_ban(user_id: int) -> tuple:
    if user_id in banned_users:
        return True, banned_users[user_id].get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    return False, ""

async def ban_user(user_id: int, admin_id: int, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    banned_users[user_id] = {
        'reason': reason,
        'banned_by': admin_id,
        'banned_at': datetime.datetime.now().isoformat()
    }
    save_data()
    log_admin_action(admin_id, "ban", user_id, f"–ø—Ä–∏—á–∏–Ω–∞: {reason}")

async def unban_user(user_id: int, admin_id: int):
    if user_id in banned_users:
        del banned_users[user_id]
        save_data()
        log_admin_action(admin_id, "unban", user_id)
        return True
    return False

# üë§ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await update.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    is_muted, mute_time = await check_mute(user_id)
    if is_muted:
        await update.message.reply_text(
            f"üîá –í—ã –≤ –º—É—Ç–µ.\n"
            f"‚è∞ {mute_time}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º—É—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        )
        return
    
    referral_code = None
    if context.args and len(context.args) > 0:
        referral_code = context.args[0]
    
    if (referral_code and 
        referral_code in referral_codes and 
        user_data[user_id]['referral_by'] is None and
        referral_codes[referral_code] != user_id):
        
        referrer_id = referral_codes[referral_code]
        user_data[user_id]['referral_by'] = referrer_id
        user_data[referrer_id]['referrals_count'] += 1
        save_data()
    
    if user_data[user_id]['referral_code'] is None:
        user_data[user_id]['referral_code'] = generate_referral_code(user_id)
        referral_codes[user_data[user_id]['referral_code']] = user_id
        save_data()

    welcome_text = """
üé∞ NSource Casino

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!

üéÅ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –°–ò–°–¢–ï–ú–´:
‚Ä¢ üî• –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥ - –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã +10%/+25%/+50% –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥
‚Ä¢ üéâ –°–ª—É—á–∞–π–Ω—ã–µ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∏ - —à–∞–Ω—Å 0.6% —É–≤–µ–ª–∏—á–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à –≤ 1.5-5 —Ä–∞–∑!
‚Ä¢ üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã 2-10% - –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –ø–æ–ª—É—á–∞–π—Ç–µ —á–∞—Å—Ç—å —Å—Ç–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ!
‚Ä¢ üèÜ –ù–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã - –∏–≥—Ä–∞–π—Ç–µ 5+ —Ä–∞–∑ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –¥–ª—è –±–æ–Ω—É—Å–∞ 1-3% –æ—Ç —Å—É–º–º—ã —Å—Ç–∞–≤–æ–∫!
‚Ä¢ üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10% –æ—Ç –∏—Ö –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã (—Å—Ç–∞–≤–∫–∞ –æ—Ç 1 –¥–æ 100000 ‚≠ê):
üé∞ –°–ª–æ—Ç—ã - 64 –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, 4 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö (5-20x —Å—Ç–∞–≤–∫–∏)
üé∞ –°–ª–æ—Ç—ã 777 - —Ç–æ–ª—å–∫–æ –¥–∂–µ–∫–ø–æ—Ç 777 (50x —Å—Ç–∞–≤–∫–∏)
üéØ –î–∞—Ä—Ç—Å - –ø–æ–±–µ–¥–∞ –Ω–∞ 6 (3x —Å—Ç–∞–≤–∫–∏)
üé≤ –ö—É–±–∏–∫ - –ø–æ–±–µ–¥–∞ –Ω–∞ 6 (3x —Å—Ç–∞–≤–∫–∏)
üé≥ –ë–æ—É–ª–∏–Ω–≥ - –ø–æ–±–µ–¥–∞ –Ω–∞ 6 (3x —Å—Ç–∞–≤–∫–∏)
‚öΩ –§—É—Ç–±–æ–ª - 2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –≥–æ–ª–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º
üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª - 3 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 2 –±—Ä–æ—Å–∫–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º

üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 1:1
1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 ‚≠ê

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–π dice —ç–º–æ–¥–∑–∏ –∏–≥—Ä—ã —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!
    """
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
        [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
            )
        else:
            await update.message.reply_text(
                f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
            )
        return
    
    is_muted, mute_time = await check_mute(user_id)
    if is_muted:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                f"üîá –í—ã –≤ –º—É—Ç–µ.\n"
                f"‚è∞ {mute_time}\n\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º—É—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
            )
        else:
            await update.message.reply_text(
                f"üîá –í—ã –≤ –º—É—Ç–µ.\n"
                f"‚è∞ {mute_time}\n\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º—É—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
            )
        return
    
    data = user_data[user_id]
    activity = user_activity[user_id]
    
    win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
    
    slots_mode = data.get('slots_mode', 'normal')
    slots_mode_text = "üé∞ –û–±—ã—á–Ω—ã–µ" if slots_mode == 'normal' else "üé∞ –°–ª–æ—Ç—ã 777"
    
    weekly_info = ""
    if activity['weekly_streak_days'] > 0:
        weekly_info = f"üìÖ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –¥–Ω–µ–π: {activity['weekly_streak_days']}/7\n"
        weekly_info += f"üéÆ –ò–≥—Ä —Å–µ–≥–æ–¥–Ω—è: {activity['daily_games_count']}/5\n"
        weekly_info += f"üìä –ò–≥—Ä –∑–∞ –Ω–µ–¥–µ–ª—é: {activity['weekly_total_games']}\n"
        weekly_info += f"üí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: {round(activity['weekly_total_bets'], 1)} ‚≠ê"
    
    referral_info = ""
    if data['referral_code']:
        referral_info = f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {data['referrals_count']}\n"
        referral_info += f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {round(data['referral_earnings'], 1)} ‚≠ê"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º—É—Ç–µ –∏ VIP
    mute_info = ""
    if is_muted:
        mute_info = f"üîá –í –º—É—Ç–µ: {mute_time}\n"
    
    vip_info = ""
    is_vip, vip_time = await check_vip(user_id)
    if is_vip:
        vip_info = f"‚≠ê VIP: {vip_time}\n"
    
    warnings_info = ""
    if user_warnings[user_id]:
        warnings_info = f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(user_warnings[user_id])}\n"
    
    profile_text = f"""
üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üë§ –ò–º—è: {user.first_name}
üÜî ID: {user_id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {data['registration_date'][:10]}
üéÆ –†–µ–∂–∏–º —Å–ª–æ—Ç–æ–≤: {slots_mode_text}
{mute_info}{vip_info}{warnings_info}
üíé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üí∞ –ë–∞–ª–∞–Ω—Å: {round(data['game_balance'], 1)} ‚≠ê
üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {data['current_bet']} ‚≠ê
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {data['total_games']}
üèÜ –ü–æ–±–µ–¥: {data['total_wins']}
üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {data['total_deposited']} ‚≠ê

üî• –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤:
üìä –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {data['win_streak']}
üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {data['max_win_streak']}
üéâ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {data['mega_wins_count']}
üí´ –°—É–º–º–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {round(data['total_mega_win_amount'], 1)} ‚≠ê

{weekly_info}

{referral_info}
    """
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit"),
         InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ ‚≠ê", callback_data="withdraw")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")]
    ]
    
    if admin_mode.get(user_id, False):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(profile_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(profile_text, reply_markup=reply_markup)

# üÜï –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê - –ö–û–ú–ê–ù–î–´
async def referral_system_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    data = user_data[user_id]
    
    referral_text = f"""
üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10% –æ—Ç –∏—Ö –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π!

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üéØ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {data['referral_code']}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {data['referrals_count']}
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {round(data['referral_earnings'], 1)} ‚≠ê

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
https://t.me/{(await context.bot.get_me()).username}?start={data['referral_code']}

üìã –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
2. –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ
3. –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç –µ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
4. –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω —Å—ã–≥—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º {REFERRAL_CONFIG['min_referee_games']} –∏–≥—Ä –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –º–∏–Ω–∏–º—É–º {REFERRAL_CONFIG['min_referee_deposit']} ‚≠ê

üí° –ü—Ä–∏–º–µ—Ä: –ï—Å–ª–∏ –≤–∞—à –¥—Ä—É–≥ –ø—Ä–æ–∏–≥—Ä–∞–ª 100 ‚≠ê, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10 ‚≠ê!
    """
    
    keyboard = [
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(referral_text, reply_markup=reply_markup)

# üÜï –ö–û–ú–ê–ù–î–ê –ê–ö–¢–ò–í–ê–¶–ò–ò –ü–†–û–ú–û–ö–û–î–ê
async def promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await update.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    if not context.args:
        await update.message.reply_text(
            "üéüÔ∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo <–∫–æ–¥>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /promo SUMMER2024"
        )
        return
    
    promo_code = context.args[0].upper()
    success, message = use_promo_code(user_id, promo_code)
    
    await update.message.reply_text(message)

# üìä –ö–û–ú–ê–ù–î–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø)
async def activity_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await update.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    activity_data = user_activity[user_id]
    
    today = datetime.datetime.now().date()
    plays_remaining = max(0, WEEKLY_BONUS_CONFIG["min_daily_games"] - activity_data['daily_games_count'])
    
    if activity_data['weekly_total_bets'] > 0:
        base_bonus = activity_data['weekly_total_bets'] * WEEKLY_BONUS_CONFIG["base_percent"]
        min_games = WEEKLY_BONUS_CONFIG["min_daily_games"] * WEEKLY_BONUS_CONFIG["required_days"]
        extra_games = max(0, activity_data['weekly_total_games'] - min_games)
        extra_bonus = activity_data['weekly_total_bets'] * extra_games * WEEKLY_BONUS_CONFIG["bonus_per_extra_game"]
        max_extra = activity_data['weekly_total_bets'] * WEEKLY_BONUS_CONFIG["max_extra_bonus"]
        extra_bonus = min(extra_bonus, max_extra)
        potential_bonus = base_bonus + extra_bonus
    else:
        potential_bonus = 0
    
    activity_text = f"""
üìä –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ù–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã)

üéÆ –°—ã–≥—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {activity_data['daily_games_count']}/{WEEKLY_BONUS_CONFIG["min_daily_games"]}
üìÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {activity_data['weekly_streak_days']}/{WEEKLY_BONUS_CONFIG["required_days"]}
üéØ –í—Å–µ–≥–æ –∏–≥—Ä –∑–∞ –Ω–µ–¥–µ–ª—é: {activity_data['weekly_total_games']}
üí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: {round(activity_data['weekly_total_bets'], 1)} ‚≠ê

üéÅ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥:
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å: 1% –æ—Ç —Å—É–º–º—ã —Å—Ç–∞–≤–æ–∫
‚Ä¢ –î–æ–ø. –±–æ–Ω—É—Å: +0.05% –∑–∞ –∫–∞–∂–¥—É—é –∏–≥—Ä—É —Å–≤–µ—Ä—Ö {WEEKLY_BONUS_CONFIG["min_daily_games"] * WEEKLY_BONUS_CONFIG["required_days"]}
‚Ä¢ –ú–∞–∫—Å. –¥–æ–ø. –±–æ–Ω—É—Å: +2%

üí´ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ~{round(potential_bonus, 1)} ‚≠ê
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä –¥–ª—è –∑–∞—á–µ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è: {plays_remaining}
    """
    
    if activity_data.get('last_weekly_bonus_date') == today.isoformat():
        activity_text += "\n‚úÖ –ù–µ–¥–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!"
    
    await update.message.reply_text(activity_text)

# üéÆ –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–ì–† (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø)
async def process_dice_result(user_id: int, emoji: str, value: int, cost: int, message, context: ContextTypes.DEFAULT_TYPE):
    slots_mode = user_data[user_id].get('slots_mode', 'normal')
    
    if emoji == "üé∞" and slots_mode == '777':
        game_config = SLOTS_777_CONFIG.get(emoji)
    else:
        game_config = GAMES_CONFIG.get(emoji)
        
    if not game_config:
        return
    
    result_config = game_config["values"].get(value)
    if not result_config:
        result_config = {"win": False, "base_prize": 0, "message": f"{emoji} - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {{prize}} ‚≠ê"}
    
    base_prize_amount = result_config["base_prize"]
    is_win = result_config["win"]
    
    final_prize, bonus_messages = calculate_win_bonuses(user_id, base_prize_amount, cost, emoji, is_win)
    
    result_text = ""
    
    if is_win or base_prize_amount > 0:
        user_data[user_id]['game_balance'] += final_prize
        if is_win:
            user_data[user_id]['total_wins'] += 1
        
        win_message = result_config["message"].format(prize=final_prize)
        
        result_text = (
            f"{win_message}\n\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
            f"üìä (–°–ø–∏—Å–∞–Ω–æ: {cost} ‚≠ê + –í—ã–∏–≥—Ä—ã—à: {final_prize} ‚≠ê)"
        )
        
        if bonus_messages:
            result_text += "\n\n" + "\n".join(bonus_messages)
    else:
        # –î–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        if final_prize > 0:
            refund_message = result_config["message"].format(prize=final_prize)
            result_text = (
                f"{refund_message}\n\n"
                f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
                f"üìä –°–ø–∏—Å–∞–Ω–æ: {cost} ‚≠ê + –í–æ–∑–≤—Ä–∞—Ç: {final_prize} ‚≠ê"
            )
        else:
            result_text = (
                f"{result_config['message']}\n\n"
                f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
                f"üìä –°–ø–∏—Å–∞–Ω–æ: {cost} ‚≠ê"
            )
    
    await message.reply_text(result_text)
    
    if not admin_mode.get(user_id, False):
        referral_reward, referrer_id = await process_referral_reward(user_id, cost, final_prize)
        if referral_reward > 0:
            await message.reply_text(
                f"üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ù–ê–ì–†–ê–î–ê!\n\n"
                f"üíé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {referrer_id} –ø–æ–ª—É—á–∞–µ—Ç {referral_reward} ‚≠ê\n"
                f"üìä –ó–∞ –ø—Ä–æ–∏–≥—Ä—ã—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞: {cost - final_prize} ‚≠ê"
            )
    
    weekly_bonus = update_weekly_activity(user_id, cost)
    if weekly_bonus:
        await message.reply_text(
            f"üéÅ –ù–ï–î–ï–õ–¨–ù–ê–Ø –ù–ê–ì–†–ê–î–ê!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
            f"‚Ä¢ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {weekly_bonus['total_games']}\n"
            f"‚Ä¢ –°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {round(weekly_bonus['total_bets'], 1)} ‚≠ê\n"
            f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å: {round(weekly_bonus['base_bonus'], 1)} ‚≠ê\n"
            f"‚Ä¢ –î–æ–ø. –±–æ–Ω—É—Å: {round(weekly_bonus['extra_bonus'], 1)} ‚≠ê\n"
            f"üí∞ –ò–¢–û–ì–û: {round(weekly_bonus['total_bonus'], 1)} ‚≠ê\n\n"
            f"üíé –ë–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê"
        )
    
    save_data()

# üí∏ –°–ò–°–¢–ï–ú–ê –í–´–í–û–î–ê –°–†–ï–î–°–¢–í
async def withdraw_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await update.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    balance = round(user_data[user_id]['game_balance'], 1)
    
    if balance < MIN_WITHDRAWAL:
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê\n"
            f"üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚≠ê\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥!"
        )
        return
    
    withdraw_text = f"""
üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê
üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚≠ê

üéÅ –ü—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram Stars!

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:
    """
    
    keyboard = []
    for amount in WITHDRAWAL_AMOUNTS:
        if balance >= amount:
            keyboard.append([InlineKeyboardButton(f"{amount} ‚≠ê", callback_data=f"withdraw_{amount}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(withdraw_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(withdraw_text, reply_markup=reply_markup)

async def withdraw_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    balance = round(user_data[user_id]['game_balance'], 1)
    
    if balance < MIN_WITHDRAWAL:
        await query.edit_message_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê\n"
            f"üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚≠ê\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
                [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
            ])
        )
        return
    
    withdraw_text = f"""
üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê
üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚≠ê

üéÅ –ü—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram Stars!

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:
    """
    
    keyboard = []
    for amount in WITHDRAWAL_AMOUNTS:
        if balance >= amount:
            keyboard.append([InlineKeyboardButton(f"{amount} ‚≠ê", callback_data=f"withdraw_{amount}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(withdraw_text, reply_markup=reply_markup)

async def handle_withdraw_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    amount = int(query.data.split('_')[1])
    balance = round(user_data[user_id]['game_balance'], 1)
    
    if balance < amount:
        await query.edit_message_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="withdraw")]
            ])
        )
        return
    
    context.user_data['withdraw_amount'] = amount
    context.user_data['withdraw_user_id'] = user_id
    
    gifts_count = amount // 15
    gifts_count = max(1, gifts_count)
    
    confirm_text = f"""
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞

üí∏ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {amount} ‚≠ê
üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {gifts_count}

üí∞ –ë–∞–ª–∞–Ω—Å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è: {balance} ‚≠ê
üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: {round(balance - amount, 1)} ‚≠ê

–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {amount} ‚≠ê –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {gifts_count} —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram Stars!
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="confirm_withdraw")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="withdraw")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(confirm_text, reply_markup=reply_markup)

async def confirm_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = context.user_data.get('withdraw_user_id')
    amount = context.user_data.get('withdraw_amount')
    
    if not user_id or not amount:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
        return
    
    if user_data[user_id]['game_balance'] < amount:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    
    user_data[user_id]['game_balance'] -= amount
    
    gifts_count = amount // 15
    gifts_count = max(1, gifts_count)
    
    withdrawal_request = {
        'user_id': user_id,
        'amount': amount,
        'gifts_count': gifts_count,
        'timestamp': datetime.datetime.now().isoformat(),
        'status': 'completed'
    }
    
    if user_id not in withdrawal_requests:
        withdrawal_requests[user_id] = []
    withdrawal_requests[user_id].append(withdrawal_request)
    
    save_data()
    
    success_text = f"""
üéâ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üí∏ –°–ø–∏—Å–∞–Ω–æ: {amount} ‚≠ê
üéÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {gifts_count}
üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê

üì¶ –í–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–∞—Ä–∫–∏" –≤ Telegram.

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–≥—Ä—É! üé∞
    """
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(success_text, reply_markup=reply_markup)
    
    print(f"üí∞ –í–´–í–û–î: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–≤–µ–ª {amount} ‚≠ê, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {gifts_count} –ø–æ–¥–∞—Ä–∫–æ–≤")

# üéØ –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–¢–ê–í–ö–ò
async def bet_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await update.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    if not context.args:
        await update.message.reply_text(
            f"üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user_data[user_id]['current_bet']} ‚≠ê\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bet <—Å—É–º–º–∞>\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET} ‚≠ê\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MAX_BET} ‚≠ê"
        )
        return
    
    try:
        new_bet = int(context.args[0])
        
        if new_bet < MIN_BET:
            await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET} ‚≠ê")
            return
            
        if new_bet > MAX_BET:
            await update.message.reply_text(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MAX_BET} ‚≠ê")
            return
            
        user_data[user_id]['current_bet'] = new_bet
        save_data()
        
        await update.message.reply_text(f"‚úÖ –°—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_bet} ‚≠ê")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

# üí∞ –°–ò–°–¢–ï–ú–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
async def deposit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
            )
        else:
            await update.message.reply_text(
                f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
            )
        return
    
    data = user_data[user_id]
    
    deposit_text = f"""
üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(data['game_balance'], 1)} ‚≠ê

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
üí´ 1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 ‚≠ê
    """
    
    keyboard = []
    for product_key, product in PRODUCTS.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{product['title']} - {product['price']} Stars", 
                callback_data=f"buy_{product_key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(deposit_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(deposit_text, reply_markup=reply_markup)

async def deposit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    current_balance = round(user_data[user_id]['game_balance'], 1)
    
    deposit_text = f"""
üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} ‚≠ê

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
üí´ 1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 ‚≠ê
    """
    
    keyboard = []
    for product_key, product in PRODUCTS.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{product['title']} - {product['price']} Stars", 
                callback_data=f"buy_{product_key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(deposit_text, reply_markup=reply_markup)

async def handle_deposit_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    product_key = query.data.replace("buy_", "")
    product = PRODUCTS[product_key]
    
    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=product["title"],
        description=product["description"],
        payload=product_key,
        provider_token=PROVIDER_TOKEN,
        currency=product["currency"],
        prices=[LabeledPrice(product["title"], product["price"])],
        start_parameter="nsource_casino"
    )

# üí≥ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô
async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    user_id = update.effective_user.id
    product_key = payment.invoice_payload
    product = PRODUCTS[product_key]
    
    user_data[user_id]['game_balance'] += product["credits"]
    user_data[user_id]['total_deposited'] += product["credits"]
    user_data[user_id]['real_money_spent'] += product["price"]
    
    save_data()
    
    await update.message.reply_text(
        f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!\n\n"
        f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: {product['price']} Stars\n"
        f"üíé –ó–∞—á–∏—Å–ª–µ–Ω–æ: {product['credits']} ‚≠ê\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n\n"
        f"üéÆ –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!"
    )

# üéÆ –°–ò–°–¢–ï–ú–ê –ò–ì–† (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø)
async def play_games_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    balance = round(user_data[user_id]['game_balance'], 1)
    current_bet = user_data[user_id]['current_bet']
    slots_mode = user_data[user_id].get('slots_mode', 'normal')
    
    slots_mode_text = "–û–±—ã—á–Ω—ã–µ" if slots_mode == 'normal' else "777"
    
    games_text = f"""
üéÆ –í—ã–±–æ—Ä –∏–≥—Ä—ã

üíé –ë–∞–ª–∞–Ω—Å: {balance} ‚≠ê
üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_bet} ‚≠ê
üé∞ –†–µ–∂–∏–º —Å–ª–æ—Ç–æ–≤: {slots_mode_text}
üìä –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–∫–∏: {MIN_BET}-{MAX_BET} ‚≠ê

üéÅ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –°–ò–°–¢–ï–ú–´:
üî• –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥ - –±–æ–Ω—É—Å—ã +10%/+25%/+50% –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥
üéâ –°–ª—É—á–∞–π–Ω—ã–µ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∏ - —à–∞–Ω—Å 0.6% x1.5-x5!
üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã 2-10% - –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –ø–æ–ª—É—á–∞–π—Ç–µ —á–∞—Å—Ç—å —Å—Ç–∞–≤–∫–∏!
üèÜ –ù–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã - –∏–≥—Ä–∞–π—Ç–µ 5+ —Ä–∞–∑ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ø–æ–ª—É—á–∞–π—Ç–µ 10% –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –¥—Ä—É–∑–µ–π!

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–π dice —ç–º–æ–¥–∑–∏ –≤ —á–∞—Ç!
    """
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã (4 –≤—ã–∏–≥—Ä—ã—à–∞)", callback_data="play_slots")],
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã 777 (—Ç–æ–ª—å–∫–æ –¥–∂–µ–∫–ø–æ—Ç)", callback_data="play_slots777")],
        [InlineKeyboardButton("üéØ –î–∞—Ä—Ç—Å", callback_data="play_dart")],
        [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫", callback_data="play_dice")],
        [InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥", callback_data="play_bowling")],
        [InlineKeyboardButton("‚öΩ –§—É—Ç–±–æ–ª (2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –≥–æ–ª–∞)", callback_data="play_football")],
        [InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª (3 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 2 –±—Ä–æ—Å–∫–∞)", callback_data="play_basketball")],
        [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
        [InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(games_text, reply_markup=reply_markup)

async def handle_game_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    game_type = query.data.replace("play_", "")
    current_bet = user_data[user_id]['current_bet']
    
    if game_type == 'slots777':
        user_data[user_id]['slots_mode'] = '777'
        await query.edit_message_text("‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –°–ª–æ—Ç—ã 777! –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã –±—É–¥—É—Ç –≤ —Ä–µ–∂–∏–º–µ 777 (—Ç–æ–ª—å–∫–æ –¥–∂–µ–∫–ø–æ—Ç 777).")
        return
    elif game_type == 'slots':
        user_data[user_id]['slots_mode'] = 'normal'
        await query.edit_message_text("‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –æ–±—ã—á–Ω—ã–µ –°–ª–æ—Ç—ã! –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã –±—É–¥—É—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.")
        return
    
    if user_data[user_id]['game_balance'] < current_bet and not admin_mode.get(user_id, False):
        await query.edit_message_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
            f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet} ‚≠ê\n\n"
            "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
                [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")],
                [InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
            ])
        )
        return
    
    if not admin_mode.get(user_id, False):
        user_data[user_id]['game_balance'] -= current_bet
    
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    game_emojis = {
        'slots': 'üé∞', 
        'slots777': 'üé∞',
        'dart': 'üéØ', 
        'dice': 'üé≤',
        'bowling': 'üé≥', 
        'football': '‚öΩ', 
        'basketball': 'üèÄ'
    }
    
    emoji = game_emojis.get(game_type, 'üé∞')
    
    user_sessions[user_id] = {
        'game_type': game_type,
        'emoji': emoji,
        'bet': current_bet if not admin_mode.get(user_id, False) else 0,
        'message_id': query.message.message_id,
        'chat_id': query.message.chat_id
    }
    
    dice_message = await context.bot.send_dice(chat_id=query.message.chat_id, emoji=emoji)
    
    delay = DICE_DELAYS.get(emoji, 3.0)
    await asyncio.sleep(delay)
    
    await process_dice_result(user_id, emoji, dice_message.dice.value, current_bet if not admin_mode.get(user_id, False) else 0, dice_message, context)

async def handle_user_dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    is_muted, mute_time = await check_mute(user_id)
    if is_muted:
        await message.reply_text(
            f"üîá –í—ã –≤ –º—É—Ç–µ.\n"
            f"‚è∞ {mute_time}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º—É—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        )
        return
    
    if not message.dice:
        return
    
    emoji = message.dice.emoji
    value = message.dice.value
    
    if emoji not in GAMES_CONFIG:
        return
    
    current_bet = user_data[user_id]['current_bet']
    
    if user_data[user_id]['game_balance'] < current_bet and not admin_mode.get(user_id, False):
        await message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
            f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet} ‚≠ê\n\n"
            "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
                [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")]
            ])
        )
        return
    
    cost = current_bet if not admin_mode.get(user_id, False) else 0
    if not admin_mode.get(user_id, False):
        user_data[user_id]['game_balance'] -= cost
    
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    user_sessions[user_id] = {
        'game_type': 'slots',
        'emoji': emoji,
        'bet': cost,
        'message_id': message.message_id,
        'chat_id': message.chat_id
    }
    
    delay = DICE_DELAYS.get(emoji, 3.0)
    await asyncio.sleep(delay)
    
    await process_dice_result(user_id, emoji, value, cost, message, context)

# üéØ CALLBACK –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–¢–ê–í–ö–ò
async def change_bet_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    current_bet = user_data[user_id]['current_bet']
    
    bet_text = f"""
üéØ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏

üíé –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_bet} ‚≠ê
üìä –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–æ–∫: {MIN_BET}-{MAX_BET} ‚≠ê

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bet <—Å—É–º–º–∞> –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏.

–ü—Ä–∏–º–µ—Ä:
/bet 10 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 10 ‚≠ê
/bet 100 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 100 ‚≠ê
/bet 1000 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 1000 ‚≠ê
    """
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="play_games")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(bet_text, reply_markup=reply_markup)

# üîô CALLBACK –î–õ–ê –í–û–ó–í–†–ê–¢–ê –í –ü–†–û–§–ò–õ–¨
async def back_to_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await profile(update, context)

# üëë –ê–î–ú–ò–ù –°–ò–°–¢–ï–ú–ê
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if len(context.args) == 0:
        await update.message.reply_text(
            "üîê –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–∫–æ–¥>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /admin 1337"
        )
        return
    
    code = context.args[0]
    if code == ADMIN_CODE:
        admin_mode[user_id] = True
        save_data()
        await update.message.reply_text(
            "üëë –†–ï–ñ–ò–ú –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!\n\n"
            "‚ú® –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã.\n"
            "üéÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!"
        )
        log_admin_action(user_id, "admin_login")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

# üÜï –ö–û–ú–ê–ù–î–ê –ë–ê–ù–ò–†–û–í–ê–ù–ò–Ø
async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id> <–ø—Ä–∏—á–∏–Ω–∞>")
        return
    
    try:
        target_id = int(context.args[0])
        reason = ' '.join(context.args[1:])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        if target_id in admin_mode and admin_mode[target_id]:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        await ban_user(target_id, user_id, reason)
        
        await update.message.reply_text(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω!\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –†–ê–ó–ë–ê–ù–ò–í–ê–ù–ò–Ø
async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        success = await unban_user(target_id, user_id)
        
        if success:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω!")
        else:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ü–ò–°–ö–ê –ó–ê–ë–ê–ù–ï–ù–ù–´–•
async def banlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if not banned_users:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return
    
    banlist_text = "üö´ –ó–ê–ë–ê–ù–ï–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n\n"
    
    for banned_id, ban_data in list(banned_users.items())[:20]:
        banlist_text += (
            f"üë§ ID: {banned_id}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {ban_data.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üëÆ –ó–∞–±–∞–Ω–∏–ª: {ban_data.get('banned_by', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üìÖ –î–∞—Ç–∞: {ban_data.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    
    if len(banned_users) > 20:
        banlist_text += f"\n... –∏ –µ—â–µ {len(banned_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await update.message.reply_text(banlist_text)

# üÜï –ö–û–ú–ê–ù–î–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
async def addbalance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance <user_id> <amount>")
        return
    
    try:
        target_id = int(context.args[0])
        amount = float(context.args[1])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        user_data[target_id]['game_balance'] += amount
        save_data()
        
        log_admin_action(user_id, "add_balance", target_id, f"—Å—É–º–º–∞: {amount} ‚≠ê")
        
        await update.message.reply_text(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {amount} ‚≠ê\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {round(user_data[target_id]['game_balance'], 1)} ‚≠ê"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")

# üÜï –ö–û–ú–ê–ù–î–ê –£–°–¢–ê–ù–û–í–ö–ò –ë–ê–õ–ê–ù–°–ê
async def setbalance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance <user_id> <amount>")
        return
    
    try:
        target_id = int(context.args[0])
        amount = float(context.args[1])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        old_balance = user_data[target_id]['game_balance']
        user_data[target_id]['game_balance'] = amount
        save_data()
        
        log_admin_action(user_id, "set_balance", target_id, f"—Å—Ç–∞—Ä—ã–π: {old_balance}, –Ω–æ–≤—ã–π: {amount} ‚≠ê")
        
        await update.message.reply_text(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount} ‚≠ê\n"
            f"üí∞ –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: {round(old_balance, 1)} ‚≠ê"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ë–†–û–°–ê –ë–ê–õ–ê–ù–°–ê
async def resetbalance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resetbalance <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        old_balance = user_data[target_id]['game_balance']
        user_data[target_id]['game_balance'] = 0
        save_data()
        
        log_admin_action(user_id, "reset_balance", target_id, f"—Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: {old_balance} ‚≠ê")
        
        await update.message.reply_text(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–±—Ä–æ—à–µ–Ω!\n"
            f"üí∞ –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: {round(old_balance, 1)} ‚≠ê"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ú–û–ö–û–î–ê
async def promo_create_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "üéüÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo_create <—Å—É–º–º–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /promo_create 100 50\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {PROMO_CONFIG['min_amount']} ‚≠ê\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {PROMO_CONFIG['max_amount']} ‚≠ê"
        )
        return
    
    try:
        amount = int(context.args[0])
        uses = int(context.args[1])
        
        if amount < PROMO_CONFIG['min_amount'] or amount > PROMO_CONFIG['max_amount']:
            await update.message.reply_text(
                f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {PROMO_CONFIG['min_amount']} –¥–æ {PROMO_CONFIG['max_amount']} ‚≠ê"
            )
            return
        
        if uses <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        if len(promo_codes) >= PROMO_CONFIG['max_active_promos']:
            await update.message.reply_text(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {PROMO_CONFIG['max_active_promos']}"
            )
            return
        
        promo_code = create_promo_code(amount, uses, user_id)
        
        log_admin_action(user_id, "create_promo", None, f"–∫–æ–¥: {promo_code}, —Å—É–º–º–∞: {amount}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses}")
        
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üéüÔ∏è –ö–æ–¥: {promo_code}\n"
            f"üí∞ –°—É–º–º–∞: {amount} ‚≠ê\n"
            f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses}\n"
            f"üë§ –°–æ–∑–¥–∞–ª: {user_id}\n\n"
            f"üìù –ê–∫—Ç–∏–≤–∞—Ü–∏—è: /promo {promo_code}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ü–ò–°–ö–ê –ü–†–û–ú–û–ö–û–î–û–í
async def promo_list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if not promo_codes:
        await update.message.reply_text("üéüÔ∏è –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—É—Å—Ç.")
        return
    
    promo_list_text = "üéüÔ∏è –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n\n"
    for code, promo in promo_codes.items():
        promo_list_text += (
            f"üî∏ {code}\n"
            f"   üí∞ –°—É–º–º–∞: {promo['amount']} ‚≠ê\n"
            f"   üéØ –û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo['uses_left']}\n"
            f"   üë§ –°–æ–∑–¥–∞–ª: {promo['created_by']}\n"
            f"   üìÖ –°–æ–∑–¥–∞–Ω: {promo['created_at'][:10]}\n"
            f"   üë• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏: {len(promo['used_by'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        )
    
    await update.message.reply_text(promo_list_text)

# üÜï –ö–û–ú–ê–ù–î–ê –£–î–ê–õ–ï–ù–ò–Ø –ü–†–û–ú–û–ö–û–î–ê
async def promo_delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo_delete <code>")
        return
    
    code = context.args[0].upper()
    if code not in promo_codes:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    del promo_codes[code]
    save_data()
    
    log_admin_action(user_id, "delete_promo", None, f"–∫–æ–¥: {code}")
    
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —É–¥–∞–ª–µ–Ω.")

# üÜï –ö–û–ú–ê–ù–î–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–†–û–ú–û–ö–û–î–ï
async def promo_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo_info <code>")
        return
    
    code = context.args[0].upper()
    if code not in promo_codes:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    promo = promo_codes[code]
    used_by = promo['used_by']
    used_by_text = ", ".join(map(str, used_by)) if used_by else "–Ω–∏–∫–µ–º"
    
    promo_info_text = (
        f"üéüÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ {code}:\n\n"
        f"üí∞ –°—É–º–º–∞: {promo['amount']} ‚≠ê\n"
        f"üéØ –û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo['uses_left']}\n"
        f"üë§ –°–æ–∑–¥–∞–ª: {promo['created_by']}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {promo['created_at']}\n"
        f"üë• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏: {used_by_text}\n"
        f"üìä –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {len(used_by)}"
    )
    
    await update.message.reply_text(promo_info_text)

# üÜï –ö–û–ú–ê–ù–î–ê –ü–û–ò–°–ö–ê –ü–û ID
async def searchid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /searchid <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        data = user_data[target_id]
        win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
        
        user_info_text = f"""
üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:

üÜî ID: {target_id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {data['registration_date'][:10]}
üí∞ –ë–∞–ª–∞–Ω—Å: {round(data['game_balance'], 1)} ‚≠ê
üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {data['current_bet']} ‚≠ê
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {data['total_games']}
üèÜ –ü–æ–±–µ–¥: {data['total_wins']}
üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {data['total_deposited']} ‚≠ê
üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥: {data['real_money_spent']} Stars

üî• –°–ò–°–¢–ï–ú–´ –ë–û–ù–£–°–û–í:
üìä –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {data['win_streak']}
üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {data['max_win_streak']}
üéâ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {data['mega_wins_count']}
üí´ –°—É–º–º–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {round(data['total_mega_win_amount'], 1)} ‚≠ê

üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê:
üéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {data['referral_code']}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {data['referrals_count']}
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {round(data['referral_earnings'], 1)} ‚≠ê
        """
        
        await update.message.reply_text(user_info_text)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –ü–û–ò–°–ö–ê –ü–û USERNAME
async def find_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find <user_id/username>")
        return
    
    search_term = context.args[0]
    
    try:
        target_id = int(search_term)
        if target_id in user_data:
            await searchid_command(update, context)
            return
    except ValueError:
        pass
    
    await update.message.reply_text("üîç –ü–æ–∏—Å–∫ –ø–æ username –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")

# üÜï –ö–û–ú–ê–ù–î–ê –ú–£–¢–ê
async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute <user_id> <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö> [–ø—Ä–∏—á–∏–Ω–∞]")
        return
    
    try:
        target_id = int(context.args[0])
        minutes = int(context.args[1])
        reason = ' '.join(context.args[2:]) if len(context.args) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await mute_user(target_id, user_id, minutes, reason)
        
        await update.message.reply_text(
            f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")

# üÜï –ö–û–ú–ê–ù–î–ê –†–ê–ó–ú–£–¢–ê
async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        success = await unmute_user(target_id, user_id)
        
        if success:
            await update.message.reply_text(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–º—É—á–µ–Ω.")
        else:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –º—É—Ç–µ!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –í–ê–†–ù–ê
async def warn_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warn <user_id> <–ø—Ä–∏—á–∏–Ω–∞>")
        return
    
    try:
        target_id = int(context.args[0])
        reason = ' '.join(context.args[1:])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await warn_user(target_id, user_id, reason)
        
        warnings_count = len(user_warnings[target_id])
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"üìä –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ù–Ø–¢–ò–Ø –í–ê–†–ù–ê
async def unwarn_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unwarn <user_id> [–∏–Ω–¥–µ–∫—Å]")
        return
    
    try:
        target_id = int(context.args[0])
        warning_index = -1
        
        if len(context.args) > 1:
            warning_index = int(context.args[1])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        success = await unwarn_user(target_id, user_id, warning_index)
        
        if success:
            warnings_count = len(user_warnings[target_id])
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.\n"
                f"üìä –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}"
            )
        else:
            await update.message.reply_text("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")

# üÜï –ö–û–ú–ê–ù–î–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï
async def userinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /userinfo <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        data = user_data[target_id]
        win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º—É—Ç–µ
        mute_info = "–ù–µ—Ç"
        if target_id in muted_users:
            mute_data = muted_users[target_id]
            mute_until = datetime.datetime.fromisoformat(mute_data['muted_until'])
            if datetime.datetime.now() < mute_until:
                time_left = mute_until - datetime.datetime.now()
                mute_info = f"–î–æ {mute_until.strftime('%Y-%m-%d %H:%M:%S')} ({str(time_left).split('.')[0]})"
            else:
                mute_info = "–ò—Å—Ç–µ–∫ (–Ω–µ —Å–Ω—è—Ç)"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP
        vip_info = "–ù–µ—Ç"
        is_vip, vip_time = await check_vip(target_id)
        if is_vip:
            vip_info = vip_time
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö
        warnings_info = "–ù–µ—Ç"
        if user_warnings[target_id]:
            warnings_info = f"{len(user_warnings[target_id])} —à—Ç.\n"
            for i, warning in enumerate(user_warnings[target_id][-3:], 1):
                warnings_info += f"  {i}. {warning['reason']} ({warning['warned_at'][:10]})\n"
        
        user_info_text = f"""
üë§ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:

üÜî ID: {target_id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {data['registration_date'][:10]}
üí∞ –ë–∞–ª–∞–Ω—Å: {round(data['game_balance'], 1)} ‚≠ê
üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {data['current_bet']} ‚≠ê
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {data['total_games']}
üèÜ –ü–æ–±–µ–¥: {data['total_wins']}
üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {data['total_deposited']} ‚≠ê
üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥: {data['real_money_spent']} Stars

üîá –ú—É—Ç: {mute_info}
‚≠ê VIP: {vip_info}
‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings_info}

üî• –°–ò–°–¢–ï–ú–´ –ë–û–ù–£–°–û–í:
üìä –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {data['win_streak']}
üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {data['max_win_streak']}
üéâ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {data['mega_wins_count']}
üí´ –°—É–º–º–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {round(data['total_mega_win_amount'], 1)} ‚≠ê

üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê:
üéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {data['referral_code']}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {data['referrals_count']}
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {round(data['referral_earnings'], 1)} ‚≠ê
        """
        
        await update.message.reply_text(user_info_text)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ë–†–û–°–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò
async def resetstats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resetstats <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_data[target_id]['total_games'] = 0
        user_data[target_id]['total_wins'] = 0
        user_data[target_id]['win_streak'] = 0
        user_data[target_id]['max_win_streak'] = 0
        user_data[target_id]['mega_wins_count'] = 0
        user_data[target_id]['total_mega_win_amount'] = 0.0
        save_data()
        
        log_admin_action(user_id, "reset_stats", target_id)
        
        await update.message.reply_text(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–±—Ä–æ—à–µ–Ω–∞.")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –í–´–î–ê–ß–ò VIP
async def give_vip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_vip <user_id> <–¥–Ω–µ–π>")
        return
    
    try:
        target_id = int(context.args[0])
        days = int(context.args[1])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await give_vip(target_id, user_id, days)
        
        await update.message.reply_text(
            f"‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –ø–æ–ª—É—á–∏–ª VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ {days} –¥–Ω–µ–π."
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ù–Ø–¢–ò–Ø VIP
async def remove_vip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_vip <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        success = await remove_vip(target_id, user_id)
        
        if success:
            await update.message.reply_text(f"‚úÖ VIP —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–Ω—è—Ç.")
        else:
            await update.message.reply_text("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç VIP —Å—Ç–∞—Ç—É—Å–∞!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")

# üÜï –°–ò–°–¢–ï–ú–ê –ù–ï–î–ï–õ–¨–ù–´–• –ù–ê–ì–†–ê–î
def update_weekly_activity(user_id: int, bet_amount: float) -> dict:
    today = datetime.datetime.now().date()
    activity = user_activity[user_id]
    
    if activity['last_activity_date'] != today.isoformat():
        activity['daily_games_count'] = 0
        activity['last_activity_date'] = today.isoformat()
    
    activity['daily_games_count'] += 1
    activity['weekly_total_games'] += 1
    activity['weekly_total_bets'] += bet_amount
    
    if activity['current_week_start'] is None:
        activity['current_week_start'] = today.isoformat()
    
    week_start = datetime.datetime.fromisoformat(activity['current_week_start']).date()
    days_diff = (today - week_start).days
    
    if days_diff < 7:
        if activity['last_activity_date'] == today.isoformat():
            if activity['daily_games_count'] >= WEEKLY_BONUS_CONFIG["min_daily_games"]:
                activity['weekly_streak_days'] = min(7, activity['weekly_streak_days'] + 1)
    else:
        activity['current_week_start'] = today.isoformat()
        activity['weekly_total_games'] = 0
        activity['weekly_total_bets'] = 0
        activity['weekly_streak_days'] = 1 if activity['daily_games_count'] >= WEEKLY_BONUS_CONFIG["min_daily_games"] else 0
    
    if (activity['weekly_streak_days'] >= WEEKLY_BONUS_CONFIG["required_days"] and 
        activity['last_weekly_bonus_date'] != today.isoformat()):
        
        base_bonus = activity['weekly_total_bets'] * WEEKLY_BONUS_CONFIG["base_percent"]
        
        min_games = WEEKLY_BONUS_CONFIG["min_daily_games"] * WEEKLY_BONUS_CONFIG["required_days"]
        extra_games = max(0, activity['weekly_total_games'] - min_games)
        extra_bonus = activity['weekly_total_bets'] * extra_games * WEEKLY_BONUS_CONFIG["bonus_per_extra_game"]
        max_extra = activity['weekly_total_bets'] * WEEKLY_BONUS_CONFIG["max_extra_bonus"]
        extra_bonus = min(extra_bonus, max_extra)
        
        total_bonus = base_bonus + extra_bonus
        
        user_data[user_id]['game_balance'] += total_bonus
        activity['last_weekly_bonus_date'] = today.isoformat()
        activity['weekly_streak_days'] = 0
        activity['weekly_total_games'] = 0
        activity['weekly_total_bets'] = 0
        
        save_data()
        
        return {
            'total_games': activity['weekly_total_games'],
            'total_bets': activity['weekly_total_bets'],
            'base_bonus': base_bonus,
            'extra_bonus': extra_bonus,
            'total_bonus': total_bonus
        }
    
    save_data()
    return None

# üëë –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
async def admin_panel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    total_users = len(user_data)
    total_games = sum(data['total_games'] for data in user_data.values())
    total_wins = sum(data['total_wins'] for data in user_data.values())
    total_balance = sum(data['game_balance'] for data in user_data.values())
    total_deposited = sum(data['total_deposited'] for data in user_data.values())
    total_real_money = sum(data['real_money_spent'] for data in user_data.values())
    
    win_rate = (total_wins / total_games * 100) if total_games > 0 else 0
    
    admin_text = f"""
üëë –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}
üèÜ –í—Å–µ–≥–æ –ø–æ–±–µ–¥: {total_wins}
üìà –û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {round(total_balance, 1)} ‚≠ê
üí≥ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: {round(total_deposited, 1)} ‚≠ê
üí∏ –†–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥: {round(total_real_money, 1)} Stars

üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned_users)}
üîá –í –º—É—Ç–µ: {len(muted_users)}
‚ö†Ô∏è –° –≤–∞—Ä–Ω–∞–º–∏: {len([uid for uid, warns in user_warnings.items() if warns])}
‚≠ê VIP: {len(vip_users)}

üéüÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {len(promo_codes)}
üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: {len(referral_codes)}
    """
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
         InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–∏", callback_data="admin_top"),
         InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏", callback_data="admin_balance"),
         InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="admin_search")],
        [InlineKeyboardButton("üõ†Ô∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system"),
         InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promo")],
        [InlineKeyboardButton("üö´ –ë–∞–Ω-–º–µ–Ω–µ–¥–∂–µ—Ä", callback_data="admin_ban"),
         InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", callback_data="admin_backup")],
        [InlineKeyboardButton("üí∏ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_withdrawals"),
         InlineKeyboardButton("üéÆ –¢–µ—Å—Ç –∏–≥—Ä", callback_data="admin_play")],
        [InlineKeyboardButton("üî® –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="admin_moderation"),
         InlineKeyboardButton("‚≠ê VIP", callback_data="admin_vip")],
        [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics"),
         InlineKeyboardButton("üìã –õ–æ–≥–∏", callback_data="admin_logs")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", callback_data="admin_automation"),
         InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="admin_games")],
        [InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å—ã", callback_data="admin_bonuses"),
         InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="admin_referrals")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
         InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="admin_exit")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(admin_text, reply_markup=reply_markup)

# üÜï CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò
async def admin_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    total_users = len(user_data)
    total_games = sum(data['total_games'] for data in user_data.values())
    total_wins = sum(data['total_wins'] for data in user_data.values())
    total_balance = sum(data['game_balance'] for data in user_data.values())
    total_deposited = sum(data['total_deposited'] for data in user_data.values())
    total_real_money = sum(data['real_money_spent'] for data in user_data.values())
    
    win_rate = (total_wins / total_games * 100) if total_games > 0 else 0
    
    today = datetime.datetime.now().date()
    today_games = 0
    today_deposits = 0
    
    for data in user_data.values():
        if 'last_activity' in data:
            last_activity = datetime.datetime.fromisoformat(data['last_activity']).date()
            if last_activity == today:
                today_games += data['total_games']
    
    stats_text = f"""
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {today_games}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {len([data for data in user_data.values() if (datetime.datetime.now().date() - datetime.datetime.fromisoformat(data['registration_date']).date()).days <= 7])}

üéÆ –ò–≥—Ä—ã:
‚Ä¢ –í—Å–µ–≥–æ: {total_games}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {today_games}
‚Ä¢ –ü–æ–±–µ–¥: {total_wins}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%

üí∞ –§–∏–Ω–∞–Ω—Å—ã:
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {round(total_balance, 1)} ‚≠ê
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: {round(total_deposited, 1)} ‚≠ê
‚Ä¢ –†–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥: {round(total_real_money, 1)} Stars
‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {round(today_deposits, 1)} ‚≠ê

üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned_users)}
‚Ä¢ –í –º—É—Ç–µ: {len(muted_users)}
‚Ä¢ –° –≤–∞—Ä–Ω–∞–º–∏: {len([uid for uid, warns in user_warnings.items() if warns])}
‚Ä¢ VIP: {len(vip_users)}
    """
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(stats_text, reply_markup=reply_markup)

async def admin_users_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    page = context.user_data.get('admin_users_page', 0)
    users_per_page = 10
    users_list = list(user_data.items())
    total_pages = (len(users_list) + users_per_page - 1) // users_per_page
    
    start_idx = page * users_per_page
    end_idx = min(start_idx + users_per_page, len(users_list))
    
    users_text = f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Å—Ç—Ä. {page + 1}/{total_pages})\n\n"
    
    for i, (uid, data) in enumerate(users_list[start_idx:end_idx], start_idx + 1):
        win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
        users_text += (
            f"{i}. ID {uid}: {round(data['game_balance'], 1)} ‚≠ê, "
            f"{data['total_games']} –∏–≥—Ä, {win_rate:.1f}%\n"
        )
    
    keyboard = []
    if page > 0:
        keyboard.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_users_prev_{page-1}"))
    if page < total_pages - 1:
        keyboard.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"admin_users_next_{page+1}"))
    
    if keyboard:
        keyboard = [keyboard]
    
    keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search")])
    keyboard.append([InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(users_text, reply_markup=reply_markup)

async def admin_users_navigation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    action = query.data
    if action.startswith("admin_users_prev_"):
        page = int(action.split("_")[3])
        context.user_data['admin_users_page'] = page
        await admin_users_callback(update, context)
    elif action.startswith("admin_users_next_"):
        page = int(action.split("_")[3])
        context.user_data['admin_users_page'] = page
        await admin_users_callback(update, context)

async def admin_top_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    top_balance = sorted(user_data.items(), key=lambda x: x[1]['game_balance'], reverse=True)[:10]
    
    top_text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n"
    for i, (uid, data) in enumerate(top_balance, 1):
        top_text += f"{i}. ID {uid}: {round(data['game_balance'], 1)} ‚≠ê\n"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(top_text, reply_markup=reply_markup)

async def admin_broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    broadcast_text = "üì¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
    broadcast_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /broadcast <—Ç–µ–∫—Å—Ç> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
    broadcast_text += "–ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(broadcast_text, reply_markup=reply_markup)

async def admin_balance_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    balance_text = "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏\n\n"
    balance_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    balance_text += "/addbalance <user_id> <amount> - –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
    balance_text += "/setbalance <user_id> <amount> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
    balance_text += "/resetbalance <user_id> - —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å\n\n"
    balance_text += "–ü—Ä–∏–º–µ—Ä—ã:\n"
    balance_text += "/addbalance 123456789 100\n"
    balance_text += "/setbalance 123456789 500\n"
    balance_text += "/resetbalance 123456789"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(balance_text, reply_markup=reply_markup)

async def admin_search_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    search_text = "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
    search_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    search_text += "/find <user_id/username> - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫\n"
    search_text += "/searchid <user_id> - –ø–æ–∏—Å–∫ –ø–æ ID\n"
    search_text += "/userinfo <user_id> - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
    search_text += "–ü—Ä–∏–º–µ—Ä—ã:\n"
    search_text += "/find 123456789\n"
    search_text += "/searchid 123456789\n"
    search_text += "/userinfo 123456789"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(search_text, reply_markup=reply_markup)

async def admin_system_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    import psutil
    import os
    
    process = psutil.Process(os.getpid())
    memory_usage = process.memory_info().rss / 1024 / 1024
    
    system_text = "üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
    system_text += f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage:.1f} MB\n"
    system_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: {len(user_data)}\n"
    system_text += f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(user_data)) // 1024} KB\n"
    system_text += f"üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.datetime.now() - datetime.datetime.fromtimestamp(process.create_time())}\n\n"
    system_text += "–ö–æ–º–∞–Ω–¥—ã:\n"
    system_text += "/system - —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
    system_text += "/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    system_text += "/reset_streaks - —Å–±—Ä–æ—Å —Å–µ—Ä–∏–π"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(system_text, reply_markup=reply_markup)

async def admin_promo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    promo_text = "üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏\n\n"
    promo_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    promo_text += "/promo_create <amount> <uses> - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
    promo_text += "/promo_list - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
    promo_text += "/promo_delete <code> - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
    promo_text += "/promo_info <code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ\n\n"
    promo_text += "–ü—Ä–∏–º–µ—Ä—ã:\n"
    promo_text += "/promo_create 100 50\n"
    promo_text += "/promo_list\n"
    promo_text += "/promo_delete SUMMER2024\n"
    promo_text += "/promo_info SUMMER2024"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(promo_text, reply_markup=reply_markup)

async def admin_ban_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    ban_text = "üö´ –ë–∞–Ω-–º–µ–Ω–µ–¥–∂–µ—Ä\n\n"
    ban_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    ban_text += "/ban <user_id> <–ø—Ä–∏—á–∏–Ω–∞> - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
    ban_text += "/unban <user_id> - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
    ban_text += "/banlist - —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö\n\n"
    ban_text += "–ü—Ä–∏–º–µ—Ä—ã:\n"
    ban_text += "/ban 123456789 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª\n"
    ban_text += "/unban 123456789\n"
    ban_text += "/banlist"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(ban_text, reply_markup=reply_markup)

async def admin_backup_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    backup_text = "üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏\n\n"
    backup_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    backup_text += "/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª\n"
    backup_text += "/system - —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
    backup_text += "–§—É–Ω–∫—Ü–∏–∏:\n"
    backup_text += "‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
    backup_text += "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
    backup_text += "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(backup_text, reply_markup=reply_markup)

async def admin_withdrawals_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    withdrawals_text = "üí∏ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥\n\n"
    
    total_withdrawals = 0
    for user_requests in withdrawal_requests.values():
        total_withdrawals += len(user_requests)
    
    withdrawals_text += f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_withdrawals}\n"
    withdrawals_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—è–≤–∫–∞–º–∏: {len(withdrawal_requests)}\n\n"
    
    if total_withdrawals > 0:
        withdrawals_text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫:\n"
        all_requests = []
        for user_id, requests in withdrawal_requests.items():
            for req in requests:
                all_requests.append((user_id, req))
        
        all_requests.sort(key=lambda x: x[1]['timestamp'], reverse=True)
        
        for i, (uid, req) in enumerate(all_requests[:10], 1):
            withdrawals_text += f"{i}. ID {uid}: {req['amount']} ‚≠ê ({req['timestamp'][:16]})\n"
    else:
        withdrawals_text += "–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç."
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(withdrawals_text, reply_markup=reply_markup)

async def admin_play_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    play_text = "üéÆ –¢–µ—Å—Ç –∏–≥—Ä\n\n"
    play_text += "–í —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
    play_text += "‚Ä¢ –ò–≥—Ä—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã\n"
    play_text += "‚Ä¢ –ë–∞–ª–∞–Ω—Å –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è\n"
    play_text += "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è\n"
    play_text += "‚Ä¢ –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–≥—Ä—ã\n\n"
    play_text += "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ –º–µ–Ω—é!"
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(play_text, reply_markup=reply_markup)

async def admin_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    moderation_text = "üî® –ú–æ–¥–µ—Ä–∞—Ü–∏—è\n\n"
    moderation_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    moderation_text += "/mute <user_id> <–≤—Ä–µ–º—è> [–ø—Ä–∏—á–∏–Ω–∞] - –º—É—Ç\n"
    moderation_text += "/unmute <user_id> - —Ä–∞–∑–º—É—Ç–∏—Ç—å\n"
    moderation_text += "/warn <user_id> <–ø—Ä–∏—á–∏–Ω–∞> - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
    moderation_text += "/unwarn <user_id> - —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n\n"
    moderation_text += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    moderation_text += f"‚Ä¢ –í –º—É—Ç–µ: {len(muted_users)}\n"
    moderation_text += f"‚Ä¢ –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {len([uid for uid, warns in user_warnings.items() if warns])}\n\n"
    moderation_text += "–ü—Ä–∏–º–µ—Ä—ã:\n"
    moderation_text += "/mute 123456789 60 –°–ø–∞–º\n"
    moderation_text += "/unmute 123456789\n"
    moderation_text += "/warn 123456789 –ù–∞—Ä—É—à–µ–Ω–∏–µ\n"
    moderation_text += "/unwarn 123456789"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(moderation_text, reply_markup=reply_markup)

async def admin_vip_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    vip_text = "‚≠ê VIP —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n\n"
    vip_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    vip_text += "/give_vip <user_id> <–¥–Ω–µ–π> - –≤—ã–¥–∞—Ç—å VIP\n"
    vip_text += "/remove_vip <user_id> - —Å–Ω—è—Ç—å VIP\n\n"
    vip_text += f"VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(vip_users)}\n\n"
    
    if vip_users:
        vip_text += "–°–ø–∏—Å–æ–∫ VIP:\n"
        for i, (uid, vip_data) in enumerate(list(vip_users.items())[:10], 1):
            vip_until = datetime.datetime.fromisoformat(vip_data['vip_until'])
            time_left = vip_until - datetime.datetime.now()
            vip_text += f"{i}. ID {uid}: {str(time_left).split('.')[0]}\n"
    
    vip_text += "\n–ü—Ä–∏–º–µ—Ä—ã:\n"
    vip_text += "/give_vip 123456789 30\n"
    vip_text += "/remove_vip 123456789"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(vip_text, reply_markup=reply_markup)

async def admin_analytics_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    analytics_text = "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏\n\n"
    analytics_text += "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
    analytics_text += "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
    analytics_text += "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    analytics_text += "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º\n"
    analytics_text += "‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
    analytics_text += "‚Ä¢ –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(analytics_text, reply_markup=reply_markup)

async def admin_logs_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    logs_text = "üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π\n\n"
    
    if not admin_logs:
        logs_text += "–õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        logs_text += f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(admin_logs)}\n\n"
        logs_text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–µ–π—Å—Ç–≤–∏–π:\n"
        
        for log in admin_logs[-10:]:
            timestamp = datetime.datetime.fromisoformat(log['timestamp']).strftime("%H:%M:%S")
            logs_text += f"{timestamp} - {log['action']}"
            if log.get('target_id'):
                logs_text += f" - ID {log['target_id']}"
            if log.get('details'):
                logs_text += f" - {log['details']}"
            logs_text += "\n"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(logs_text, reply_markup=reply_markup)

async def admin_automation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    automation_text = "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏\n\n"
    automation_text += "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
    automation_text += "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
    automation_text += "‚Ä¢ –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏\n"
    automation_text += "‚Ä¢ –ê–≤—Ç–æ-—Å–æ–±—ã—Ç–∏—è\n"
    automation_text += "‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏\n"
    automation_text += "‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(automation_text, reply_markup=reply_markup)

async def admin_games_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    games_text = "üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä\n\n"
    games_text += "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
    games_text += "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
    games_text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–Ω—Å–æ–≤\n"
    games_text += "‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä\n"
    games_text += "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º\n"
    games_text += "‚Ä¢ –ê/–ë —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(games_text, reply_markup=reply_markup)

async def admin_bonuses_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    bonuses_text = "üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞–º–∏\n\n"
    bonuses_text += "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
    bonuses_text += "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
    bonuses_text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–Ω—É—Å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º\n"
    bonuses_text += "‚Ä¢ –ü—Ä–æ–º–æ-–∞–∫—Ü–∏–∏\n"
    bonuses_text += "‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã\n"
    bonuses_text += "‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –∫–æ–¥—ã"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(bonuses_text, reply_markup=reply_markup)

async def admin_referrals_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    referrals_text = "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
    
    total_referrals = sum(data['referrals_count'] for data in user_data.values())
    total_earnings = sum(data['referral_earnings'] for data in user_data.values())
    
    referrals_text += f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    referrals_text += f"‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}\n"
    referrals_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {round(total_earnings, 1)} ‚≠ê\n"
    referrals_text += f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: {len(referral_codes)}\n\n"
    
    top_referrers = sorted(user_data.items(), key=lambda x: x[1]['referral_earnings'], reverse=True)[:5]
    
    if top_referrers:
        referrals_text += "–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n"
        for i, (uid, data) in enumerate(top_referrers, 1):
            referrals_text += f"{i}. ID {uid}: {data['referrals_count']} —Ä–µ—Ñ., {round(data['referral_earnings'], 1)} ‚≠ê\n"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(referrals_text, reply_markup=reply_markup)

async def admin_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n\n"
    settings_text += "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
    settings_text += "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
    settings_text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞\n"
    settings_text += "‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä\n"
    settings_text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
    settings_text += "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(settings_text, reply_markup=reply_markup)

async def admin_exit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    admin_mode[user_id] = False
    save_data()
    
    await query.edit_message_text(
        "üëã –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º...",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")],
            [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")]
        ])
    )

# üÜï –ö–û–ú–ê–ù–î–ê –†–ê–°–°–´–õ–ö–ò
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /broadcast –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
        )
        return
    
    message_text = ' '.join(context.args)
    total_users = len(user_data)
    successful_sends = 0
    failed_sends = 0
    
    progress_message = await update.message.reply_text(
        f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: 0\n"
        f"‚ùå –û—à–∏–±–æ–∫: 0\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%"
    )
    
    for i, user_id in enumerate(user_data.keys()):
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ –û–ë–™–Ø–í–õ–ï–ù–ò–ï:\n\n{message_text}\n\n‚Äî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∑–∏–Ω–æ"
            )
            successful_sends += 1
        except Exception:
            failed_sends += 1
        
        if i % 10 == 0 or i == total_users - 1:
            progress = (i + 1) / total_users * 100
            await progress_message.edit_text(
                f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞...\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_sends}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed_sends}\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%"
            )
        
        await asyncio.sleep(0.1)
    
    await progress_message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_sends}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_sends}\n"
        f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(successful_sends/total_users*100):.1f}%"
    )
    
    log_admin_action(user_id, "broadcast", None, f"—Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:50]}...")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ò–°–¢–ï–ú–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò
async def system_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    import psutil
    import os
    
    process = psutil.Process(os.getpid())
    memory_usage = process.memory_info().rss / 1024 / 1024
    
    total_users = len(user_data)
    total_games = sum(data['total_games'] for data in user_data.values())
    total_balance = sum(data['game_balance'] for data in user_data.values())
    
    system_text = f"""
üñ•Ô∏è –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø

üíæ –ü–∞–º—è—Ç—å: {memory_usage:.1f} MB
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {round(total_balance, 1)} ‚≠ê

üìä –î–ê–ù–ù–´–ï:
‚Ä¢ user_data: {len(user_data)} –∑–∞–ø–∏—Å–µ–π
‚Ä¢ user_activity: {len(user_activity)} –∑–∞–ø–∏—Å–µ–π  
‚Ä¢ promo_codes: {len(promo_codes)} –∫–æ–¥–æ–≤
‚Ä¢ referral_codes: {len(referral_codes)} –∫–æ–¥–æ–≤
‚Ä¢ banned_users: {len(banned_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ muted_users: {len(muted_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ vip_users: {len(vip_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üïí –í–†–ï–ú–Ø –†–ê–ë–û–¢–´:
‚Ä¢ –ó–∞–ø—É—Å–∫: {datetime.datetime.fromtimestamp(process.create_time()).strftime('%Y-%m-%d %H:%M:%S')}
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç: {datetime.datetime.now() - datetime.datetime.fromtimestamp(process.create_time())}
    """
    
    await update.message.reply_text(system_text)

# üÜï –ö–û–ú–ê–ù–î–ê –≠–ö–°–ü–û–†–¢–ê –î–ê–ù–ù–´–•
async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    try:
        with open('data.json', 'rb') as f:
            await update.message.reply_document(
                document=f,
                filename=f'casino_backup_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.json',
                caption='üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ'
            )
        
        log_admin_action(user_id, "export_data")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ë–†–û–°–ê –°–ï–†–ò–ô
async def reset_streaks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    reset_count = 0
    for uid, data in user_data.items():
        if data['win_streak'] > 0:
            data['win_streak'] = 0
            reset_count += 1
    
    save_data()
    
    await update.message.reply_text(
        f"‚úÖ –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥ —Å–±—Ä–æ—à–µ–Ω—ã —É {reset_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
    )
    
    log_admin_action(user_id, "reset_streaks", None, f"—Å–±—Ä–æ—à–µ–Ω–æ —É {reset_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# üÜï –ö–û–ú–ê–ù–î–ê –¢–û–ü–ê
async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    top_balance = sorted(user_data.items(), key=lambda x: x[1]['game_balance'], reverse=True)[:10]
    
    top_text = "üèÜ –¢–û–ü –ò–ì–†–û–ö–û–í –ü–û –ë–ê–õ–ê–ù–°–£:\n\n"
    for i, (uid, data) in enumerate(top_balance, 1):
        win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
        top_text += f"{i}. ID {uid}: {round(data['game_balance'], 1)} ‚≠ê ({win_rate:.1f}%)\n"
    
    await update.message.reply_text(top_text)

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
def main():
    load_data()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # üë§ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("activity", activity_command))
    application.add_handler(CommandHandler("promo", promo_command))
    application.add_handler(CommandHandler("bet", bet_command))
    application.add_handler(CommandHandler("top", top_command))
    
    # üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("deposit", deposit_command))
    application.add_handler(CommandHandler("withdraw", withdraw_command))
    
    # üëë –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("unban", unban_command))
    application.add_handler(CommandHandler("banlist", banlist_command))
    application.add_handler(CommandHandler("addbalance", addbalance_command))
    application.add_handler(CommandHandler("setbalance", setbalance_command))
    application.add_handler(CommandHandler("resetbalance", resetbalance_command))
    application.add_handler(CommandHandler("promo_create", promo_create_command))
    application.add_handler(CommandHandler("promo_list", promo_list_command))
    application.add_handler(CommandHandler("promo_delete", promo_delete_command))
    application.add_handler(CommandHandler("promo_info", promo_info_command))
    application.add_handler(CommandHandler("searchid", searchid_command))
    application.add_handler(CommandHandler("find", find_command))
    application.add_handler(CommandHandler("mute", mute_command))
    application.add_handler(CommandHandler("unmute", unmute_command))
    application.add_handler(CommandHandler("warn", warn_command))
    application.add_handler(CommandHandler("unwarn", unwarn_command))
    application.add_handler(CommandHandler("userinfo", userinfo_command))
    application.add_handler(CommandHandler("resetstats", resetstats_command))
    application.add_handler(CommandHandler("give_vip", give_vip_command))
    application.add_handler(CommandHandler("remove_vip", remove_vip_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CommandHandler("system", system_command))
    application.add_handler(CommandHandler("export", export_command))
    application.add_handler(CommandHandler("reset_streaks", reset_streaks_command))
    
    # üí≥ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô
    application.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    
    # üéÆ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ì–†
    application.add_handler(MessageHandler(filters.Dice.ALL, handle_user_dice))
    
    # üîÑ CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    application.add_handler(CallbackQueryHandler(profile, pattern="^back_to_profile$"))
    application.add_handler(CallbackQueryHandler(play_games_callback, pattern="^play_games$"))
    application.add_handler(CallbackQueryHandler(deposit_callback, pattern="^deposit$"))
    application.add_handler(CallbackQueryHandler(withdraw_callback, pattern="^withdraw$"))
    application.add_handler(CallbackQueryHandler(change_bet_callback, pattern="^change_bet$"))
    application.add_handler(CallbackQueryHandler(referral_system_callback, pattern="^referral_system$"))
    
    application.add_handler(CallbackQueryHandler(handle_deposit_selection, pattern="^buy_"))
    application.add_handler(CallbackQueryHandler(handle_withdraw_selection, pattern="^withdraw_"))
    application.add_handler(CallbackQueryHandler(confirm_withdraw, pattern="^confirm_withdraw$"))
    
    application.add_handler(CallbackQueryHandler(handle_game_selection, pattern="^play_"))
    
    # üëë –ê–î–ú–ò–ù CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    application.add_handler(CallbackQueryHandler(admin_panel_callback, pattern="^admin_panel$"))
    application.add_handler(CallbackQueryHandler(admin_stats_callback, pattern="^admin_stats$"))
    application.add_handler(CallbackQueryHandler(admin_users_callback, pattern="^admin_users$"))
    application.add_handler(CallbackQueryHandler(admin_users_navigation_callback, pattern="^admin_users_"))
    application.add_handler(CallbackQueryHandler(admin_top_callback, pattern="^admin_top$"))
    application.add_handler(CallbackQueryHandler(admin_broadcast_callback, pattern="^admin_broadcast$"))
    application.add_handler(CallbackQueryHandler(admin_balance_callback, pattern="^admin_balance$"))
    application.add_handler(CallbackQueryHandler(admin_search_callback, pattern="^admin_search$"))
    application.add_handler(CallbackQueryHandler(admin_system_callback, pattern="^admin_system$"))
    application.add_handler(CallbackQueryHandler(admin_promo_callback, pattern="^admin_promo$"))
    application.add_handler(CallbackQueryHandler(admin_ban_callback, pattern="^admin_ban$"))
    application.add_handler(CallbackQueryHandler(admin_backup_callback, pattern="^admin_backup$"))
    application.add_handler(CallbackQueryHandler(admin_withdrawals_callback, pattern="^admin_withdrawals$"))
    application.add_handler(CallbackQueryHandler(admin_play_callback, pattern="^admin_play$"))
    application.add_handler(CallbackQueryHandler(admin_moderation_callback, pattern="^admin_moderation$"))
    application.add_handler(CallbackQueryHandler(admin_vip_callback, pattern="^admin_vip$"))
    application.add_handler(CallbackQueryHandler(admin_analytics_callback, pattern="^admin_analytics$"))
    application.add_handler(CallbackQueryHandler(admin_logs_callback, pattern="^admin_logs$"))
    application.add_handler(CallbackQueryHandler(admin_automation_callback, pattern="^admin_automation$"))
    application.add_handler(CallbackQueryHandler(admin_games_callback, pattern="^admin_games$"))
    application.add_handler(CallbackQueryHandler(admin_bonuses_callback, pattern="^admin_bonuses$"))
    application.add_handler(CallbackQueryHandler(admin_referrals_callback, pattern="^admin_referrals$"))
    application.add_handler(CallbackQueryHandler(admin_settings_callback, pattern="^admin_settings$"))
    application.add_handler(CallbackQueryHandler(admin_exit_callback, pattern="^admin_exit$"))
    
    # üöÄ –ó–ê–ü–£–°–ö
    print("üé∞ NSource Casino Bot –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
