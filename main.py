import os
import json
import datetime
from collections import defaultdict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from threading import Thread
from flask import Flask

# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8378526693:AAFOwAb6pVp1GOE0tXZN4PDLFnD_TTT1djg")

# üéÆ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –í–°–ï–• –ò–ì–†
GAMES_RESEARCH = {
    "üéØ": {
        "name": "–î–∞—Ä—Ç—Å",
        "values_range": 6,
        "research_data": {},
        "messages": {
            1: "üéØ –ê–ù–ò–ú–ê–¶–ò–Ø #1 - –ú–∏–º–æ –º–∏—à–µ–Ω–∏!",
            2: "üéØ –ê–ù–ò–ú–ê–¶–ò–Ø #2 - –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫—Ä–∞–π!",
            3: "üéØ –ê–ù–ò–ú–ê–¶–ò–Ø #3 - –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–Ω—Ç—Ä—É!",
            4: "üéØ –ê–ù–ò–ú–ê–¶–ò–Ø #4 - –•–æ—Ä–æ—à–∏–π –±—Ä–æ—Å–æ–∫!",
            5: "üéØ –ê–ù–ò–ú–ê–¶–ò–Ø #5 - –ü–æ—á—Ç–∏ –≤ —è–±–ª–æ—á–∫–æ!",
            6: "üéØ –ê–ù–ò–ú–ê–¶–ò–Ø #6 - –ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨!"
        }
    },
    "üé≤": {
        "name": "–ö–æ—Å—Ç–∏", 
        "values_range": 6,
        "research_data": {},
        "messages": {
            1: "üé≤ –ê–ù–ò–ú–ê–¶–ò–Ø #1 - –í—ã–ø–∞–ª–∞ 1!",
            2: "üé≤ –ê–ù–ò–ú–ê–¶–ò–Ø #2 - –í—ã–ø–∞–ª–∞ 2!",
            3: "üé≤ –ê–ù–ò–ú–ê–¶–ò–Ø #3 - –í—ã–ø–∞–ª–∞ 3!",
            4: "üé≤ –ê–ù–ò–ú–ê–¶–ò–Ø #4 - –í—ã–ø–∞–ª–∞ 4!",
            5: "üé≤ –ê–ù–ò–ú–ê–¶–ò–Ø #5 - –í—ã–ø–∞–ª–∞ 5!",
            6: "üé≤ –ê–ù–ò–ú–ê–¶–ò–Ø #6 - –í—ã–ø–∞–ª–∞ 6!"
        }
    },
    "üé≥": {
        "name": "–ë–æ—É–ª–∏–Ω–≥",
        "values_range": 6,
        "research_data": {},
        "messages": {
            1: "üé≥ –ê–ù–ò–ú–ê–¶–ò–Ø #1 - 1 –∫–µ–≥–ª—è!",
            2: "üé≥ –ê–ù–ò–ú–ê–¶–ò–Ø #2 - 2 –∫–µ–≥–ª–∏!",
            3: "üé≥ –ê–ù–ò–ú–ê–¶–ò–Ø #3 - 3 –∫–µ–≥–ª–∏!",
            4: "üé≥ –ê–ù–ò–ú–ê–¶–ò–Ø #4 - 4 –∫–µ–≥–ª–∏!",
            5: "üé≥ –ê–ù–ò–ú–ê–¶–ò–Ø #5 - 5 –∫–µ–≥–ª–µ–π!",
            6: "üé≥ –ê–ù–ò–ú–ê–¶–ò–Ø #6 - –°–¢–†–ê–ô–ö!"
        }
    },
    "‚öΩ": {
        "name": "–§—É—Ç–±–æ–ª",
        "values_range": 5,
        "research_data": {},
        "messages": {
            1: "‚öΩ –ê–ù–ò–ú–ê–¶–ò–Ø #1 - –ú—è—á –≤ –∞—É—Ç!",
            2: "‚öΩ –ê–ù–ò–ú–ê–¶–ò–Ø #2 - –£–¥–∞—Ä –ø–æ —à—Ç–∞–Ω–≥–µ!",
            3: "‚öΩ –ê–ù–ò–ú–ê–¶–ò–Ø #3 - –ë–ª–æ–∫ –∑–∞—â–∏—Ç–Ω–∏–∫–∞!",
            4: "‚öΩ –ê–ù–ò–ú–ê–¶–ò–Ø #4 - –°–µ–π–≤ –≤—Ä–∞—Ç–∞—Ä—è!",
            5: "‚öΩ –ê–ù–ò–ú–ê–¶–ò–Ø #5 - –ì–û–û–û–õ!"
        }
    },
    "üèÄ": {
        "name": "–ë–∞—Å–∫–µ—Ç–±–æ–ª",
        "values_range": 5, 
        "research_data": {},
        "messages": {
            1: "üèÄ –ê–ù–ò–ú–ê–¶–ò–Ø #1 - –ü—Ä–æ–º–∞—Ö!",
            2: "üèÄ –ê–ù–ò–ú–ê–¶–ò–Ø #2 - –ó–∞–¥–µ–ª –æ–±–æ–¥!",
            3: "üèÄ –ê–ù–ò–ú–ê–¶–ò–Ø #3 - –ö–æ–ª–µ–±–∞–ª—Å—è –∏ –≤—ã–ª–µ—Ç–µ–ª!",
            4: "üèÄ –ê–ù–ò–ú–ê–¶–ò–Ø #4 - –ü–æ—á—Ç–∏ –ø–æ–ø–∞–ª!",
            5: "üèÄ –ê–ù–ò–ú–ê–¶–ò–Ø #5 - –ü–û–ü–ê–î–ê–ù–ò–ï!"
        }
    }
}

# üë§ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéÆ –†–ï–ñ–ò–ú –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –í–°–ï–• –ò–ì–†\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —ç–º–æ–¥–∑–∏ –∏–≥—Ä—ã –≤ —á–∞—Ç:\n"
        "üéØ –î–∞—Ä—Ç—Å (6 –∑–Ω–∞—á–µ–Ω–∏–π)\n"
        "üé≤ –ö–æ—Å—Ç–∏ (6 –∑–Ω–∞—á–µ–Ω–∏–π)\n" 
        "üé≥ –ë–æ—É–ª–∏–Ω–≥ (6 –∑–Ω–∞—á–µ–Ω–∏–π)\n"
        "‚öΩ –§—É—Ç–±–æ–ª (5 –∑–Ω–∞—á–µ–Ω–∏–π)\n"
        "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª (5 –∑–Ω–∞—á–µ–Ω–∏–π)\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/research - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n"
        "/game_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º\n"
        "/test_all - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä\n\n"
        "–ë–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω–æ–º–µ—Ä –∫–∞–∂–¥–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏!"
    )

async def test_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä"""
    await update.message.reply_text(
        "üéÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ò–ì–† –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –∏–≥—Ä –≤ —á–∞—Ç:\n"
        "üéØ –î–∞—Ä—Ç—Å - 6 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n"
        "üé≤ –ö–æ—Å—Ç–∏ - 6 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n"
        "üé≥ –ë–æ—É–ª–∏–Ω–≥ - 6 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n"
        "‚öΩ –§—É—Ç–±–æ–ª - 5 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n"
        "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª - 5 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n\n"
        "–ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π /research –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    )

async def research_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä"""
    research_text = "üéÆ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –í–°–ï–• –ò–ì–†\n\n"
    
    for emoji, game_data in GAMES_RESEARCH.items():
        research_data = game_data["research_data"]
        found_count = len(research_data)
        total_count = game_data["values_range"]
        
        research_text += f"{emoji} {game_data['name']}: {found_count}/{total_count} –∑–Ω–∞—á–µ–Ω–∏–π\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if research_data:
            values_line = ""
            for value in range(1, total_count + 1):
                if value in research_data:
                    count = research_data[value]['count']
                    values_line += f"{value}({count}) "
                else:
                    values_line += f"‚ùì{value} "
            research_text += values_line + "\n\n"
        else:
            research_text += "‚ùì –ï—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
    
    await update.message.reply_text(research_text)

async def game_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º"""
    stats_text = "üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–ì–†–ê–ú\n\n"
    
    for emoji, game_data in GAMES_RESEARCH.items():
        research_data = game_data["research_data"]
        found_count = len(research_data)
        total_count = game_data["values_range"]
        
        stats_text += f"{emoji} {game_data['name']}:\n"
        stats_text += f"üìà –ù–∞–π–¥–µ–Ω–æ: {found_count}/{total_count}\n"
        
        if research_data:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ—Å–∫–æ–≤
            total_throws = sum(data['count'] for data in research_data.values())
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤
            all_users = set()
            for data in research_data.values():
                all_users.update(data['users'])
            
            stats_text += f"üéÆ –í—Å–µ–≥–æ –±—Ä–æ—Å–∫–æ–≤: {total_throws}\n"
            stats_text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤: {len(all_users)}\n"
            
            # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if research_data:
                most_common = max(research_data.items(), key=lambda x: x[1]['count'])
                stats_text += f"üèÜ –ß–∞—â–µ –≤—Å–µ–≥–æ: #{most_common[0]} ({most_common[1]['count']} —Ä–∞–∑)\n"
        else:
            stats_text += "üìä –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç\n"
        
        stats_text += "\n"
    
    await update.message.reply_text(stats_text)

async def game_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä–µ"""
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /game_info <—ç–º–æ–¥–∑–∏>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/game_info üéØ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ä—Ç—Å–µ\n"
            "/game_info üé≤ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Å—Ç—è—Ö\n"
            "/game_info üé≥ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—É–ª–∏–Ω–≥–µ\n" 
            "/game_info ‚öΩ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É—Ç–±–æ–ª–µ\n"
            "/game_info üèÄ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Å–∫–µ—Ç–±–æ–ª–µ"
        )
        return
    
    emoji = context.args[0]
    if emoji not in GAMES_RESEARCH:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞! –ò—Å–ø–æ–ª—å–∑—É–π: üéØ, üé≤, üé≥, ‚öΩ, üèÄ")
        return
    
    game_data = GAMES_RESEARCH[emoji]
    research_data = game_data["research_data"]
    
    info_text = f"{emoji} –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û {game_data['name'].upper()}\n\n"
    info_text += f"üéØ –í—Å–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π: {game_data['values_range']}\n"
    info_text += f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(research_data)}/{game_data['values_range']}\n\n"
    
    if research_data:
        info_text += "üìà –ù–ê–ô–î–ï–ù–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:\n"
        for value in sorted(research_data.keys()):
            data = research_data[value]
            info_text += f"#{value}: {data['count']} —Ä–∞–∑, {len(data['users'])} —Ç–µ—Å—Ç–µ—Ä–æ–≤\n"
    else:
        info_text += "‚ùì –ó–Ω–∞—á–µ–Ω–∏—è –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
    
    info_text += f"\nüí° –û—Ç–ø—Ä–∞–≤—å {emoji} –≤ —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
    
    await update.message.reply_text(info_text)

def generate_game_message(emoji, value):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä—ã"""
    game_data = GAMES_RESEARCH[emoji]
    
    if value in game_data["messages"]:
        message = game_data["messages"][value]
    else:
        message = f"{emoji} –ê–ù–ò–ú–ê–¶–ò–Ø #{value} - –£–ù–ò–ö–ê–õ–¨–ù–ê–Ø –ö–û–ú–ë–ò–ù–ê–¶–ò–Ø!"
    
    return f"{message}\nüî¢ –ù–æ–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è: {value}/{game_data['values_range']}"

# üéÆ –û–ë–†–ê–ë–û–¢–ö–ê DICE - –î–õ–Ø –í–°–ï–• –ò–ì–†
async def handle_dice_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user_id = message.from_user.id
    
    if not message.dice:
        return
    
    emoji = message.dice.emoji
    value = message.dice.value
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–¥–Ω–∞ –∏–∑ –∏—Å—Å–ª–µ–¥—É–µ–º—ã—Ö –∏–≥—Ä
    if emoji not in GAMES_RESEARCH:
        return
    
    game_data = GAMES_RESEARCH[emoji]
    research_data = game_data["research_data"]
    
    # –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø
    if value not in research_data:
        research_data[value] = {
            'first_seen': datetime.datetime.now().isoformat(),
            'count': 0,
            'users': set()
        }
    
    research_data[value]['count'] += 1
    research_data[value]['users'].add(user_id)
    
    # –£–ù–ò–ö–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ó–ù–ê–ß–ï–ù–ò–Ø
    result_text = generate_game_message(emoji, value)
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£
    result_text += f"\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:"
    result_text += f"\n{emoji} –í—ã–ø–∞–¥–∞–ª–æ —Ä–∞–∑: {research_data[value]['count']}"
    result_text += f"\nüë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤: {len(research_data[value]['users'])}"
    result_text += f"\nüìà –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(research_data)}/{game_data['values_range']}"
    
    # –°–°–´–õ–ö–ê –ù–ê –ö–û–ú–ê–ù–î–£ –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê
    result_text += f"\n\nüí° –ü–æ–¥—Ä–æ–±–Ω–µ–µ: /game_info {emoji}"
    
    await message.reply_text(result_text)

# üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    callback_data = query.data
    
    if callback_data == 'test_all':
        await query.answer()
        await query.edit_message_text(
            "üéÆ –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –ò–ì–† –ê–ö–¢–ò–í–ò–†–û–í–ê–ù\n\n"
            "–û—Ç–ø—Ä–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –∏–≥—Ä –≤ —á–∞—Ç:\n"
            "üéØ –î–∞—Ä—Ç—Å - 6 –∑–Ω–∞—á–µ–Ω–∏–π\n"
            "üé≤ –ö–æ—Å—Ç–∏ - 6 –∑–Ω–∞—á–µ–Ω–∏–π\n"
            "üé≥ –ë–æ—É–ª–∏–Ω–≥ - 6 –∑–Ω–∞—á–µ–Ω–∏–π\n"
            "‚öΩ –§—É—Ç–±–æ–ª - 5 –∑–Ω–∞—á–µ–Ω–∏–π\n"
            "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª - 5 –∑–Ω–∞—á–µ–Ω–∏–π\n\n"
            "–Ø –ø–æ–∫–∞–∂—É –Ω–æ–º–µ—Ä –∫–∞–∂–¥–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏!"
        )

# üåê FLASK –î–õ–Ø RAILWAY
app = Flask(__name__)

@app.route('/')
def home():
    return "üéÆ Games Research Bot - –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–π –≤—Å–µ—Ö –∏–≥—Ä!"

@app.route('/research')
def research_web():
    """–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –∏–≥—Ä"""
    html = "<h1>üéÆ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä</h1>"
    
    for emoji, game_data in GAMES_RESEARCH.items():
        research_data = game_data["research_data"]
        found_count = len(research_data)
        total_count = game_data["values_range"]
        
        html += f"<h2>{emoji} {game_data['name']} - {found_count}/{total_count}</h2>"
        
        if research_data:
            html += "<table border='1'><tr><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th><th>–°–æ–æ–±—â–µ–Ω–∏–µ</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th><th>–¢–µ—Å—Ç–µ—Ä–æ–≤</th></tr>"
            
            for value in sorted(research_data.keys()):
                data = research_data[value]
                message = game_data["messages"].get(value, "–£–ù–ò–ö–ê–õ–¨–ù–ê–Ø –ö–û–ú–ë–ò–ù–ê–¶–ò–Ø")
                html += f"<tr><td>{value}</td><td>{message}</td><td>{data['count']}</td><td>{len(data['users'])}</td></tr>"
            
            html += "</table>"
        else:
            html += "<p>–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç</p>"
    
    return html

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
def main():
    port = int(os.environ.get("PORT", 5000))
    
    def run_flask():
        app.run(host='0.0.0.0', port=port)
    
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test_all", test_all))
    application.add_handler(CommandHandler("research", research_command))
    application.add_handler(CommandHandler("game_stats", game_stats_command))
    application.add_handler(CommandHandler("game_info", game_info_command))
    
    # CALLBACK'–ò
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –°–û–û–ë–©–ï–ù–ò–Ø - –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú DICE (–∞–Ω–∏–º–∞—Ü–∏–∏)
    application.add_handler(MessageHandler(filters.Dice.ALL, handle_dice_result))
    
    print("üéÆ Games Research Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üî¨ –ë–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: üéØ üé≤ üé≥ ‚öΩ üèÄ")
    application.run_polling()

if __name__ == '__main__':
    main()
