import os
import json
import random
import datetime
from collections import defaultdict
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, PreCheckoutQueryHandler
from threading import Thread
from flask import Flask

# ­ЪћД лџлълЮлцлўлЊлБлалљлдлўл»
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8378526693:AAFOwAb6pVp1GOE0tXZN4PDLFnD_TTT1djg")
PROVIDER_TOKEN = os.environ.get("PROVIDER_TOKEN", "TEST_PROVIDER_TOKEN")
ADMIN_CODE = os.environ.get("ADMIN_CODE", "1337")

# ­Ъј» лЮлљлАлблалълЎлџлў лўлЊла
GAME_COST = 0  # лЉлхЛЂл┐л╗л░ЛѓлйлЙ л┤л╗ЛЈ ЛѓлхЛЂЛѓлИЛђлЙл▓л░лйлИЛЈ

# ­Ъј░ лБлЮлўлџлљлЏлглЮлФлЋ лАлълълЉлЕлЋлЮлўл» лћлЏл» лџлљлќлћлълЎ лљлЮлўлюлљлдлўлў
SLOT_MESSAGES = {
    1: "­Ъј░ лљлЮлўлюлљлдлўл» #1 - лЌлълЏлълблФлЋ 777!",
    2: "­Ъј░ лљлЮлўлюлљлдлўл» #2 - лЉлЏлЋлАлбл»лЕлўлЋ лЉлљлалФ!",
    3: "­Ъј░ лљлЮлўлюлљлдлўл» #3 - лълЊлЮлЋлЮлЮлФлЋ лњлўлелЮлў!",
    4: "­Ъј░ лљлЮлўлюлљлдлўл» #4 - лАлўл»л«лЕлўлЋ лЏлўлюлълЮлФ!",
    5: "­Ъј░ лљлЮлўлюлљлдлўл» #5 - лЌлњлЋлЌлћлЮлФлЋ лАлЋлюлЋлалџлў!",
    6: "­Ъј░ лљлЮлўлюлљлдлўл» #6 - люлЋлблљлЏлЏлўлДлЋлАлџлўлЋ лЉлљлалФ!",
    7: "­Ъј░ лљлЮлўлюлљлдлўл» #7 - лалБлЉлўлЮлълњлФлЋ лњлўлелЮлў!",
    8: "­Ъј░ лљлЮлўлюлљлдлўл» #8 - лЌлълЏлълблФлЋ лЏлўлюлълЮлФ!",
    9: "­Ъј░ лљлЮлўлюлљлдлўл» #9 - лџлалўлАлблљлЏлглЮлФлЋ 777!",
    10: "­Ъј░ лљлЮлўлюлљлдлўл» #10 - лЮлЋлЉлЋлАлЮлФлЋ лЉлљлалФ!",
    11: "­Ъј░ лљлЮлўлюлљлдлўл» #11 - лўлЌлБлюлалБлћлЮлФлЋ лњлўлелЮлў!",
    12: "­Ъј░ лљлЮлўлюлљлдлўл» #12 - лГлЏлЋлџлблалўлДлЋлАлџлўлЋ лЏлўлюлълЮлФ!",
    13: "­Ъј░ лљлЮлўлюлљлдлўл» #13 - лЏлБлЮлЮлФлЋ лАлЋлюлЋлалџлў!",
    14: "­Ъј░ лљлЮлўлюлљлдлўл» #14 - лњлБлЏлџлљлЮлўлДлЋлАлџлўлЋ лЉлљлалФ!",
    15: "­Ъј░ лљлЮлўлюлљлдлўл» #15 - лАлљлЪлцлўлалълњлФлЋ лњлўлелЮлў!",
    16: "­Ъј░ лљлЮлўлюлљлдлўл» #16 - лалљлћлБлќлЮлФлЋ лЏлўлюлълЮлФ!",
    17: "­Ъј░ лљлЮлўлюлљлдлўл» #17 - лЊлљлЏлљлџлблўлДлЋлАлџлўлЋ 777!",
    18: "­Ъј░ лљлЮлўлюлљлдлўл» #18 - лЏлЋлћл»лЮлФлЋ лЉлљлалФ!",
    19: "­Ъј░ лљлЮлўлюлљлдлўл» #19 - лљлЏлюлљлЌлЮлФлЋ лњлўлелЮлў!",
    20: "­Ъј░ лљлЮлўлюлљлдлўл» #20 - лълЊлЮлЋлЮлЮлФлЋ лЏлўлюлълЮлФ!",
    21: "­Ъј░ лљлЮлўлюлљлдлўл» #21 - лџлълАлюлўлДлЋлАлџлўлЋ лАлЋлюлЋлалџлў!",
    22: "­Ъј░ лљлЮлўлюлљлдлўл» #22 - лЌлълЏлълблўлАлблФлЋ лЉлљлалФ!",
    23: "­Ъј░ лљлЮлўлюлљлдлўл» #23 - лЪлЏлљлюлЋлЮлЮлФлЋ лњлўлелЮлў!",
    24: "­Ъј░ лљлЮлўлюлљлдлўл» #24 - лАлњлЋлалџлљл«лЕлўлЋ лЏлўлюлълЮлФ!",
    25: "­Ъј░ лљлЮлўлюлљлдлўл» #25 - люлљлЊлўлДлЋлАлџлўлЋ 777!",
    26: "­Ъј░ лљлЮлўлюлљлдлўл» #26 - лАлблљлЏлглЮлФлЋ лЉлљлалФ!",
    27: "­Ъј░ лљлЮлўлюлљлдлўл» #27 - лЉлБлал»лЮлФлЋ лњлўлелЮлў!",
    28: "­Ъј░ лљлЮлўлюлљлдлўл» #28 - люлЋлћлълњлФлЋ лЏлўлюлълЮлФ!",
    29: "­Ъј░ лљлЮлўлюлљлдлўл» #29 - лЌлљлЊлљлћлълДлЮлФлЋ лАлЋлюлЋлалџлў!",
    30: "­Ъј░ лљлЮлўлюлљлдлўл» #30 - люлалљлюлълалЮлФлЋ лЉлљлалФ!",
    31: "­Ъј░ лљлЮлўлюлљлдлўл» #31 - лелълџлълЏлљлћлЮлФлЋ лњлўлелЮлў!",
    32: "­Ъј░ лљлЮлўлюлљлдлўл» #32 - лњлўлЦлалЋлњлФлЋ лЏлўлюлълЮлФ!",
    33: "­Ъј░ лљлЮлўлюлљлдлўл» #33 - лАлџлљлЌлълДлЮлФлЋ 777!",
    34: "­Ъј░ лљлЮлўлюлљлдлўл» #34 - лћлФлюлДлљлблФлЋ лЉлљлалФ!",
    35: "­Ъј░ лљлЮлўлюлљлдлўл» #35 - лњлўлЮлЮлФлЋ лњлўлелЮлў!",
    36: "­Ъј░ лљлЮлўлюлљлдлўл» #36 - лдлўлблалБлАлълњлФлЋ лЏлўлюлълЮлФ!",
    37: "­Ъј░ лљлЮлўлюлљлдлўл» #37 - лблљлўлЮлАлблњлЋлЮлЮлФлЋ лАлЋлюлЋлалџлў!",
    38: "­Ъј░ лљлЮлўлюлљлдлўл» #38 - лЊлалљлЮлўлблЮлФлЋ лЉлљлалФ!",
    39: "­Ъј░ лљлЮлўлюлљлдлўл» #39 - лџлЏлБлЉлЮлўлДлЮлФлЋ лњлўлелЮлў!",
    40: "­Ъј░ лљлЮлўлюлљлдлўл» #40 - лАлълЏлЮлЋлДлЮлФлЋ лЏлўлюлълЮлФ!",
    41: "­Ъј░ лљлЮлўлюлљлдлўл» #41 - лЏлЋлЊлЋлЮлћлљлалЮлФлЋ 777!",
    42: "­Ъј░ лљлЮлўлюлљлдлўл» #42 - лЪлЋлАлълДлЮлФлЋ лЉлљлалФ!",
    43: "­Ъј░ лљлЮлўлюлљлдлўл» #43 - лњлЋлАлЋлЮлЮлўлЋ лњлўлелЮлў!",
    44: "­Ъј░ лљлЮлўлюлљлдлўл» #44 - лблалълЪлўлДлЋлАлџлўлЋ лЏлўлюлълЮлФ!",
    45: "­Ъј░ лљлЮлўлюлљлдлўл» #45 - люлўлАлблўлДлЋлАлџлўлЋ лАлЋлюлЋлалџлў!",
    46: "­Ъј░ лљлЮлўлюлљлдлўл» #46 - лЉлЋлблълЮлЮлФлЋ лЉлљлалФ!",
    47: "­Ъј░ лљлЮлўлюлљлдлўл» #47 - лълАлЋлЮлЮлўлЋ лњлўлелЮлў!",
    48: "­Ъј░ лљлЮлўлюлљлдлўл» #48 - лЏлљлЎлюлълњлФлЋ лЏлўлюлълЮлФ!",
    49: "­Ъј░ лљлЮлўлюлљлдлўл» #49 - лЉлљлЌлълњлФлЋ 777!",
    50: "­Ъј░ лљлЮлўлюлљлдлўл» #50 - лћлЋлалЋлњл»лЮлЮлФлЋ лЉлљлалФ!",
    51: "­Ъј░ лљлЮлўлюлљлдлўл» #51 - лАлњлЋлќлўлЋ лњлўлелЮлў!",
    52: "­Ъј░ лљлЮлўлюлљлдлўл» #52 - лџлЏлљлАлАлўлДлЋлАлџлўлЋ лЏлўлюлълЮлФ!",
    53: "­Ъј░ лљлЮлўлюлљлдлўл» #53 - лАлблљлЮлћлљлалблЮлФлЋ лАлЋлюлЋлалџлў!",
    54: "­Ъј░ лљлЮлўлюлљлдлўл» #54 - лЪлалълАлблФлЋ лЉлљлалФ!",
    55: "­Ъј░ лљлЮлўлюлљлдлўл» #55 - лЌлЋлЏлЋлЮлФлЋ лњлўлелЮлў!",
    56: "­Ъј░ лљлЮлўлюлљлдлўл» #56 - лќлЋлЏлблФлЋ лЏлўлюлълЮлФ!",
    57: "­Ъј░ лљлЮлўлюлљлдлўл» #57 - лълЉлФлДлЮлФлЋ 777!",
    58: "­Ъј░ лљлЮлўлюлљлдлўл» #58 - лЪлалълЌлалљлДлЮлФлЋ лЉлљлалФ!",
    59: "­Ъј░ лљлЮлўлюлљлдлўл» #59 - лџлалљлАлЮлФлЋ лњлўлелЮлў!",
    60: "­Ъј░ лљлЮлўлюлљлдлўл» #60 - лАлўлЮлўлЋ лЏлўлюлълЮлФ!",
    61: "­Ъј░ лљлЮлўлюлљлдлўл» #61 - лцлўлЮлљлЏлглЮлФлЋ лАлЋлюлЋлалџлў!",
    62: "­Ъј░ лљлЮлўлюлљлдлўл» #62 - лЪлълАлЏлЋлћлЮлўлЋ лЉлљлалФ!",
    63: "­Ъј░ лљлЮлўлюлљлдлўл» #63 - лБлЏлглблўлюлљлблўлњлЮлФлЋ лњлўлелЮлў!",
    64: "­Ъј░ лљлЮлўлюлљлдлўл» #64 - лЏлЋлЊлЋлЮлћлљлалЮлФлЋ лЏлўлюлълЮлФ!"
}

# ­ЪЌЃ№ИЈ лЉлљлЌлљ лћлљлЮлЮлФлЦ лћлЏл» лўлАлАлЏлЋлћлълњлљлЮлўл»
slot_research_data = {}
user_data = defaultdict(lambda: {
    'game_balance': 1000,
    'total_games': 0,
    'total_wins': 0,
})

# ­ЪЉц лълАлЮлълњлЮлФлЋ лџлълюлљлЮлћлФ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "­Ъј░ лалЋлќлўлю лўлАлАлЏлЋлћлълњлљлЮлўл» лАлЏлълблълњ\n\n"
        "лџл░лХл┤лЙл╣ лИли 64 л░лйлИл╝л░ЛєлИл╣ л▒ЛЃл┤лхЛѓ л┐ЛђлИЛЂл▓лЙлхлй ЛЃлйлИл║л░л╗ЛїлйЛІл╣ лйлЙл╝лхЛђ!\n\n"
        "лџлЙл╝л░лйл┤ЛІ:\n"
        "/research - лЪлЙл║л░лил░ЛѓЛї л▓ЛЂлх лйл░л╣л┤лхлйлйЛІлх лилйл░ЛЄлхлйлИЛЈ\n"
        "/slot X - лўлйЛёлЙЛђл╝л░ЛєлИЛЈ лЙ л║лЙлйл║ЛђлхЛѓлйлЙл╝ ЛЂл╗лЙЛѓлх (1-64)\n"
        "/test_slots - лЮл░ЛЄл░ЛѓЛї ЛѓлхЛЂЛѓлИЛђлЙл▓л░лйлИлх\n\n"
        "лъЛѓл┐Лђл░л▓Лї ­Ъј░ ЛЄЛѓлЙл▒ЛІ лЙл┐Лђлхл┤лхл╗лИЛѓЛї лйлЙл╝лхЛђ л░лйлИл╝л░ЛєлИлИ!"
    )

async def test_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """лЌл░л┐ЛЃЛЂл║ ЛѓлхЛЂЛѓлИЛђлЙл▓л░лйлИЛЈ ЛЂл╗лЙЛѓлЙл▓"""
    user_id = update.effective_user.id
    user_data[user_id]['game_balance'] = 1000
    
    await update.message.reply_text(
        "­Ъј░ лблЋлАлблўлалълњлљлЮлўлЋ лљлџлблўлњлўлалълњлљлЮлъ\n\n"
        "лъЛѓл┐Лђл░л▓л╗ЛЈл╣ ­Ъј░ л▓ ЛЄл░Лѓ - ЛЈ л▒ЛЃл┤ЛЃ л┐лЙл║л░лиЛІл▓л░ЛѓЛї лйлЙл╝лхЛђ л║л░лХл┤лЙл╣ л░лйлИл╝л░ЛєлИлИ!\n"
        "лњЛЂлхл│лЙ ЛЂЛЃЛЅлхЛЂЛѓл▓ЛЃлхЛѓ 64 л▓лЙлил╝лЙлХлйЛІЛЁ лилйл░ЛЄлхлйлИЛЈ.\n\n"
        "лЪлЙЛЂл╗лх ЛѓлхЛЂЛѓл░ лИЛЂл┐лЙл╗ЛїлиЛЃл╣ /research л┤л╗ЛЈ л┐ЛђлЙЛЂл╝лЙЛѓЛђл░ ЛЂЛѓл░ЛѓлИЛЂЛѓлИл║лИ."
    )

async def research_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """лЪлЙл║л░лил░ЛѓЛї ЛђлхлиЛЃл╗ЛїЛѓл░ЛѓЛІ лИЛЂЛЂл╗лхл┤лЙл▓л░лйлИЛЈ"""
    if not slot_research_data:
        await update.message.reply_text("­ЪћЇ лћл░лйлйЛІЛЁ л┐лЙл║л░ лйлхЛѓ. лАЛІл│Лђл░л╣ л▓ ЛЂл╗лЙЛѓЛІ!")
        return
    
    research_text = "­Ъј░ лалЋлЌлБлЏлглблљлблФ лўлАлАлЏлЋлћлълњлљлЮлўл»\n\n"
    research_text += f"­ЪЊі лЮл░л╣л┤лхлйлЙ: {len(slot_research_data)}/64 лилйл░ЛЄлхлйлИл╣\n\n"
    
    # лЊЛђЛЃл┐л┐лИЛђЛЃлхл╝ л┐лЙ 8 лилйл░ЛЄлхлйлИл╣ л▓ ЛЂЛѓЛђлЙл║лх
    for i in range(0, 64, 8):
        line = ""
        for j in range(i+1, i+9):
            if j in slot_research_data:
                count = slot_research_data[j]['count']
                line += f"­Ъј░{j:02d}({count}) "
            else:
                line += f"РЮЊ{j:02d} "
        research_text += line + "\n"
    
    research_text += f"\n­ЪЊІ лЪлЙл╗лйЛІл╣ ЛЂл┐лИЛЂлЙл║: {sorted(slot_research_data.keys())}"
    
    await update.message.reply_text(research_text)

async def slot_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """лўлйЛёлЙЛђл╝л░ЛєлИЛЈ лЙ л║лЙлйл║ЛђлхЛѓлйлЙл╝ ЛЂл╗лЙЛѓлх"""
    if not context.args:
        await update.message.reply_text("лўЛЂл┐лЙл╗ЛїлилЙл▓л░лйлИлх: /slot <лйлЙл╝лхЛђ лЙЛѓ 1 л┤лЙ 64>")
        return
    
    try:
        slot_number = int(context.args[0])
        if slot_number < 1 or slot_number > 64:
            await update.message.reply_text("лЮлЙл╝лхЛђ ЛЂл╗лЙЛѓл░ л┤лЙл╗лХлхлй л▒ЛІЛѓЛї лЙЛѓ 1 л┤лЙ 64")
            return
            
        if slot_number in slot_research_data:
            data = slot_research_data[slot_number]
            info_text = f"­Ъј░ лўлЮлцлълалюлљлдлўл» лъ лАлЏлълблЋ #{slot_number}\n\n"
            info_text += f"­ЪЊі лњЛІл┐л░л┤л░л╗ Лђл░ли: {data['count']}\n"
            info_text += f"­ЪЉЦ лблхЛЂЛѓлхЛђлЙл▓: {len(data['users'])}\n"
            info_text += f"­ЪЊЁ лЪлхЛђл▓ЛІл╣ Лђл░ли: {data['first_seen'][:19]}\n"
            info_text += f"­Ъј» лћлИл░л┐л░лилЙлй: {get_slot_range(slot_number)}\n"
            
        else:
            info_text = f"­Ъј░ лАл╗лЙЛѓ #{slot_number} лхЛЅлх лйлх лйл░л╣л┤лхлй!\nлЪЛђлЙл┤лЙл╗лХл░л╣ ЛѓлхЛЂЛѓлИЛђлЙл▓л░ЛѓЛї ­Ъј░"
            
        await update.message.reply_text(info_text)
        
    except ValueError:
        await update.message.reply_text("лЮлЙл╝лхЛђ л┤лЙл╗лХлхлй л▒ЛІЛѓЛї ЛЄлИЛЂл╗лЙл╝ лЙЛѓ 1 л┤лЙ 64")

def get_slot_range(slot_number):
    """лъл┐Лђлхл┤лхл╗ЛЈлхл╝ л┤лИл░л┐л░лилЙлй ЛЂл╗лЙЛѓл░"""
    if slot_number <= 16:
        return "лњлФлАлълџлўлЎ (1-16)"
    elif slot_number <= 32:
        return "лАлалЋлћлЮлўлЎ (17-32)"
    elif slot_number <= 48:
        return "лЮлўлЌлџлўлЎ (33-48)"
    else:
        return "лълДлЋлЮлг лЮлўлЌлџлўлЎ (49-64)"

def generate_unique_slot_message(slot_value):
    """лЊлхлйлхЛђлИЛђЛЃлхЛѓ ЛЃлйлИл║л░л╗ЛїлйлЙлх ЛЂлЙлЙл▒ЛЅлхлйлИлх л┤л╗ЛЈ л║л░лХл┤лЙл│лЙ лилйл░ЛЄлхлйлИЛЈ ЛЂл╗лЙЛѓл░"""
    if slot_value in SLOT_MESSAGES:
        message = SLOT_MESSAGES[slot_value]
    else:
        message = f"­Ъј░ лљлЮлўлюлљлдлўл» #{slot_value} - лБлЮлўлџлљлЏлглЮлљл» лџлълюлЉлўлЮлљлдлўл»!"
    
    return f"{message}\n­Ъћб лЮлЙл╝лхЛђ лилйл░ЛЄлхлйлИЛЈ: {slot_value}/64\n­Ъј» лћлИл░л┐л░лилЙлй: {get_slot_range(slot_value)}"

# ­Ъј« лАлўлАлблЋлюлљ лўлЊла - лблЋлАлблълњлФлЎ лалЋлќлўлю
async def handle_game_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    emoji = update.message.text
    
    if emoji != "­Ъј░":
        await update.message.reply_text("­Ъј░ лњ ЛЇЛѓлЙл╝ ЛђлхлХлИл╝лх Лђл░л▒лЙЛѓл░ЛјЛѓ ЛѓлЙл╗Лїл║лЙ ЛЂл╗лЙЛѓЛІ!")
        return
    
    user_data[user_id]['total_games'] += 1
    
    context.user_data['expecting_dice'] = True
    context.user_data['last_game_type'] = 'slots'
    context.user_data['last_game_user_id'] = user_id
    
    dice_message = await context.bot.send_dice(chat_id=update.message.chat_id, emoji=emoji)
    context.user_data['last_dice_message_id'] = dice_message.message_id
    
    await update.message.reply_text(
        f"­Ъћг лблхЛЂЛѓлЙл▓ЛІл╣ л▒ЛђлЙЛЂлЙл║ #{user_data[user_id]['total_games']}\n"
        f"­Ъј» лъл┐Лђлхл┤лхл╗ЛЈЛј лйлЙл╝лхЛђ л░лйлИл╝л░ЛєлИлИ..."
    )

# ­Ъј░ лълЉлалљлЉлълблџлљ DICE - лБлЮлўлџлљлЏлглЮлФлЋ лАлълълЉлЕлЋлЮлўл» лћлЏл» лџлљлќлћлълЊлъ лЌлЮлљлДлЋлЮлўл»
async def handle_dice_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user_id = message.from_user.id
    
    if not message.dice:
        return
    
    if not context.user_data.get('expecting_dice', False):
        return
    
    if context.user_data.get('last_game_user_id') != user_id:
        return
    
    emoji = message.dice.emoji
    value = message.dice.value
    
    if emoji == "­Ъј░":
        # лАлълЦлалљлЮл»лЋлю лћлљлЮлЮлФлЋ лўлАлАлЏлЋлћлълњлљлЮлўл»
        if value not in slot_research_data:
            slot_research_data[value] = {
                'first_seen': datetime.datetime.now().isoformat(),
                'count': 0,
                'users': set()
            }
        
        slot_research_data[value]['count'] += 1
        slot_research_data[value]['users'].add(user_id)
        
        # лБлЮлўлџлљлЏлглЮлълЋ лАлълълЉлЕлЋлЮлўлЋ лћлЏл» лџлљлќлћлълЊлъ лЌлЮлљлДлЋлЮлўл»
        result_text = generate_unique_slot_message(value)
        
        # лћлълЉлљлњлЏл»лЋлю лАлблљлблўлАлблўлџлБ
        result_text += f"\n\n­ЪЊі лАЛѓл░ЛѓлИЛЂЛѓлИл║л░ ЛЇЛѓлЙл│лЙ лилйл░ЛЄлхлйлИЛЈ:"
        result_text += f"\n­Ъј░ лњЛІл┐л░л┤л░л╗лЙ Лђл░ли: {slot_research_data[value]['count']}"
        result_text += f"\n­ЪЉЦ лБлйлИл║л░л╗ЛїлйЛІЛЁ ЛѓлхЛЂЛѓлхЛђлЙл▓: {len(slot_research_data[value]['users'])}"
        result_text += f"\n­ЪЊѕ лњЛЂлхл│лЙ лйл░л╣л┤лхлйлЙ: {len(slot_research_data)}/64"
        
        # лАлАлФлЏлџлљ лЮлљ лџлълюлљлЮлћлБ лћлЏл» лЪлалълАлюлълблалљ
        result_text += f"\n\n­ЪњА лЪлЙл┤ЛђлЙл▒лйлхлх: /slot {value}"
        
        await message.reply_text(result_text)
    
    context.user_data.pop('expecting_dice', None)
    context.user_data.pop('last_game_type', None)
    context.user_data.pop('last_dice_message_id', None)
    context.user_data.pop('last_game_user_id', None)

# ­Ъћё лълЉлалљлЉлълблДлўлџлў лџлЮлълЪлълџ
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    callback_data = query.data
    
    if callback_data == 'test_slots':
        user_id = query.from_user.id
        user_data[user_id]['game_balance'] = 1000
        
        await query.edit_message_text(
            "­Ъј░ лалЋлќлўлю лблЋлАлблўлалълњлљлЮлўл» лљлџлблўлњлўлалълњлљлЮ\n\n"
            "лъЛѓл┐Лђл░л▓л╗ЛЈл╣ ­Ъј░ л▓ ЛЄл░Лѓ - ЛЈ л┐лЙл║л░лХЛЃ лйлЙл╝лхЛђ л║л░лХл┤лЙл╣ л░лйлИл╝л░ЛєлИлИ!\n"
            "лњЛЂлхл│лЙ 64 л▓лЙлил╝лЙлХлйЛІЛЁ лилйл░ЛЄлхлйлИЛЈ."
        )

# ­Ъїљ FLASK лћлЏл» RAILWAY
app = Flask(__name__)

@app.route('/')
def home():
    return "­Ъј░ Slot Research Bot - лъл┐Лђлхл┤лхл╗ЛЈлхл╝ лйлЙл╝лхЛђл░ л░лйлИл╝л░ЛєлИл╣!"

@app.route('/research')
def research_web():
    """лњлхл▒-ЛЂЛѓЛђл░лйлИЛєл░ ЛЂ лИЛЂЛЂл╗лхл┤лЙл▓л░лйлИлхл╝"""
    if not slot_research_data:
        return "<h1>­Ъј░ лўЛЂЛЂл╗лхл┤лЙл▓л░лйлИлх ЛЂл╗лЙЛѓлЙл▓</h1><p>лћл░лйлйЛІЛЁ л┐лЙл║л░ лйлхЛѓ</p>"
    
    html = "<h1>­Ъј░ лўЛЂЛЂл╗лхл┤лЙл▓л░лйлИлх ЛЂл╗лЙЛѓлЙл▓</h1>"
    html += f"<p>лЮл░л╣л┤лхлйлЙ лилйл░ЛЄлхлйлИл╣: {len(slot_research_data)}/64</p>"
    html += "<table border='1'><tr><th>лЌлйл░ЛЄлхлйлИлх</th><th>лАлЙлЙл▒ЛЅлхлйлИлх</th><th>лџлЙл╗лИЛЄлхЛЂЛѓл▓лЙ</th><th>лблхЛЂЛѓлхЛђлЙл▓</th></tr>"
    
    for value in sorted(slot_research_data.keys()):
        data = slot_research_data[value]
        message = SLOT_MESSAGES.get(value, "лБлЮлўлџлљлЏлглЮлљл» лџлълюлЉлўлЮлљлдлўл»")
        html += f"<tr><td>{value}</td><td>{message}</td><td>{data['count']}</td><td>{len(data['users'])}</td></tr>"
    
    html += "</table>"
    return html

# ­Ъџђ лЌлљлЪлБлАлџ лЉлълблљ
def main():
    port = int(os.environ.get("PORT", 5000))
    
    def run_flask():
        app.run(host='0.0.0.0', port=port)
    
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # лџлълюлљлЮлћлФ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test_slots", test_slots))
    application.add_handler(CommandHandler("research", research_command))
    application.add_handler(CommandHandler("slot", slot_info_command))
    
    # CALLBACK'лў
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # лАлълълЉлЕлЋлЮлўл»
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(­Ъј░)$"), handle_game_message))
    application.add_handler(MessageHandler(filters.Dice.ALL, handle_dice_result))
    
    print("­Ъј░ Slot Research Bot лил░л┐ЛЃЛЅлхлй!")
    print("­Ъћг лџл░лХл┤лЙл╣ л░лйлИл╝л░ЛєлИлИ л▒ЛЃл┤лхЛѓ л┐ЛђлИЛЂл▓лЙлхлй ЛЃлйлИл║л░л╗ЛїлйЛІл╣ лйлЙл╝лхЛђ!")
    application.run_polling()

if __name__ == '__main__':
    main()
