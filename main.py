import os
import json
import random
import datetime
import asyncio
import psutil
from collections import defaultdict
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, PreCheckoutQueryHandler, ConversationHandler

# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8378526693:AAFOwAb6pVp1GOE0tXZN4PDLFnD_TTT1djg")
PROVIDER_TOKEN = os.environ.get("PROVIDER_TOKEN", "TEST_PROVIDER_TOKEN")
ADMIN_CODE = os.environ.get("ADMIN_CODE", "1337")

# üéØ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ò –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –°–¢–ê–í–ö–ê
MIN_BET = 1
MAX_BET = 100000

# üí∞ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–ê–°–¢–û–ú–ù–û–ì–û –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
CUSTOM_DEPOSIT_CONFIG = {
    "min_amount": 5,      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
    "max_amount": 5000,   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞  
    "step": 1            # –®–∞–≥ —Å—É–º–º—ã
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
WAITING_CUSTOM_AMOUNT, CONFIRM_CUSTOM_AMOUNT = range(2)

# ‚è±Ô∏è –í–†–ï–ú–Ø –ê–ù–ò–ú–ê–¶–ò–ò –î–õ–Ø –ö–ê–ñ–î–û–ô –ò–ì–†–´ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
DICE_DELAYS = {
    "üé∞": 1.2,  # –°–ª–æ—Ç—ã - —Å–∞–º–∞—è –¥–æ–ª–≥–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
    "üéØ": 2.2,  # –î–∞—Ä—Ç—Å
    "üé≤": 2.2,  # –ö—É–±–∏–∫
    "üé≥": 3.3,  # –ë–æ—É–ª–∏–Ω–≥
    "‚öΩ": 3.3,  # –§—É—Ç–±–æ–ª
    "üèÄ": 3.3   # –ë–∞—Å–∫–µ—Ç–±–æ–ª
}

# üí∞ –ü–ê–ö–ï–¢–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø (1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 –∏–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞)
PRODUCTS = {
    "pack_5": {"title": "5 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 5 ‚≠ê", "price": 5, "currency": "XTR", "credits": 5},
    "pack_10": {"title": "10 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 10 ‚≠ê", "price": 10, "currency": "XTR", "credits": 10},
    "pack_25": {"title": "25 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 25 ‚≠ê", "price": 25, "currency": "XTR", "credits": 25},
    "pack_50": {"title": "50 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 50 ‚≠ê", "price": 50, "currency": "XTR", "credits": 50},
    "pack_100": {"title": "100 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 100 ‚≠ê", "price": 100, "currency": "XTR", "credits": 100},
    "pack_250": {"title": "250 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 250 ‚≠ê", "price": 250, "currency": "XTR", "credits": 250},
    "pack_500": {"title": "500 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 500 ‚≠ê", "price": 500, "currency": "XTR", "credits": 500},
    "pack_1000": {"title": "1000 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 1000 ‚≠ê", "price": 1000, "currency": "XTR", "credits": 1000}
}

# üéÅ –í–´–í–û–î –°–†–ï–î–°–¢–í - –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–£–ú–ú–ê –ò –í–ê–†–ò–ê–ù–¢–´
MIN_WITHDRAWAL = 15
WITHDRAWAL_AMOUNTS = [15, 25, 50, 100]

# üéÆ –ë–ê–ó–û–í–´–ï –í–´–ò–ì–†–´–®–ò –î–õ–Ø –°–¢–ê–í–ö–ò 1 ‚≠ê
BASE_PRIZES = {
    "üé∞": {
        "–¢–†–ò –ë–ê–†–ê": 5,
        "–¢–†–ò –í–ò–®–ù–ò": 10, 
        "–¢–†–ò –õ–ò–ú–û–ù–´": 15,
        "–î–ñ–ï–ö–ü–û–¢ 777": 20
    },
    "üéØ": {"–ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨": 3},
    "üé≤": {"–í–´–ü–ê–õ–û 6": 3},
    "üé≥": {"–°–¢–†–ê–ô–ö": 3},
    "‚öΩ": {
        "–°–õ–ê–ë–´–ô –£–î–ê–†": 0.0,
        "–£–î–ê–† –ú–ò–ú–û": 0.0,
        "–ë–õ–ò–ó–ö–ò–ô –£–î–ê–†": 0.33,
        "–•–û–†–û–®–ò–ô –ì–û–õ": 1.66,
        "–°–£–ü–ï–†–ì–û–õ": 1.66
    },
    "üèÄ": {
        "–ü–†–û–ú–ê–•": 0.0,
        "–ö–ê–°–ê–¢–ï–õ–¨–ù–û": 0.0,
        "–û–¢–°–ö–û–ö": 0.0,
        "–¢–†–ï–•–û–ß–ö–û–í–´–ô": 2.0,
        "–°–õ–≠–ú-–î–ê–ù–ö": 2.0
    }
}

# üé∞ –°–ò–°–¢–ï–ú–ê –°–ï–†–ò–ô –ü–û–ë–ï–î (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø)
WIN_STREAK_BONUSES = {
    2: {"multiplier": 1.1, "message": "üî• –°–µ—Ä–∏—è –∏–∑ 2 –ø–æ–±–µ–¥! –ë–æ–Ω—É—Å +10% –∫ –≤—ã–∏–≥—Ä—ã—à—É!"},
    3: {"multiplier": 1.25, "message": "üî•üî• –°–µ—Ä–∏—è –∏–∑ 3 –ø–æ–±–µ–¥! –ë–æ–Ω—É—Å +25% –∫ –≤—ã–∏–≥—Ä—ã—à—É!"},
    4: {"multiplier": 1.45, "message": "üî•üî•üî• –°–µ—Ä–∏—è –∏–∑ 4 –ø–æ–±–µ–¥! –ë–æ–Ω—É—Å +45% –∫ –≤—ã–∏–≥—Ä—ã—à—É!"},
    5: {"multiplier": 1.6, "message": "üî•üî•üî•üî• –°–µ—Ä–∏—è –∏–∑ 5 –ø–æ–±–µ–¥! –ë–æ–Ω—É—Å +60% –∫ –≤—ã–∏–≥—Ä—ã—à—É!"},
    6: {"multiplier": 1.85, "message": "üî•üî•üî•üî•üî• –°–ï–†–ò–Ø –ò–ó 6 –ü–û–ë–ï–î! –ú–ï–ì–ê –ë–û–ù–£–° +85% –∫ –≤—ã–∏–≥—Ä—ã—à—É!"}
}

# üéÅ –°–ò–°–¢–ï–ú–ê –°–õ–£–ß–ê–ô–ù–´–• –ú–ï–ì–ê-–í–´–ò–ì–†–´–®–ï–ô (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø)
MEGA_WIN_CONFIG = {
    "chance": 0.006,  # 0.6% —à–∞–Ω—Å –Ω–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à
    "min_multiplier": 1.5,    # –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç 1.5x
    "max_multiplier": 5       # –¥–æ 5x
}

# üîÑ –°–ò–°–¢–ï–ú–ê –í–û–ó–í–†–ê–¢–û–í –ü–†–ò –ü–†–û–ò–ì–†–´–®–ï (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø)
REFUND_CONFIG = {
    "min_refund": 0.02,       # 2% –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
    "max_refund": 0.1         # 10% –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
}

# üéÅ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–ï–î–ï–õ–¨–ù–´–• –ù–ê–ì–†–ê–î
WEEKLY_BONUS_CONFIG = {
    "min_daily_games": 5,           # –º–∏–Ω–∏–º—É–º 5 –∏–≥—Ä –≤ –¥–µ–Ω—å
    "required_days": 7,             # 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    "base_percent": 0.01,           # 1% –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    "bonus_per_extra_game": 0.0005, # +0.05% –∑–∞ –∫–∞–∂–¥—É—é –∏–≥—Ä—É —Å–≤–µ—Ä—Ö –º–∏–Ω–∏–º—É–º–∞
    "max_extra_bonus": 0.02         # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø. –Ω–∞–≥—Ä–∞–¥–∞ +2%
}

# üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
REFERRAL_CONFIG = {
    "reward_percent": 0.10,  # 10% –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
    "min_referee_games": 3,  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
    "min_referee_deposit": 10  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
}

# üéüÔ∏è –°–ò–°–¢–ï–ú–ê –ü–†–û–ú–û–ö–û–î–û–í
PROMO_CONFIG = {
    "max_active_promos": 50,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    "default_uses": 100,      # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    "min_amount": 5,          # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    "max_amount": 1000        # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
}

# üéÆ –ü–û–õ–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ì–† (–° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú–ò –í–û–ó–í–†–ê–¢–ê–ú–ò –î–õ–Ø –í–°–ï–• –ò–ì–†)
GAMES_CONFIG = {
    "üé∞": {
        "values": {
            # –û–ë–´–ß–ù–´–ï –°–õ–û–¢–´ - 64 –∑–Ω–∞—á–µ–Ω–∏—è, 4 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö
            1: {"win": True, "base_prize": BASE_PRIZES["üé∞"]["–¢–†–ò –ë–ê–†–ê"], "message": "üé∞ –¢–†–ò –ë–ê–†–ê! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #2 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #3 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #4 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            5: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #5 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            6: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #6 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            7: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #7 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            8: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #8 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            9: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #9 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            10: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #10 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            11: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #11 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            12: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #12 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            13: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #13 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            14: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #14 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            15: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #15 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            16: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #16 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            17: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #17 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            18: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #18 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            19: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #19 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            20: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #20 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            21: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #21 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            22: {"win": True, "base_prize": BASE_PRIZES["üé∞"]["–¢–†–ò –í–ò–®–ù–ò"], "message": "üé∞ –¢–†–ò –í–ò–®–ù–ò! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            23: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #23 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            24: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #24 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            25: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #25 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            26: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #26 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            27: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #27 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            28: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #28 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            29: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #29 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            30: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #30 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            31: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #31 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            32: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #32 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            33: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #33 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            34: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #34 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            35: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #35 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            36: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #36 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            37: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #37 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            38: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #38 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            39: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #39 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            40: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #40 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            41: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #41 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            42: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #42 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            43: {"win": True, "base_prize": BASE_PRIZES["üé∞"]["–¢–†–ò –õ–ò–ú–û–ù–´"], "message": "üé∞ –¢–†–ò –õ–ò–ú–û–ù–ê! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            44: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #44 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            45: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #45 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            46: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #46 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            47: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #47 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            48: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #48 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            49: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #49 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            50: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #50 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            51: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #51 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            52: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #52 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            53: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #53 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            54: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #54 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            55: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #55 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            56: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #56 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            57: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #57 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            58: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #58 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            59: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #59 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            60: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #60 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            61: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #61 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            62: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #62 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            63: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #63 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            64: {"win": True, "base_prize": BASE_PRIZES["üé∞"]["–î–ñ–ï–ö–ü–û–¢ 777"], "message": "üé∞ –î–ñ–ï–ö–ü–û–¢ 777! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"}
        }
    },
    "üéØ": {
        "values": {
            # –î–ê–†–¢–° - 6 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (6)
            1: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            5: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            6: {"win": True, "base_prize": BASE_PRIZES["üéØ"]["–ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨"], "message": "üéØ - –ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"}
        }
    },
    "üé≤": {
        "values": {
            # –ö–û–°–¢–ò - 6 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (6)
            1: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            5: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            6: {"win": True, "base_prize": BASE_PRIZES["üé≤"]["–í–´–ü–ê–õ–û 6"], "message": "üé≤ - –í–´–ü–ê–õ–û 6! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"}
        }
    },
    "üé≥": {
        "values": {
            # –ë–û–£–õ–ò–ù–ì - 6 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (6)
            1: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            5: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            6: {"win": True, "base_prize": BASE_PRIZES["üé≥"]["–°–¢–†–ê–ô–ö"], "message": "üé≥ - –°–¢–†–ê–ô–ö! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"}
        }
    },
    "‚öΩ": {
        "values": {
            # –§–£–¢–ë–û–õ - 5 –∑–Ω–∞—á–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ 3 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö (–≥–æ–ª—ã)
            1: {"win": False, "base_prize": BASE_PRIZES["‚öΩ"]["–°–õ–ê–ë–´–ô –£–î–ê–†"], "message": "‚öΩ –°–ª–∞–±—ã–π —É–¥–∞—Ä... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": BASE_PRIZES["‚öΩ"]["–£–î–ê–† –ú–ò–ú–û"], "message": "‚öΩ –£–¥–∞—Ä –º–∏–º–æ –≤–æ—Ä–æ—Ç... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": True, "base_prize": BASE_PRIZES["‚öΩ"]["–ë–õ–ò–ó–ö–ò–ô –£–î–ê–†"], "message": "‚öΩ –ë–ª–∏–∑–∫–æ –∫ –≤–æ—Ä–æ—Ç–∞–º! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            4: {"win": True, "base_prize": BASE_PRIZES["‚öΩ"]["–•–û–†–û–®–ò–ô –ì–û–õ"], "message": "‚öΩ –ì–û–û–û–õ! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            5: {"win": True, "base_prize": BASE_PRIZES["‚öΩ"]["–°–£–ü–ï–†–ì–û–õ"], "message": "‚öΩ –°–£–ü–ï–†–ì–û–û–û–õ! –ú–ï–ì–ê –í–´–ò–ì–†–´–®: {prize} ‚≠ê"}
        }
    },
    "üèÄ": {
        "values": {
            # –ë–ê–°–ö–ï–¢–ë–û–õ - 5 –∑–Ω–∞—á–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ 2 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö (–±—Ä–æ—Å–∫–∏)
            1: {"win": False, "base_prize": BASE_PRIZES["üèÄ"]["–ü–†–û–ú–ê–•"], "message": "üèÄ –ü—Ä–æ–º–∞—Ö... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": BASE_PRIZES["üèÄ"]["–ö–ê–°–ê–¢–ï–õ–¨–ù–û"], "message": "üèÄ –ö–æ—Å–Ω—É–ª–æ—Å—å –∫–æ–ª—å—Ü–∞... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": BASE_PRIZES["üèÄ"]["–û–¢–°–ö–û–ö"], "message": "üèÄ –û—Ç—Å–∫–æ–∫... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": True, "base_prize": BASE_PRIZES["üèÄ"]["–¢–†–ï–•–û–ß–ö–û–í–´–ô"], "message": "üèÄ –¢—Ä–µ—Ö–æ—á–∫–æ–≤—ã–π! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            5: {"win": True, "base_prize": BASE_PRIZES["üèÄ"]["–°–õ–≠–ú-–î–ê–ù–ö"], "message": "üèÄ –°–õ–≠–ú-–î–ê–ù–ö! –ú–ï–ì–ê –í–´–ò–ì–†–´–®: {prize} ‚≠ê"}
        }
    }
}

# üé∞ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –°–õ–û–¢–û–í 777 (–¢–û–õ–¨–ö–û –î–ñ–ï–ö–ü–û–¢) - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
SLOTS_777_CONFIG = {
    "üé∞": {
        "values": {
            # –°–õ–û–¢–´ 777 - 64 –∑–Ω–∞—á–µ–Ω–∏—è, –¢–û–õ–¨–ö–û 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (64) —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –ø—Ä–∏–∑–æ–º
            1: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #2 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #3 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #4 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            5: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #5 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            6: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #6 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            7: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #7 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            8: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #8 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            9: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #9 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            10: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #10 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            11: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #11 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            12: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #12 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            13: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #13 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            14: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #14 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            15: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #15 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            16: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #16 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            17: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #17 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            18: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #18 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            19: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #19 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            20: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #20 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            21: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #21 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            22: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #22 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            23: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #23 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            24: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #24 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            25: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #25 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            26: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #26 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            27: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #27 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            28: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #28 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            29: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #29 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            30: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #30 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            31: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #31 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            32: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #32 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            33: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #33 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            34: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #34 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            35: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #35 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            36: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #36 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            37: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #37 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            38: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #38 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            39: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #39 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            40: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #40 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            41: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #41 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            42: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #42 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            43: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #43 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            44: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #44 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            45: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #45 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            46: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #46 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            47: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #47 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            48: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #48 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            49: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #49 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            50: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #50 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            51: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #51 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            52: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #52 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            53: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #53 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            54: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #54 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            55: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #55 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            56: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #56 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            57: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #57 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            58: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #58 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            59: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #59 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            60: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #60 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            61: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #61 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            62: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #62 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            63: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #63 - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            64: {"win": True, "base_prize": 50, "message": "üé∞ –î–ñ–ï–ö–ü–û–¢ 777! –ú–ï–ì–ê –í–´–ò–ì–†–´–®: {prize} ‚≠ê"}  # 50x —Å—Ç–∞–≤–∫–∏
        }
    }
}

# üóÉÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•
user_data = defaultdict(lambda: {
    'game_balance': 0.0,
    'total_games': 0,
    'total_wins': 0,
    'total_deposited': 0,
    'real_money_spent': 0,
    'current_bet': 5,
    'registration_date': datetime.datetime.now().isoformat(),
    'last_activity': datetime.datetime.now().isoformat(),
    'slots_mode': 'normal',
    'win_streak': 0,
    'max_win_streak': 0,
    'mega_wins_count': 0,
    'total_mega_win_amount': 0.0,
    'referral_code': None,
    'referral_by': None,
    'referrals_count': 0,
    'referral_earnings': 0.0,
    'used_promo_codes': [],
    'muted_until': None,
    'warnings': [],
    'vip_until': None
})

# üÜï –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò –° –ù–ï–î–ï–õ–¨–ù–´–ú–ò –ù–ê–ì–†–ê–î–ê–ú–ò
user_activity = defaultdict(lambda: {
    'weekly_streak_days': 0,
    'weekly_total_bets': 0,
    'weekly_total_games': 0,
    'last_weekly_bonus_date': None,
    'daily_games_count': 0,
    'last_activity_date': None,
    'current_week_start': None
})

# üÜï –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ö–û–î–´
referral_codes = {}

# üÜï –ü–†–û–ú–û–ö–û–î–´
promo_codes = {}

# üÜï –°–ò–°–¢–ï–ú–ê –ë–ê–ù–û–í
banned_users = {}

# üÜï –°–ò–°–¢–ï–ú–ê –ú–£–¢–û–í
muted_users = {}

# üÜï –°–ò–°–¢–ï–ú–ê –í–ê–†–ù–û–í
user_warnings = defaultdict(list)

# üÜï –°–ò–°–¢–ï–ú–ê VIP
vip_users = {}

# üÜï –õ–û–ì–ò –î–ï–ô–°–¢–í–ò–ô
admin_logs = []

admin_mode = defaultdict(bool)
user_sessions = defaultdict(dict)
withdrawal_requests = defaultdict(list)

# üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•
def save_data():
    try:
        data = {
            'user_data': dict(user_data),
            'user_activity': dict(user_activity),
            'admin_mode': dict(admin_mode),
            'withdrawal_requests': dict(withdrawal_requests),
            'referral_codes': referral_codes,
            'promo_codes': promo_codes,
            'banned_users': banned_users,
            'muted_users': muted_users,
            'user_warnings': dict(user_warnings),
            'vip_users': vip_users,
            'admin_logs': admin_logs
        }
        with open('data.json', 'w') as f:
            json.dump(data, f, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def load_data():
    try:
        with open('data.json', 'r') as f:
            data = json.load(f)
            user_data.update(data.get('user_data', {}))
            user_activity.update(data.get('user_activity', {}))
            admin_mode.update(data.get('admin_mode', {}))
            withdrawal_requests.update(data.get('withdrawal_requests', {}))
            referral_codes.update(data.get('referral_codes', {}))
            promo_codes.update(data.get('promo_codes', {}))
            banned_users.update(data.get('banned_users', {}))
            muted_users.update(data.get('muted_users', {}))
            user_warnings.update(data.get('user_warnings', {}))
            vip_users.update(data.get('vip_users', {}))
            admin_logs.extend(data.get('admin_logs', []))
        
        migrate_user_data()
        migrate_activity_data()
        
    except FileNotFoundError:
        pass

# üÜï –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –î–õ–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
def migrate_user_data():
    for user_id, data in user_data.items():
        if 'win_streak' not in data:
            data['win_streak'] = 0
        if 'max_win_streak' not in data:
            data['max_win_streak'] = 0
        if 'mega_wins_count' not in data:
            data['mega_wins_count'] = 0
        if 'total_mega_win_amount' not in data:
            data['total_mega_win_amount'] = 0.0
        if 'slots_mode' not in data:
            data['slots_mode'] = 'normal'
        if 'referral_code' not in data:
            data['referral_code'] = None
        if 'referral_by' not in data:
            data['referral_by'] = None
        if 'referrals_count' not in data:
            data['referrals_count'] = 0
        if 'referral_earnings' not in data:
            data['referral_earnings'] = 0.0
        if 'used_promo_codes' not in data:
            data['used_promo_codes'] = []
        if 'muted_until' not in data:
            data['muted_until'] = None
        if 'warnings' not in data:
            data['warnings'] = []
        if 'vip_until' not in data:
            data['vip_until'] = None

def migrate_activity_data():
    for user_id, activity in user_activity.items():
        if 'weekly_streak_days' not in activity:
            activity.update({
                'weekly_streak_days': 0,
                'weekly_total_bets': 0,
                'weekly_total_games': 0,
                'last_weekly_bonus_date': None,
                'daily_games_count': 0,
                'last_activity_date': None,
                'current_week_start': None
            })

# üÜï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô –ê–î–ú–ò–ù–ê
def log_admin_action(admin_id: int, action: str, target_id: int = None, details: str = ""):
    log_entry = {
        'admin_id': admin_id,
        'action': action,
        'target_id': target_id,
        'details': details,
        'timestamp': datetime.datetime.now().isoformat()
    }
    admin_logs.append(log_entry)
    save_data()

# üÜï –ü–†–û–í–ï–†–ö–ê –ú–£–¢–ê
async def check_mute(user_id: int) -> tuple:
    if user_id in muted_users:
        mute_data = muted_users[user_id]
        mute_until = datetime.datetime.fromisoformat(mute_data['muted_until'])
        if datetime.datetime.now() < mute_until:
            time_left = mute_until - datetime.datetime.now()
            return True, f"–î–æ —Ä–∞–∑–º—É—Ç–∞: {str(time_left).split('.')[0]}"
        else:
            del muted_users[user_id]
            save_data()
    return False, ""

# üÜï –í–´–î–ê–ß–ê –ú–£–¢–ê
async def mute_user(user_id: int, admin_id: int, minutes: int, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    mute_until = datetime.datetime.now() + datetime.timedelta(minutes=minutes)
    muted_users[user_id] = {
        'muted_until': mute_until.isoformat(),
        'reason': reason,
        'muted_by': admin_id,
        'muted_at': datetime.datetime.now().isoformat()
    }
    save_data()
    log_admin_action(admin_id, "mute", user_id, f"{minutes} –º–∏–Ω—É—Ç, –ø—Ä–∏—á–∏–Ω–∞: {reason}")

# üÜï –°–ù–Ø–¢–ò–ï –ú–£–¢–ê
async def unmute_user(user_id: int, admin_id: int):
    if user_id in muted_users:
        del muted_users[user_id]
        save_data()
        log_admin_action(admin_id, "unmute", user_id)
        return True
    return False

# üÜï –í–´–î–ê–ß–ê –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø
async def warn_user(user_id: int, admin_id: int, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    warning = {
        'reason': reason,
        'warned_by': admin_id,
        'warned_at': datetime.datetime.now().isoformat()
    }
    user_warnings[user_id].append(warning)
    user_data[user_id]['warnings'].append(warning)
    save_data()
    log_admin_action(admin_id, "warn", user_id, f"–ø—Ä–∏—á–∏–Ω–∞: {reason}")

# üÜï –°–ù–Ø–¢–ò–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø
async def unwarn_user(user_id: int, admin_id: int, warning_index: int = -1):
    if user_id in user_warnings and user_warnings[user_id]:
        if warning_index == -1:  # –°–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ
            removed_warning = user_warnings[user_id].pop()
            user_data[user_id]['warnings'] = user_warnings[user_id]
        else:  # –°–Ω—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            if 0 <= warning_index < len(user_warnings[user_id]):
                removed_warning = user_warnings[user_id].pop(warning_index)
                user_data[user_id]['warnings'] = user_warnings[user_id]
            else:
                return False
        save_data()
        log_admin_action(admin_id, "unwarn", user_id, f"–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {removed_warning['reason']}")
        return True
    return False

# üÜï –í–´–î–ê–ß–ê VIP –°–¢–ê–¢–£–°–ê
async def give_vip(user_id: int, admin_id: int, days: int):
    vip_until = datetime.datetime.now() + datetime.timedelta(days=days)
    vip_users[user_id] = {
        'vip_until': vip_until.isoformat(),
        'given_by': admin_id,
        'given_at': datetime.datetime.now().isoformat()
    }
    user_data[user_id]['vip_until'] = vip_until.isoformat()
    save_data()
    log_admin_action(admin_id, "give_vip", user_id, f"{days} –¥–Ω–µ–π")

# üÜï –°–ù–Ø–¢–ò–ï VIP –°–¢–ê–¢–£–°–ê
async def remove_vip(user_id: int, admin_id: int):
    if user_id in vip_users:
        del vip_users[user_id]
        user_data[user_id]['vip_until'] = None
        save_data()
        log_admin_action(admin_id, "remove_vip", user_id)
        return True
    return False

# üÜï –ü–†–û–í–ï–†–ö–ê VIP –°–¢–ê–¢–£–°–ê
async def check_vip(user_id: int) -> tuple:
    if user_id in vip_users:
        vip_data = vip_users[user_id]
        vip_until = datetime.datetime.fromisoformat(vip_data['vip_until'])
        if datetime.datetime.now() < vip_until:
            time_left = vip_until - datetime.datetime.now()
            return True, f"VIP –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å: {str(time_left).split('.')[0]}"
        else:
            await remove_vip(user_id, vip_data['given_by'])
    return False, ""

# üé∞ –°–ò–°–¢–ï–ú–ê –°–ï–†–ò–ô –ü–û–ë–ï–î, –ú–ï–ì–ê-–í–´–ò–ì–†–´–®–ï–ô –ò –í–û–ó–í–†–ê–¢–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
def calculate_win_bonuses(user_id: int, base_prize: float, bet: int, emoji: str, is_win: bool) -> tuple:
    user = user_data[user_id]
    bonus_messages = []
    
    base_win_amount = base_prize * bet
    
    # üîÑ –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–´–ô –í–û–ó–í–†–ê–¢ 2-10% –ü–†–ò –ü–†–û–ò–ì–†–´–®–ï –î–õ–Ø –í–°–ï–• –ò–ì–†
    if not is_win and base_prize == 0:
        refund_percent = random.uniform(REFUND_CONFIG["min_refund"], REFUND_CONFIG["max_refund"])
        refund_amount = round(bet * refund_percent, 1)
        
        base_win_amount = refund_amount
        bonus_messages.append(f"üîÑ –í–æ–∑–≤—Ä–∞—Ç {refund_percent*100:.1f}% –æ—Ç —Å—Ç–∞–≤–∫–∏: {refund_amount} ‚≠ê")
    
    # üî• –°–ò–°–¢–ï–ú–ê –°–ï–†–ò–ô –ü–û–ë–ï–î (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø)
    if is_win and base_prize > 0:
        user['win_streak'] += 1
        user['max_win_streak'] = max(user['max_win_streak'], user['win_streak'])
        
        for streak, bonus in WIN_STREAK_BONUSES.items():
            if user['win_streak'] == streak:
                streak_multiplier = bonus["multiplier"]
                base_win_amount *= streak_multiplier
                bonus_messages.append(bonus["message"])
                break
    else:
        if user['win_streak'] > 0:
            bonus_messages.append(f"üíî –°–µ—Ä–∏—è –ø–æ–±–µ–¥ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –Ω–∞ {user['win_streak']}!")
        user['win_streak'] = 0
    
    # üéâ –°–ò–°–¢–ï–ú–ê –°–õ–£–ß–ê–ô–ù–´–• –ú–ï–ì–ê-–í–´–ò–ì–†–´–®–ï–ô
    if is_win and base_prize > 0 and random.random() < MEGA_WIN_CONFIG["chance"]:
        mega_multiplier = random.uniform(MEGA_WIN_CONFIG["min_multiplier"], MEGA_WIN_CONFIG["max_multiplier"])
        base_win_amount *= mega_multiplier
        user['mega_wins_count'] += 1
        user['total_mega_win_amount'] += base_win_amount - (base_prize * bet)
        
        bonus_messages.append(f"üéâ –ú–ï–ì–ê-–í–´–ò–ì–†–´–®! x{mega_multiplier:.1f} –∫ –≤—ã–∏–≥—Ä—ã—à—É!")
    
    final_prize = round(base_win_amount, 1)
    
    return final_prize, bonus_messages

# üÜï –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
def generate_referral_code(user_id: int) -> str:
    code = f"REF{user_id % 10000:04d}"
    while code in referral_codes:
        code = f"REF{random.randint(1000, 9999)}"
    return code

async def process_referral_reward(user_id: int, bet_amount: float, win_amount: float):
    try:
        user = user_data[user_id]
        
        if user['referral_by']:
            referrer_id = user['referral_by']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            if referrer_id not in user_data:
                return 0, None
            
            if (user_data[user_id]['total_games'] >= REFERRAL_CONFIG["min_referee_games"] and
                user_data[user_id]['total_deposited'] >= REFERRAL_CONFIG["min_referee_deposit"]):
                
                loss_amount = max(0, bet_amount - win_amount)
                
                if loss_amount > 0:
                    referral_reward = round(loss_amount * REFERRAL_CONFIG["reward_percent"], 1)
                    user_data[referrer_id]['game_balance'] += referral_reward
                    user_data[referrer_id]['referral_earnings'] += referral_reward
                    
                    save_data()
                    
                    return referral_reward, referrer_id
        
        return 0, None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_referral_reward: {e}")
        return 0, None

# üÜï –°–ò–°–¢–ï–ú–ê –ü–†–û–ú–û–ö–û–î–û–í
def generate_promo_code() -> str:
    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    while True:
        code = ''.join(random.choices(chars, k=8))
        if code not in promo_codes:
            return code

def create_promo_code(amount: int, uses: int, created_by: int) -> str:
    code = generate_promo_code()
    promo_codes[code] = {
        'amount': amount,
        'uses_left': uses,
        'created_by': created_by,
        'created_at': datetime.datetime.now().isoformat(),
        'used_by': []
    }
    save_data()
    return code

def use_promo_code(user_id: int, code: str) -> tuple:
    code = code.upper()
    
    if code not in promo_codes:
        return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    promo = promo_codes[code]
    
    if promo['uses_left'] <= 0:
        return False, "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
    
    if user_id in promo['used_by']:
        return False, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"
    
    user_data[user_id]['game_balance'] += promo['amount']
    user_data[user_id]['used_promo_codes'].append(code)
    promo['uses_left'] -= 1
    promo['used_by'].append(user_id)
    
    save_data()
    return True, f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo['amount']} ‚≠ê"

# üÜï –°–ò–°–¢–ï–ú–ê –ë–ê–ù–û–í
async def check_ban(user_id: int) -> tuple:
    if user_id in banned_users:
        return True, banned_users[user_id].get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    return False, ""

async def ban_user(user_id: int, admin_id: int, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    banned_users[user_id] = {
        'reason': reason,
        'banned_by': admin_id,
        'banned_at': datetime.datetime.now().isoformat()
    }
    save_data()
    log_admin_action(admin_id, "ban", user_id, f"–ø—Ä–∏—á–∏–Ω–∞: {reason}")

async def unban_user(user_id: int, admin_id: int):
    if user_id in banned_users:
        del banned_users[user_id]
        save_data()
        log_admin_action(admin_id, "unban", user_id)
        return True
    return False

# üë§ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await update.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    is_muted, mute_time = await check_mute(user_id)
    if is_muted:
        await update.message.reply_text(
            f"üîá –í—ã –≤ –º—É—Ç–µ.\n"
            f"‚è∞ {mute_time}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º—É—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        )
        return
    
    referral_code = None
    if context.args and len(context.args) > 0:
        referral_code = context.args[0]
    
    if (referral_code and 
        referral_code in referral_codes and 
        user_data[user_id]['referral_by'] is None and
        referral_codes[referral_code] != user_id):
        
        referrer_id = referral_codes[referral_code]
        user_data[user_id]['referral_by'] = referrer_id
        user_data[referrer_id]['referrals_count'] += 1
        save_data()
    
    if user_data[user_id]['referral_code'] is None:
        user_data[user_id]['referral_code'] = generate_referral_code(user_id)
        referral_codes[user_data[user_id]['referral_code']] = user_id
        save_data()

    welcome_text = """
üé∞ NSource Casino

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!

üéÅ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –°–ò–°–¢–ï–ú–´:
‚Ä¢ üî• –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥ - –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã +10%/+25%/+45%/+60%/+85% –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥
‚Ä¢ üéâ –°–ª—É—á–∞–π–Ω—ã–µ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∏ - —à–∞–Ω—Å 0.6% —É–≤–µ–ª–∏—á–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à –≤ 1.5-5 —Ä–∞–∑!
‚Ä¢ üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã 2-10% - –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –ø–æ–ª—É—á–∞–π—Ç–µ —á–∞—Å—Ç—å —Å—Ç–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ!
‚Ä¢ üèÜ –ù–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã - –∏–≥—Ä–∞–π—Ç–µ 5+ —Ä–∞–∑ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –¥–ª—è –±–æ–Ω—É—Å–∞ 1-3% –æ—Ç —Å—É–º–º—ã —Å—Ç–∞–≤–æ–∫!
‚Ä¢ üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10% –æ—Ç –∏—Ö –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã (—Å—Ç–∞–≤–∫–∞ –æ—Ç 1 –¥–æ 100000 ‚≠ê):
üé∞ –°–ª–æ—Ç—ã - 64 –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, 4 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö (5-20x —Å—Ç–∞–≤–∫–∏)
üé∞ –°–ª–æ—Ç—ã 777 - —Ç–æ–ª—å–∫–æ –¥–∂–µ–∫–ø–æ—Ç 777 (50x —Å—Ç–∞–≤–∫–∏)
üéØ –î–∞—Ä—Ç—Å - –ø–æ–±–µ–¥–∞ –Ω–∞ 6 (3x —Å—Ç–∞–≤–∫–∏)
üé≤ –ö—É–±–∏–∫ - –ø–æ–±–µ–¥–∞ –Ω–∞ 6 (3x —Å—Ç–∞–≤–∫–∏)
üé≥ –ë–æ—É–ª–∏–Ω–≥ - –ø–æ–±–µ–¥–∞ –Ω–∞ 6 (3x —Å—Ç–∞–≤–∫–∏)
‚öΩ –§—É—Ç–±–æ–ª - 2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –≥–æ–ª–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º
üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª - 3 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 2 –±—Ä–æ—Å–∫–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º

üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 1:1
1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 ‚≠ê

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–π dice —ç–º–æ–¥–∑–∏ –∏–≥—Ä—ã —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!
    """
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
        [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üé∞ NSource Casino - –ü–æ–º–æ—â—å

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/activity - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
/promo <–∫–æ–¥> - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
/bet <—Å—É–º–º–∞> - –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É
/deposit - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
/withdraw - –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞

üéÆ –ò–≥—Ä—ã:
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö —ç–º–æ–¥–∑–∏ –≤ —á–∞—Ç:
üé∞ - –°–ª–æ—Ç—ã (4 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏)
üéØ - –î–∞—Ä—Ç—Å (–ø–æ–±–µ–¥–∞ –Ω–∞ 6)
üé≤ - –ö—É–±–∏–∫ (–ø–æ–±–µ–¥–∞ –Ω–∞ 6) 
üé≥ - –ë–æ—É–ª–∏–Ω–≥ (–ø–æ–±–µ–¥–∞ –Ω–∞ 6)
‚öΩ - –§—É—Ç–±–æ–ª (2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –≥–æ–ª–∞)
üèÄ - –ë–∞—Å–∫–µ—Ç–±–æ–ª (3 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 2 –±—Ä–æ—Å–∫–∞)

üíé –°–∏—Å—Ç–µ–º—ã –±–æ–Ω—É—Å–æ–≤:
‚Ä¢ –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥ - –±–æ–Ω—É—Å—ã –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥ (+10%/+25%/+45%/+60%/+85%)
‚Ä¢ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∏ - —Å–ª—É—á–∞–π–Ω—ã–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç—ã - —á–∞—Å—Ç—å —Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã - –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –∏–≥—Ä—É
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç

–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –∏–≥—Ä—ã –≤ —á–∞—Ç!
    """
    await update.message.reply_text(help_text)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
            )
        else:
            await update.message.reply_text(
                f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
            )
        return
    
    is_muted, mute_time = await check_mute(user_id)
    if is_muted:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                f"üîá –í—ã –≤ –º—É—Ç–µ.\n"
                f"‚è∞ {mute_time}\n\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º—É—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
            )
        else:
            await update.message.reply_text(
                f"üîá –í—ã –≤ –º—É—Ç–µ.\n"
                f"‚è∞ {mute_time}\n\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º—É—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
            )
        return
    
    data = user_data[user_id]
    activity = user_activity[user_id]
    
    win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
    
    slots_mode = data.get('slots_mode', 'normal')
    slots_mode_text = "üé∞ –û–±—ã—á–Ω—ã–µ" if slots_mode == 'normal' else "üé∞ –°–ª–æ—Ç—ã 777"
    
    weekly_info = ""
    if activity['weekly_streak_days'] > 0:
        weekly_info = f"üìÖ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –¥–Ω–µ–π: {activity['weekly_streak_days']}/7\n"
        weekly_info += f"üéÆ –ò–≥—Ä —Å–µ–≥–æ–¥–Ω—è: {activity['daily_games_count']}/5\n"
        weekly_info += f"üìä –ò–≥—Ä –∑–∞ –Ω–µ–¥–µ–ª—é: {activity['weekly_total_games']}\n"
        weekly_info += f"üí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: {round(activity['weekly_total_bets'], 1)} ‚≠ê"
    
    referral_info = ""
    if data['referral_code']:
        referral_info = f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {data['referrals_count']}\n"
        referral_info += f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {round(data['referral_earnings'], 1)} ‚≠ê"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º—É—Ç–µ –∏ VIP
    mute_info = ""
    if is_muted:
        mute_info = f"üîá –í –º—É—Ç–µ: {mute_time}\n"
    
    vip_info = ""
    is_vip, vip_time = await check_vip(user_id)
    if is_vip:
        vip_info = f"‚≠ê VIP: {vip_time}\n"
    
    warnings_info = ""
    if user_warnings[user_id]:
        warnings_info = f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(user_warnings[user_id])}\n"
    
    profile_text = f"""
üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üë§ –ò–º—è: {user.first_name}
üÜî ID: {user_id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {data['registration_date'][:10]}
üéÆ –†–µ–∂–∏–º —Å–ª–æ—Ç–æ–≤: {slots_mode_text}
{mute_info}{vip_info}{warnings_info}
üíé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üí∞ –ë–∞–ª–∞–Ω—Å: {round(data['game_balance'], 1)} ‚≠ê
üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {data['current_bet']} ‚≠ê
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {data['total_games']}
üèÜ –ü–æ–±–µ–¥: {data['total_wins']}
üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {data['total_deposited']} ‚≠ê

üî• –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤:
üìä –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {data['win_streak']}
üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {data['max_win_streak']}
üéâ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {data['mega_wins_count']}
üí´ –°—É–º–º–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {round(data['total_mega_win_amount'], 1)} ‚≠ê

{weekly_info}

{referral_info}
    """
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit"),
         InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ ‚≠ê", callback_data="withdraw")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")]
    ]
    
    # –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if admin_mode.get(user_id, False):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(profile_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(profile_text, reply_markup=reply_markup)

# üÜï –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê - –ö–û–ú–ê–ù–î–´
async def referral_system_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    data = user_data[user_id]
    
    referral_text = f"""
üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10% –æ—Ç –∏—Ö –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π!

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üéØ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {data['referral_code']}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {data['referrals_count']}
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {round(data['referral_earnings'], 1)} ‚≠ê

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
https://t.me/{(await context.bot.get_me()).username}?start={data['referral_code']}

üìã –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
2. –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ
3. –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç –µ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
4. –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω —Å—ã–≥—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º {REFERRAL_CONFIG['min_referee_games']} –∏–≥—Ä –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –º–∏–Ω–∏–º—É–º {REFERRAL_CONFIG['min_referee_deposit']} ‚≠ê

üí° –ü—Ä–∏–º–µ—Ä: –ï—Å–ª–∏ –≤–∞—à –¥—Ä—É–≥ –ø—Ä–æ–∏–≥—Ä–∞–ª 100 ‚≠ê, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10 ‚≠ê!
    """
    
    keyboard = [
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(referral_text, reply_markup=reply_markup)

# üÜï –ö–û–ú–ê–ù–î–ê –ê–ö–¢–ò–í–ê–¶–ò–ò –ü–†–û–ú–û–ö–û–î–ê
async def promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await update.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    if not context.args:
        await update.message.reply_text(
            "üéüÔ∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo <–∫–æ–¥>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /promo SUMMER2024"
        )
        return
    
    promo_code = context.args[0].upper()
    success, message = use_promo_code(user_id, promo_code)
    
    await update.message.reply_text(message)

# üìä –ö–û–ú–ê–ù–î–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø)
async def activity_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await update.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    activity_data = user_activity[user_id]
    
    today = datetime.datetime.now().date()
    plays_remaining = max(0, WEEKLY_BONUS_CONFIG["min_daily_games"] - activity_data['daily_games_count'])
    
    if activity_data['weekly_total_bets'] > 0:
        base_bonus = activity_data['weekly_total_bets'] * WEEKLY_BONUS_CONFIG["base_percent"]
        min_games = WEEKLY_BONUS_CONFIG["min_daily_games"] * WEEKLY_BONUS_CONFIG["required_days"]
        extra_games = max(0, activity_data['weekly_total_games'] - min_games)
        extra_bonus = activity_data['weekly_total_bets'] * extra_games * WEEKLY_BONUS_CONFIG["bonus_per_extra_game"]
        max_extra = activity_data['weekly_total_bets'] * WEEKLY_BONUS_CONFIG["max_extra_bonus"]
        extra_bonus = min(extra_bonus, max_extra)
        potential_bonus = base_bonus + extra_bonus
    else:
        potential_bonus = 0
    
    activity_text = f"""
üìä –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ù–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã)

üéÆ –°—ã–≥—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {activity_data['daily_games_count']}/{WEEKLY_BONUS_CONFIG["min_daily_games"]}
üìÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {activity_data['weekly_streak_days']}/{WEEKLY_BONUS_CONFIG["required_days"]}
üéØ –í—Å–µ–≥–æ –∏–≥—Ä –∑–∞ –Ω–µ–¥–µ–ª—é: {activity_data['weekly_total_games']}
üí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: {round(activity_data['weekly_total_bets'], 1)} ‚≠ê

üéÅ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥:
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å: 1% –æ—Ç —Å—É–º–º—ã —Å—Ç–∞–≤–æ–∫
‚Ä¢ –î–æ–ø. –±–æ–Ω—É—Å: +0.05% –∑–∞ –∫–∞–∂–¥—É—é –∏–≥—Ä—É —Å–≤–µ—Ä—Ö {WEEKLY_BONUS_CONFIG["min_daily_games"] * WEEKLY_BONUS_CONFIG["required_days"]}
‚Ä¢ –ú–∞–∫—Å. –¥–æ–ø. –±–æ–Ω—É—Å: +2%

üí´ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ~{round(potential_bonus, 1)} ‚≠ê
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä –¥–ª—è –∑–∞—á–µ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è: {plays_remaining}
    """
    
    if activity_data.get('last_weekly_bonus_date') == today.isoformat():
        activity_text += "\n‚úÖ –ù–µ–¥–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!"
    
    await update.message.reply_text(activity_text)

# üéÆ –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–ì–† (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
async def process_dice_result(user_id: int, emoji: str, value: int, cost: int, message, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await message.reply_text(f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É—Ç
    is_muted, mute_time = await check_mute(user_id)
    if is_muted:
        await message.reply_text(f"üîá –í—ã –≤ –º—É—Ç–µ. {mute_time}")
        return
    
    slots_mode = user_data[user_id].get('slots_mode', 'normal')
    
    if emoji == "üé∞" and slots_mode == '777':
        game_config = SLOTS_777_CONFIG.get(emoji)
    else:
        game_config = GAMES_CONFIG.get(emoji)
        
    if not game_config:
        return
    
    result_config = game_config["values"].get(value)
    if not result_config:
        result_config = {"win": False, "base_prize": 0, "message": f"{emoji} - –ø—Ä–æ–∏–≥—Ä—ã—à. –í–æ–∑–≤—Ä–∞—Ç: {{prize}} ‚≠ê"}
    
    base_prize_amount = result_config["base_prize"]
    is_win = result_config["win"]
    
    final_prize, bonus_messages = calculate_win_bonuses(user_id, base_prize_amount, cost, emoji, is_win)
    
    result_text = ""
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∑–æ–º
    formatted_message = result_config["message"].format(prize=final_prize)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–û–ó–í–†–ê–¢ –ü–†–ò –ü–†–û–ò–ì–†–´–®–ï –î–û–õ–ñ–ï–ù –ù–ê–ß–ò–°–õ–Ø–¢–¨–°–Ø –ù–ê –ë–ê–õ–ê–ù–°
    if is_win or base_prize_amount > 0 or final_prize > 0:
        user_data[user_id]['game_balance'] += final_prize
        if is_win:
            user_data[user_id]['total_wins'] += 1
        
        result_text = (
            f"{formatted_message}\n\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
            f"üìä (–°–ø–∏—Å–∞–Ω–æ: {cost} ‚≠ê + –í—ã–∏–≥—Ä—ã—à: {final_prize} ‚≠ê)"
        )
        
        if bonus_messages:
            result_text += "\n\n" + "\n".join(bonus_messages)
    else:
        # –î–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        if final_prize > 0:
            user_data[user_id]['game_balance'] += final_prize
            result_text = (
                f"{formatted_message}\n\n"
                f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
                f"üìä –°–ø–∏—Å–∞–Ω–æ: {cost} ‚≠ê + –í–æ–∑–≤—Ä–∞—Ç: {final_prize} ‚≠ê"
            )
        else:
            result_text = (
                f"{formatted_message}\n\n"
                f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
                f"üìä –°–ø–∏—Å–∞–Ω–æ: {cost} ‚≠ê"
            )
    
    await message.reply_text(result_text)
    
    if not admin_mode.get(user_id, False):
        referral_reward, referrer_id = await process_referral_reward(user_id, cost, final_prize)
        if referral_reward > 0:
            await message.reply_text(
                f"üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ù–ê–ì–†–ê–î–ê!\n\n"
                f"üíé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {referrer_id} –ø–æ–ª—É—á–∞–µ—Ç {referral_reward} ‚≠ê\n"
                f"üìä –ó–∞ –ø—Ä–æ–∏–≥—Ä—ã—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞: {cost - final_prize} ‚≠ê"
            )
    
    weekly_bonus = update_weekly_activity(user_id, cost)
    if weekly_bonus:
        await message.reply_text(
            f"üéÅ –ù–ï–î–ï–õ–¨–ù–ê–Ø –ù–ê–ì–†–ê–î–ê!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
            f"‚Ä¢ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {weekly_bonus['total_games']}\n"
            f"‚Ä¢ –°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {round(weekly_bonus['total_bets'], 1)} ‚≠ê\n"
            f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å: {round(weekly_bonus['base_bonus'], 1)} ‚≠ê\n"
            f"‚Ä¢ –î–æ–ø. –±–æ–Ω—É—Å: {round(weekly_bonus['extra_bonus'], 1)} ‚≠ê\n"
            f"üí∞ –ò–¢–û–ì–û: {round(weekly_bonus['total_bonus'], 1)} ‚≠ê\n\n"
            f"üíé –ë–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê"
        )
    
    save_data()

# üí∏ –°–ò–°–¢–ï–ú–ê –í–´–í–û–î–ê –°–†–ï–î–°–¢–í
async def withdraw_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await update.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    balance = round(user_data[user_id]['game_balance'], 1)
    
    if balance < MIN_WITHDRAWAL:
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê\n"
            f"üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚≠ê\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥!"
        )
        return
    
    withdraw_text = f"""
üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê
üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚≠ê

üéÅ –ü—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram Stars!

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:
    """
    
    keyboard = []
    for amount in WITHDRAWAL_AMOUNTS:
        if balance >= amount:
            keyboard.append([InlineKeyboardButton(f"{amount} ‚≠ê", callback_data=f"withdraw_{amount}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(withdraw_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(withdraw_text, reply_markup=reply_markup)

async def withdraw_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    balance = round(user_data[user_id]['game_balance'], 1)
    
    if balance < MIN_WITHDRAWAL:
        await query.edit_message_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê\n"
            f"üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚≠ê\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
                [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
            ])
        )
        return
    
    withdraw_text = f"""
üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê
üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚≠ê

üéÅ –ü—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram Stars!

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:
    """
    
    keyboard = []
    for amount in WITHDRAWAL_AMOUNTS:
        if balance >= amount:
            keyboard.append([InlineKeyboardButton(f"{amount} ‚≠ê", callback_data=f"withdraw_{amount}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(withdraw_text, reply_markup=reply_markup)

async def handle_withdraw_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    amount = int(query.data.split('_')[1])
    balance = round(user_data[user_id]['game_balance'], 1)
    
    if balance < amount:
        await query.edit_message_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="withdraw")]
            ])
        )
        return
    
    context.user_data['withdraw_amount'] = amount
    context.user_data['withdraw_user_id'] = user_id
    
    gifts_count = amount // 15
    gifts_count = max(1, gifts_count)
    
    confirm_text = f"""
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞

üí∏ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {amount} ‚≠ê
üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {gifts_count}

üí∞ –ë–∞–ª–∞–Ω—Å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è: {balance} ‚≠ê
üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: {round(balance - amount, 1)} ‚≠ê

–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {amount} ‚≠ê –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {gifts_count} —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram Stars!
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="confirm_withdraw")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="withdraw")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(confirm_text, reply_markup=reply_markup)

async def confirm_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = context.user_data.get('withdraw_user_id')
    amount = context.user_data.get('withdraw_amount')
    
    if not user_id or not amount:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
        return
    
    if user_data[user_id]['game_balance'] < amount:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    
    user_data[user_id]['game_balance'] -= amount
    
    gifts_count = amount // 15
    gifts_count = max(1, gifts_count)
    
    withdrawal_request = {
        'user_id': user_id,
        'amount': amount,
        'gifts_count': gifts_count,
        'timestamp': datetime.datetime.now().isoformat(),
        'status': 'completed'
    }
    
    if user_id not in withdrawal_requests:
        withdrawal_requests[user_id] = []
    withdrawal_requests[user_id].append(withdrawal_request)
    
    save_data()
    
    success_text = f"""
üéâ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üí∏ –°–ø–∏—Å–∞–Ω–æ: {amount} ‚≠ê
üéÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {gifts_count}
üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê

üì¶ –í–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–∞—Ä–∫–∏" –≤ Telegram.

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–≥—Ä—É! üé∞
    """
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(success_text, reply_markup=reply_markup)
    
    print(f"üí∞ –í–´–í–û–î: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–≤–µ–ª {amount} ‚≠ê, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {gifts_count} –ø–æ–¥–∞—Ä–∫–æ–≤")

# üéØ –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–¢–ê–í–ö–ò
async def bet_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await update.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    if not context.args:
        await update.message.reply_text(
            f"üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user_data[user_id]['current_bet']} ‚≠ê\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bet <—Å—É–º–º–∞>\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET} ‚≠ê\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MAX_BET} ‚≠ê"
        )
        return
    
    try:
        new_bet = int(context.args[0])
        
        if new_bet < MIN_BET:
            await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET} ‚≠ê")
            return
            
        if new_bet > MAX_BET:
            await update.message.reply_text(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MAX_BET} ‚≠ê")
            return
            
        user_data[user_id]['current_bet'] = new_bet
        save_data()
        
        await update.message.reply_text(f"‚úÖ –°—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_bet} ‚≠ê")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

# üí∞ –°–ò–°–¢–ï–ú–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –° –ö–ê–°–¢–û–ú–ù–´–ú–ò –°–£–ú–ú–ê–ú–ò (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø)
async def deposit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
            )
        else:
            await update.message.reply_text(
                f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
            )
        return
    
    data = user_data[user_id]
    
    deposit_text = f"""
üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(data['game_balance'], 1)} ‚≠ê

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
üí´ 1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 ‚≠ê
    """
    
    keyboard = []
    for product_key, product in PRODUCTS.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{product['title']} - {product['price']} Stars", 
                callback_data=f"buy_{product_key}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton("üíé –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É", callback_data="custom_deposit")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(deposit_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(deposit_text, reply_markup=reply_markup)

async def deposit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    current_balance = round(user_data[user_id]['game_balance'], 1)
    
    deposit_text = f"""
üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} ‚≠ê

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
üí´ 1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 ‚≠ê
    """
    
    keyboard = []
    for product_key, product in PRODUCTS.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{product['title']} - {product['price']} Stars", 
                callback_data=f"buy_{product_key}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton("üíé –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É", callback_data="custom_deposit")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(deposit_text, reply_markup=reply_markup)

async def handle_deposit_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    product_key = query.data.replace("buy_", "")
    product = PRODUCTS[product_key]
    
    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=product["title"],
        description=product["description"],
        payload=product_key,
        provider_token=PROVIDER_TOKEN,
        currency=product["currency"],
        prices=[LabeledPrice(product["title"], product["price"])],
        start_parameter="nsource_casino"
    )

# üÜï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–°–¢–û–ú–ù–û–ì–û –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
async def custom_deposit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    deposit_text = f"""
üíé –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–õ–¨–ù–û–ô –°–£–ú–ú–´

üí∞ –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {CUSTOM_DEPOSIT_CONFIG['min_amount']} - {CUSTOM_DEPOSIT_CONFIG['max_amount']} ‚≠ê
üí´ –ö—É—Ä—Å: 1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 ‚≠ê

üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:
    """
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="deposit")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(deposit_text, reply_markup=reply_markup)
    
    return WAITING_CUSTOM_AMOUNT

async def handle_custom_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await update.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return ConversationHandler.END
    
    try:
        amount = int(update.message.text)
        
        if amount < CUSTOM_DEPOSIT_CONFIG['min_amount']:
            await update.message.reply_text(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {CUSTOM_DEPOSIT_CONFIG['min_amount']} ‚≠ê\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç {CUSTOM_DEPOSIT_CONFIG['min_amount']} –¥–æ {CUSTOM_DEPOSIT_CONFIG['max_amount']} ‚≠ê:"
            )
            return WAITING_CUSTOM_AMOUNT
            
        if amount > CUSTOM_DEPOSIT_CONFIG['max_amount']:
            await update.message.reply_text(
                f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {CUSTOM_DEPOSIT_CONFIG['max_amount']} ‚≠ê\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç {CUSTOM_DEPOSIT_CONFIG['min_amount']} –¥–æ {CUSTOM_DEPOSIT_CONFIG['max_amount']} ‚≠ê:"
            )
            return WAITING_CUSTOM_AMOUNT
        
        current_balance = user_data[user_id]['game_balance']
        new_balance = current_balance + amount
        
        confirm_text = f"""
‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–û–ü–û–õ–ù–ï–ù–ò–Ø

üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} ‚≠ê
üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(current_balance, 1)} ‚≠ê
üí´ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {round(new_balance, 1)} ‚≠ê

üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {amount} Telegram Stars
        """
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"confirm_custom_{amount}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_custom_deposit")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(confirm_text, reply_markup=reply_markup)
        
        context.user_data['custom_amount'] = amount
        return CONFIRM_CUSTOM_AMOUNT
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!\n\n"
            f"–î–∏–∞–ø–∞–∑–æ–Ω: {CUSTOM_DEPOSIT_CONFIG['min_amount']} - {CUSTOM_DEPOSIT_CONFIG['max_amount']} ‚≠ê"
        )
        return WAITING_CUSTOM_AMOUNT

async def confirm_custom_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    amount = int(query.data.replace("confirm_custom_", ""))
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—É–º–º—ã
    product_key = f"pack_custom_{amount}"
    product_title = f"{amount} ‚≠ê"
    product_description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} ‚≠ê"
    
    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=product_title,
        description=product_description,
        payload=product_key,
        provider_token=PROVIDER_TOKEN,
        currency="XTR",
        prices=[LabeledPrice(product_title, amount)],
        start_parameter="nsource_casino_custom"
    )
    
    return ConversationHandler.END

async def cancel_custom_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –ö –≤—ã–±–æ—Ä—É —Å—É–º–º—ã", callback_data="deposit")]
        ])
    )
    
    return ConversationHandler.END

async def cancel_custom_deposit_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –ö –≤—ã–±–æ—Ä—É —Å—É–º–º—ã", callback_data="deposit")]
        ])
    )
    
    return ConversationHandler.END

# üí≥ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô (–û–ë–ù–û–í–õ–ï–ù–ù–´–ï)
async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    user_id = update.effective_user.id
    product_key = payment.invoice_payload
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    if product_key.startswith("pack_custom_"):
        amount = int(product_key.replace("pack_custom_", ""))
        credits = amount
        product_title = f"{amount} ‚≠ê"
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        product = PRODUCTS[product_key]
        amount = product["price"]
        credits = product["credits"]
        product_title = product["title"]
    
    user_data[user_id]['game_balance'] += credits
    user_data[user_id]['total_deposited'] += credits
    user_data[user_id]['real_money_spent'] += amount
    
    save_data()
    
    await update.message.reply_text(
        f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!\n\n"
        f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: {amount} Stars\n"
        f"üíé –ó–∞—á–∏—Å–ª–µ–Ω–æ: {credits} ‚≠ê\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n\n"
        f"üéÆ –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!"
    )

# üéÆ –°–ò–°–¢–ï–ú–ê –ò–ì–† (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø)
async def play_games_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    balance = round(user_data[user_id]['game_balance'], 1)
    current_bet = user_data[user_id]['current_bet']
    slots_mode = user_data[user_id].get('slots_mode', 'normal')
    
    slots_mode_text = "–û–±—ã—á–Ω—ã–µ" if slots_mode == 'normal' else "777"
    
    games_text = f"""
üéÆ –í—ã–±–æ—Ä –∏–≥—Ä—ã

üíé –ë–∞–ª–∞–Ω—Å: {balance} ‚≠ê
üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_bet} ‚≠ê
üé∞ –†–µ–∂–∏–º —Å–ª–æ—Ç–æ–≤: {slots_mode_text}
üìä –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–∫–∏: {MIN_BET}-{MAX_BET} ‚≠ê

üéÅ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –°–ò–°–¢–ï–ú–´:
üî• –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥ - –±–æ–Ω—É—Å—ã +10%/+25%/+45%/+60%/+85% –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥
üéâ –°–ª—É—á–∞–π–Ω—ã–µ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∏ - —à–∞–Ω—Å 0.6% x1.5-x5!
üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã 2-10% - –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –ø–æ–ª—É—á–∞–π—Ç–µ —á–∞—Å—Ç—å —Å—Ç–∞–≤–∫–∏!
üèÜ –ù–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã - –∏–≥—Ä–∞–π—Ç–µ 5+ —Ä–∞–∑ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ø–æ–ª—É—á–∞–π—Ç–µ 10% –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –¥—Ä—É–∑–µ–π!

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–π dice —ç–º–æ–¥–∑–∏ –≤ —á–∞—Ç!
    """
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã (4 –≤—ã–∏–≥—Ä—ã—à–∞)", callback_data="play_slots")],
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã 777 (—Ç–æ–ª—å–∫–æ –¥–∂–µ–∫–ø–æ—Ç)", callback_data="play_slots777")],
        [InlineKeyboardButton("üéØ –î–∞—Ä—Ç—Å", callback_data="play_dart")],
        [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫", callback_data="play_dice")],
        [InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥", callback_data="play_bowling")],
        [InlineKeyboardButton("‚öΩ –§—É—Ç–±–æ–ª (2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –≥–æ–ª–∞)", callback_data="play_football")],
        [InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª (3 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 2 –±—Ä–æ—Å–∫–∞)", callback_data="play_basketball")],
        [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
        [InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(games_text, reply_markup=reply_markup)

async def handle_game_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    game_type = query.data.replace("play_", "")
    current_bet = user_data[user_id]['current_bet']
    
    if game_type == 'slots777':
        user_data[user_id]['slots_mode'] = '777'
        await query.edit_message_text("‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –°–ª–æ—Ç—ã 777! –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã –±—É–¥—É—Ç –≤ —Ä–µ–∂–∏–º–µ 777 (—Ç–æ–ª—å–∫–æ –¥–∂–µ–∫–ø–æ—Ç 777).")
        return
    elif game_type == 'slots':
        user_data[user_id]['slots_mode'] = 'normal'
        await query.edit_message_text("‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –æ–±—ã—á–Ω—ã–µ –°–ª–æ—Ç—ã! –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã –±—É–¥—É—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.")
        return
    
    # –°–ü–ò–°–ê–ù–ò–ï –ë–ê–õ–ê–ù–°–ê –ü–ï–†–ï–î –ò–ì–†–û–ô
    if user_data[user_id]['game_balance'] < current_bet and not admin_mode.get(user_id, False):
        await query.edit_message_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
            f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet} ‚≠ê\n\n"
            "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
                [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")],
                [InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
            ])
        )
        return
    
    # –°–ü–ò–°–ê–ù–ò–ï –ë–ê–õ–ê–ù–°–ê (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
    if not admin_mode.get(user_id, False):
        user_data[user_id]['game_balance'] -= current_bet
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
    
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    game_emojis = {
        'slots': 'üé∞', 
        'slots777': 'üé∞',
        'dart': 'üéØ', 
        'dice': 'üé≤',
        'bowling': 'üé≥', 
        'football': '‚öΩ', 
        'basketball': 'üèÄ'
    }
    
    emoji = game_emojis.get(game_type, 'üé∞')
    
    user_sessions[user_id] = {
        'game_type': game_type,
        'emoji': emoji,
        'bet': current_bet if not admin_mode.get(user_id, False) else 0,
        'message_id': query.message.message_id,
        'chat_id': query.message.chat_id
    }
    
    dice_message = await context.bot.send_dice(chat_id=query.message.chat_id, emoji=emoji)
    
    delay = DICE_DELAYS.get(emoji, 3.0)
    await asyncio.sleep(delay)
    
    await process_dice_result(user_id, emoji, dice_message.dice.value, current_bet if not admin_mode.get(user_id, False) else 0, dice_message, context)

async def handle_user_dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user_id = update.effective_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    is_muted, mute_time = await check_mute(user_id)
    if is_muted:
        await message.reply_text(
            f"üîá –í—ã –≤ –º—É—Ç–µ.\n"
            f"‚è∞ {mute_time}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º—É—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        )
        return
    
    if not message.dice:
        return
    
    emoji = message.dice.emoji
    value = message.dice.value
    
    if emoji not in GAMES_CONFIG:
        return
    
    current_bet = user_data[user_id]['current_bet']
    
    # –°–ü–ò–°–ê–ù–ò–ï –ë–ê–õ–ê–ù–°–ê –ü–ï–†–ï–î –ò–ì–†–û–ô
    if user_data[user_id]['game_balance'] < current_bet and not admin_mode.get(user_id, False):
        await message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
            f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet} ‚≠ê\n\n"
            "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
                [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")]
            ])
        )
        return
    
    cost = current_bet if not admin_mode.get(user_id, False) else 0
    
    # –°–ü–ò–°–ê–ù–ò–ï –ë–ê–õ–ê–ù–°–ê (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
    if not admin_mode.get(user_id, False):
        user_data[user_id]['game_balance'] -= cost
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
    
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    user_sessions[user_id] = {
        'game_type': 'slots',
        'emoji': emoji,
        'bet': cost,
        'message_id': message.message_id,
        'chat_id': message.chat_id
    }
    
    delay = DICE_DELAYS.get(emoji, 3.0)
    await asyncio.sleep(delay)
    
    await process_dice_result(user_id, emoji, value, cost, message, context)

# üéØ CALLBACK –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–¢–ê–í–ö–ò
async def change_bet_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    is_banned, reason = await check_ban(user_id)
    if is_banned:
        await query.message.reply_text(
            f"üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
        )
        return
    
    current_bet = user_data[user_id]['current_bet']
    
    bet_text = f"""
üéØ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏

üíé –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_bet} ‚≠ê
üìä –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–æ–∫: {MIN_BET}-{MAX_BET} ‚≠ê

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bet <—Å—É–º–º–∞> –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏.

–ü—Ä–∏–º–µ—Ä:
/bet 10 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 10 ‚≠ê
/bet 100 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 100 ‚≠ê
/bet 1000 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 1000 ‚≠ê
    """
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="play_games")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(bet_text, reply_markup=reply_markup)

# üîô CALLBACK –î–õ–ê –í–û–ó–í–†–ê–¢–ê –í –ü–†–û–§–ò–õ–¨
async def back_to_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await profile(update, context)

# üëë –ê–î–ú–ò–ù –°–ò–°–¢–ï–ú–ê (–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø)
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if len(context.args) == 0:
        await update.message.reply_text(
            "üîê –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–∫–æ–¥>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /admin 1337"
        )
        return
    
    code = context.args[0]
    if code == ADMIN_CODE:
        admin_mode[user_id] = True
        save_data()
        await update.message.reply_text(
            "üëë –†–ï–ñ–ò–ú –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!\n\n"
            "‚ú® –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã.\n"
            "üéÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!"
        )
        log_admin_action(user_id, "admin_login")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

# üÜï –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
async def admin_panel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    admin_text = """
üëë –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨

üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è:
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –±–∞–Ω–æ–≤ –∏ –º—É—Ç–æ–≤
‚Ä¢ –í—ã–¥–∞—á–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞—Ä—É—à–µ–Ω–∏–π
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π

üí∞ –§–∏–Ω–∞–Ω—Å—ã:
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–≤–æ–¥–æ–≤
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∏—Å—Å–∏–π
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤

üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏:
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–∏–≥—Ä—ã—à–µ–π
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üéÅ –ü—Ä–æ–º–æ-—Å–∏—Å—Ç–µ–º–∞:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–Ω—É—Å–æ–≤

‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã

üìã –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–æ–≤:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∞–º
    """
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
         InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="admin_moderation"),
         InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="admin_finance")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="admin_games"),
         InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ", callback_data="admin_promo")],
        [InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system"),
         InlineKeyboardButton("üìã –õ–æ–≥–∏", callback_data="admin_logs")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(admin_text, reply_markup=reply_markup)

# üÜï –ê–î–ú–ò–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê
async def admin_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    total_users = len(user_data)
    active_today = 0
    total_balance = 0
    total_deposited = 0
    total_games = 0
    total_wins = 0
    
    today = datetime.datetime.now().date()
    
    for uid, data in user_data.items():
        total_balance += data['game_balance']
        total_deposited += data['total_deposited']
        total_games += data['total_games']
        total_wins += data['total_wins']
        
        if 'last_activity' in data:
            last_activity_date = datetime.datetime.fromisoformat(data['last_activity']).date()
            if last_activity_date == today:
                active_today += 1
    
    win_rate = (total_wins / total_games * 100) if total_games > 0 else 0
    
    stats_text = f"""
üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {sum(1 for data in user_data.values() if datetime.datetime.fromisoformat(data['registration_date']).date() == today)}

üí∞ –§–ò–ù–ê–ù–°–´:
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {round(total_balance, 1)} ‚≠ê
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: {round(total_deposited, 1)} ‚≠ê
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç: {round(total_deposited/total_users, 1) if total_users > 0 else 0} ‚≠ê

üéÆ –ò–ì–†–û–í–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:
‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}
‚Ä¢ –ü–æ–±–µ–¥: {total_wins}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {round(sum(data['current_bet'] for data in user_data.values())/total_users, 1) if total_users > 0 else 0} ‚≠ê

‚öôÔ∏è –°–ò–°–¢–ï–ú–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤: {len(promo_codes)}
‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned_users)}
‚Ä¢ –í –º—É—Ç–µ: {len(muted_users)}
‚Ä¢ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(vip_users)}
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π: {sum(1 for data in user_data.values() if data['referral_by'])}
"""
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats"),
         InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="admin_charts")],
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(stats_text, reply_markup=reply_markup)

# üÜï –ê–î–ú–ò–ù –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
async def admin_users_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    users_text = """
üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò

üîç –ü–æ–∏—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:

‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
"""
    
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user"),
         InlineKeyboardButton("üìä –¢–æ–ø –∏–≥—Ä–æ–∫–∏", callback_data="admin_top_players")],
        [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏", callback_data="admin_balance_manage"),
         InlineKeyboardButton("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="admin_activity")],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_reset_stats"),
         InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")],
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(users_text, reply_markup=reply_markup)

# üÜï –ê–î–ú–ò–ù –ú–û–î–ï–†–ê–¶–ò–Ø
async def admin_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    moderation_text = """
üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ú–û–î–ï–†–ê–¶–ò–ò

üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏:

‚Ä¢ –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –í—ã–¥–∞—á–∞ –∏ —Å–Ω—è—Ç–∏–µ –º—É—Ç–æ–≤
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞—Ä—É—à–µ–Ω–∏–π

üìã –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
"""
    
    keyboard = [
        [InlineKeyboardButton("üö´ –ë–∞–Ω—ã", callback_data="admin_bans"),
         InlineKeyboardButton("üîá –ú—É—Ç—ã", callback_data="admin_mutes")],
        [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", callback_data="admin_warnings"),
         InlineKeyboardButton("üìù –ñ—É—Ä–Ω–∞–ª –Ω–∞—Ä—É—à–µ–Ω–∏–π", callback_data="admin_violations")],
        [InlineKeyboardButton("üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="admin_monitoring"),
         InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="admin_quick_actions")],
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(moderation_text, reply_markup=reply_markup)

# üÜï –ê–î–ú–ò–ù –§–ò–ù–ê–ù–°–´
async def admin_finance_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    total_deposits = sum(data['total_deposited'] for data in user_data.values())
    total_withdrawals = sum(sum(req['amount'] for req in requests) for requests in withdrawal_requests.values())
    total_balance = sum(data['game_balance'] for data in user_data.values())
    
    finance_text = f"""
üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê

üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

‚Ä¢ –û–±—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã: {round(total_deposits, 1)} ‚≠ê
‚Ä¢ –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã: {round(total_withdrawals, 1)} ‚≠ê
‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã: {round(total_balance, 1)} ‚≠ê
‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {round(total_deposits - total_withdrawals, 1)} ‚≠ê

üí∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏:
"""
    
    keyboard = [
        [InlineKeyboardButton("üì• –î–µ–ø–æ–∑–∏—Ç—ã", callback_data="admin_deposits"),
         InlineKeyboardButton("üì§ –í—ã–≤–æ–¥—ã", callback_data="admin_withdrawals")],
        [InlineKeyboardButton("üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="admin_transactions"),
         InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_finance_analytics")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_finance_settings"),
         InlineKeyboardButton("üìä –û—Ç—á–µ—Ç—ã", callback_data="admin_reports")],
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(finance_text, reply_markup=reply_markup)

# üÜï –ê–î–ú–ò–ù –ò–ì–†–´
async def admin_games_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    games_text = """
üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ì–†–ê–ú–ò

üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:

‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞–º–∏
‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —à–∞–Ω—Å–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–≥—Ä

‚öôÔ∏è –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
"""
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ—Ç–æ–≤", callback_data="admin_slots_config"),
         InlineKeyboardButton("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä", callback_data="admin_games_config")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä", callback_data="admin_games_stats"),
         InlineKeyboardButton("‚öñÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞", callback_data="admin_balance_games")],
        [InlineKeyboardButton("üîß –†–µ–∂–∏–º—ã", callback_data="admin_game_modes"),
         InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_games_analytics")],
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(games_text, reply_markup=reply_markup)

# üÜï –ê–î–ú–ò–ù –ü–†–û–ú–û –°–ò–°–¢–ï–ú–ê
async def admin_promo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    promo_text = f"""
üéÅ –ü–†–û–ú–û –°–ò–°–¢–ï–ú–ê

üéüÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è–º–∏:

‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ü–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞–º–∏
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {len(promo_codes)}
‚Ä¢ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {sum(len(promo['used_by']) for promo in promo_codes.values())}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {sum(promo['amount'] * len(promo['used_by']) for promo in promo_codes.values())} ‚≠ê

‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
"""
    
    keyboard = [
        [InlineKeyboardButton("üéüÔ∏è –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_create_promo"),
         InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="admin_promo_list")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_promo_stats"),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_promo_settings")],
        [InlineKeyboardButton("üéØ –ê–∫—Ü–∏–∏", callback_data="admin_promo_campaigns"),
         InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_promo_analytics")],
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(promo_text, reply_markup=reply_markup)

# üÜï –ê–î–ú–ò–ù –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
async def admin_system_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    system_text = """
‚öôÔ∏è –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò

üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:

‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:
"""
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    process = psutil.Process()
    memory_info = process.memory_info()
    cpu_percent = psutil.cpu_percent(interval=1)
    memory_percent = psutil.virtual_memory().percent
    
    system_text += f"""
‚Ä¢ –ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞: {memory_info.rss // 1024 // 1024} MB
‚Ä¢ CPU: {cpu_percent}%
‚Ä¢ –ü–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã: {memory_percent}%
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.datetime.now() - datetime.datetime.fromtimestamp(process.create_time())}
"""
    
    keyboard = [
        [InlineKeyboardButton("üõ†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callback_data="admin_system_config"),
         InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏", callback_data="admin_backup")],
        [InlineKeyboardButton("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="admin_monitoring"),
         InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin_notifications")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data="admin_restart"),
         InlineKeyboardButton("üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="admin_logout")],
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(system_text, reply_markup=reply_markup)

# üÜï –ê–î–ú–ò–ù –õ–û–ì–ò
async def admin_logs_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not admin_mode.get(user_id, False):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if not admin_logs:
        logs_text = "üìù –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç—ã"
    else:
        recent_logs = admin_logs[-10:]
        logs_text = "üìù –ü–û–°–õ–ï–î–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø:\n\n"
        
        for log in reversed(recent_logs):
            logs_text += f"üë§ {log['admin_id']} - {log['action']}"
            if log.get('target_id'):
                logs_text += f" (ID: {log['target_id']})"
            if log.get('details'):
                logs_text += f" - {log['details']}"
            logs_text += f"\n‚è∞ {log['timestamp'][:16]}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_logs"),
         InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤", callback_data="admin_export_logs")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="admin_clear_logs"),
         InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö", callback_data="admin_search_logs")],
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(logs_text, reply_markup=reply_markup)

# üÜï –ö–û–ú–ê–ù–î–ê –ë–ê–ù–ò–†–û–í–ê–ù–ò–Ø
async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id> <–ø—Ä–∏—á–∏–Ω–∞>")
        return
    
    try:
        target_id = int(context.args[0])
        reason = ' '.join(context.args[1:])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        if target_id in admin_mode and admin_mode[target_id]:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        await ban_user(target_id, user_id, reason)
        
        await update.message.reply_text(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω!\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –†–ê–ó–ë–ê–ù–ò–í–ê–ù–ò–Ø
async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        success = await unban_user(target_id, user_id)
        
        if success:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω!")
        else:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ü–ò–°–ö–ê –ó–ê–ë–ê–ù–ï–ù–ù–´–•
async def banlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if not banned_users:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return
    
    banlist_text = "üö´ –ó–ê–ë–ê–ù–ï–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n\n"
    
    for banned_id, ban_data in list(banned_users.items())[:20]:
        banlist_text += (
            f"üë§ ID: {banned_id}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {ban_data.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üëÆ –ó–∞–±–∞–Ω–∏–ª: {ban_data.get('banned_by', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üìÖ –î–∞—Ç–∞: {ban_data.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    
    if len(banned_users) > 20:
        banlist_text += f"\n... –∏ –µ—â–µ {len(banned_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await update.message.reply_text(banlist_text)

# üÜï –ö–û–ú–ê–ù–î–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
async def addbalance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance <user_id> <amount>")
        return
    
    try:
        target_id = int(context.args[0])
        amount = float(context.args[1])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        user_data[target_id]['game_balance'] += amount
        save_data()
        
        log_admin_action(user_id, "add_balance", target_id, f"—Å—É–º–º–∞: {amount} ‚≠ê")
        
        await update.message.reply_text(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {amount} ‚≠ê\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {round(user_data[target_id]['game_balance'], 1)} ‚≠ê"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª!")

# üÜï –ö–û–ú–ê–ù–î–ê –£–°–¢–ê–ù–û–í–ö–ò –ë–ê–õ–ê–ù–°–ê
async def setbalance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance <user_id> <amount>")
        return
    
    try:
        target_id = int(context.args[0])
        amount = float(context.args[1])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        old_balance = user_data[target_id]['game_balance']
        user_data[target_id]['game_balance'] = amount
        save_data()
        
        log_admin_action(user_id, "set_balance", target_id, f"–±—ã–ª–æ: {old_balance}, —Å—Ç–∞–ª–æ: {amount} ‚≠ê")
        
        await update.message.reply_text(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount} ‚≠ê\n"
            f"üí∞ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(old_balance, 1)} ‚≠ê"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ú–û–ö–û–î–ê
async def promo_create_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo_create <amount> <uses> [name]")
        return
    
    try:
        amount = int(context.args[0])
        uses = int(context.args[1])
        
        if amount < PROMO_CONFIG["min_amount"] or amount > PROMO_CONFIG["max_amount"]:
            await update.message.reply_text(
                f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {PROMO_CONFIG['min_amount']} –¥–æ {PROMO_CONFIG['max_amount']} ‚≠ê"
            )
            return
        
        if uses <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        code_name = context.args[2] if len(context.args) > 2 else None
        
        if code_name:
            code = code_name.upper()
            if code in promo_codes:
                await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return
        else:
            code = create_promo_code(amount, uses, user_id)
        
        promo_codes[code] = {
            'amount': amount,
            'uses_left': uses,
            'created_by': user_id,
            'created_at': datetime.datetime.now().isoformat(),
            'used_by': []
        }
        save_data()
        
        log_admin_action(user_id, "create_promo", None, f"–∫–æ–¥: {code}, —Å—É–º–º–∞: {amount}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses}")
        
        await update.message.reply_text(
            f"üéüÔ∏è –ü–†–û–ú–û–ö–û–î –°–û–ó–î–ê–ù!\n\n"
            f"üíé –ö–æ–¥: {code}\n"
            f"üí∞ –°—É–º–º–∞: {amount} ‚≠ê\n"
            f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ü–ò–°–ö–ê –ü–†–û–ú–û–ö–û–î–û–í
async def promo_list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if not promo_codes:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—É—Å—Ç")
        return
    
    promo_text = "üéüÔ∏è –ê–ö–¢–ò–í–ù–´–ï –ü–†–û–ú–û–ö–û–î–´:\n\n"
    
    for code, promo in list(promo_codes.items())[:15]:
        promo_text += (
            f"üíé –ö–æ–¥: {code}\n"
            f"üí∞ –°—É–º–º–∞: {promo['amount']} ‚≠ê\n"
            f"üéØ –û—Å—Ç–∞–ª–æ—Å—å: {promo['uses_left']}/{promo['uses_left'] + len(promo['used_by'])}\n"
            f"üë§ –°–æ–∑–¥–∞–ª: {promo['created_by']}\n"
            f"üìÖ –î–∞—Ç–∞: {promo['created_at'][:16]}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    
    if len(promo_codes) > 15:
        promo_text += f"\n... –∏ –µ—â–µ {len(promo_codes) - 15} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"
    
    await update.message.reply_text(promo_text)

# üÜï –ö–û–ú–ê–ù–î–ê –£–î–ê–õ–ï–ù–ò–Ø –ü–†–û–ú–û–ö–û–î–ê
async def promo_delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo_delete <–∫–æ–¥>")
        return
    
    code = context.args[0].upper()
    
    if code not in promo_codes:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    promo = promo_codes[code]
    del promo_codes[code]
    save_data()
    
    log_admin_action(user_id, "delete_promo", None, f"–∫–æ–¥: {code}, —Å—É–º–º–∞: {promo['amount']}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo['uses_left']}")
    
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —É–¥–∞–ª–µ–Ω!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    total_users = len(user_data)
    active_today = 0
    total_balance = 0
    total_deposited = 0
    total_games = 0
    total_wins = 0
    
    today = datetime.datetime.now().date()
    
    for uid, data in user_data.items():
        total_balance += data['game_balance']
        total_deposited += data['total_deposited']
        total_games += data['total_games']
        total_wins += data['total_wins']
        
        if 'last_activity' in data:
            last_activity_date = datetime.datetime.fromisoformat(data['last_activity']).date()
            if last_activity_date == today:
                active_today += 1
    
    win_rate = (total_wins / total_games * 100) if total_games > 0 else 0
    
    stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {sum(1 for data in user_data.values() if datetime.datetime.fromisoformat(data['registration_date']).date() == today)}

üí∞ –§–ò–ù–ê–ù–°–´:
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {round(total_balance, 1)} ‚≠ê
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: {round(total_deposited, 1)} ‚≠ê
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç: {round(total_deposited/total_users, 1) if total_users > 0 else 0} ‚≠ê

üéÆ –ò–ì–†–´:
‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}
‚Ä¢ –ü–æ–±–µ–¥: {total_wins}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%

‚öôÔ∏è –°–ò–°–¢–ï–ú–ê:
‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤: {len(promo_codes)}
‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned_users)}
‚Ä¢ –í –º—É—Ç–µ: {len(muted_users)}
‚Ä¢ VIP: {len(vip_users)}
"""
    
    await update.message.reply_text(stats_text)

# üÜï –ö–û–ú–ê–ù–î–ê –í–´–•–û–î–ê –ò–ó –ê–î–ú–ò–ù–ö–ò
async def admin_logout_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if admin_mode.get(user_id, False):
        admin_mode[user_id] = False
        save_data()
        
        log_admin_action(user_id, "admin_logout")
        
        await update.message.reply_text(
            "üîì –†–ï–ñ–ò–ú –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù!\n\n"
            "‚ú® –¢–µ–ø–µ—Ä—å –≤—ã –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
    else:
        await update.message.reply_text("‚ùå –í—ã –∏ —Ç–∞–∫ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

# üÜï –ö–û–ú–ê–ù–î–ê –ü–û–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async def searchid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /searchid <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        data = user_data[target_id]
        
        win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
        
        is_banned, ban_reason = await check_ban(target_id)
        is_muted, mute_time = await check_mute(target_id)
        is_vip, vip_time = await check_vip(target_id)
        
        user_info = f"""
üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï

üÜî ID: {target_id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {data['registration_date'][:16]}
üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['last_activity'][:16] if 'last_activity' in data else '–ù–∏–∫–æ–≥–¥–∞'}
üé∞ –†–µ–∂–∏–º —Å–ª–æ—Ç–æ–≤: {data.get('slots_mode', 'normal')}

üíé –ë–ê–õ–ê–ù–° –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
üí∞ –ë–∞–ª–∞–Ω—Å: {round(data['game_balance'], 1)} ‚≠ê
üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {data['current_bet']} ‚≠ê
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {data['total_games']}
üèÜ –ü–æ–±–µ–¥: {data['total_wins']}
üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {data['total_deposited']} ‚≠ê

üî• –°–ò–°–¢–ï–ú–ê –ë–û–ù–£–°–û–í:
üìä –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {data['win_streak']}
üèÜ –ú–∞–∫—Å. —Å–µ—Ä–∏—è: {data['max_win_streak']}
üéâ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {data['mega_wins_count']}
üí´ –°—É–º–º–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {round(data['total_mega_win_amount'], 1)} ‚≠ê

üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê:
üéØ –ö–æ–¥: {data['referral_code']}
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {data['referrals_count']}
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {round(data['referral_earnings'], 1)} ‚≠ê
üì• –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {'–î–∞' if data['referral_by'] else '–ù–µ—Ç'}

üõ°Ô∏è –°–¢–ê–¢–£–°–´:
üö´ –ë–∞–Ω: {'–î–∞' if is_banned else '–ù–µ—Ç'} {f'({ban_reason})' if is_banned else ''}
üîá –ú—É—Ç: {'–î–∞' if is_muted else '–ù–µ—Ç'} {f'({mute_time})' if is_muted else ''}
‚≠ê VIP: {'–î–∞' if is_vip else '–ù–µ—Ç'} {f'({vip_time})' if is_vip else ''}
‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(user_warnings.get(target_id, []))}
"""
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_edit_balance_{target_id}"),
             InlineKeyboardButton("üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data=f"admin_moderate_{target_id}")],
            [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_detailed_stats_{target_id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(user_info, reply_markup=reply_markup)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ë–†–û–°–ê –ë–ê–õ–ê–ù–°–ê
async def resetbalance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resetbalance <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        old_balance = user_data[target_id]['game_balance']
        user_data[target_id]['game_balance'] = 0
        save_data()
        
        log_admin_action(user_id, "reset_balance", target_id, f"–±—ã–ª–æ: {old_balance}, —Å—Ç–∞–ª–æ: 0 ‚≠ê")
        
        await update.message.reply_text(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–±—Ä–æ—à–µ–Ω –¥–æ 0 ‚≠ê\n"
            f"üí∞ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(old_balance, 1)} ‚≠ê"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –í–´–î–ê–ß–ò –í–ê–†–ù–ê
async def warn_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warn <user_id> <–ø—Ä–∏—á–∏–Ω–∞>")
        return
    
    try:
        target_id = int(context.args[0])
        reason = ' '.join(context.args[1:])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await warn_user(target_id, user_id, reason)
        
        warnings_count = len(user_warnings[target_id])
        
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"üìä –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ù–Ø–¢–ò–Ø –í–ê–†–ù–ê
async def unwarn_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unwarn <user_id> [–∏–Ω–¥–µ–∫—Å]")
        return
    
    try:
        target_id = int(context.args[0])
        warning_index = int(context.args[1]) if len(context.args) > 1 else -1
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        success = await unwarn_user(target_id, user_id, warning_index)
        
        if success:
            warnings_count = len(user_warnings[target_id])
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}!\n"
                f"üìä –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –∏–Ω–¥–µ–∫—Å–∞!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ü–ò–°–ö–ê –í–ê–†–ù–û–í
async def warnlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warnlist <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        if target_id not in user_warnings or not user_warnings[target_id]:
            await update.message.reply_text("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
            return
        
        warnlist_text = f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {target_id}:\n\n"
        
        for i, warning in enumerate(user_warnings[target_id]):
            warnlist_text += (
                f"#{i+1} - {warning['reason']}\n"
                f"üëÆ –í—ã–¥–∞–ª: {warning['warned_by']}\n"
                f"üìÖ –î–∞—Ç–∞: {warning['warned_at'][:16]}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
        
        await update.message.reply_text(warnlist_text)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –û–ß–ò–°–¢–ö–ò –í–ê–†–ù–û–í
async def warnclear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warnclear <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        if target_id not in user_warnings:
            await update.message.reply_text("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
            return
        
        warnings_count = len(user_warnings[target_id])
        user_warnings[target_id] = []
        user_data[target_id]['warnings'] = []
        save_data()
        
        log_admin_action(user_id, "clear_warnings", target_id, f"—Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}")
        
        await update.message.reply_text(
            f"‚úÖ –í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–Ω—è—Ç—ã!\n"
            f"üìä –°–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –í–´–î–ê–ß–ò VIP
async def vip_give_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /vip_give <user_id> <–¥–Ω–∏>")
        return
    
    try:
        target_id = int(context.args[0])
        days = int(context.args[1])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await give_vip(target_id, user_id, days)
        
        await update.message.reply_text(
            f"‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –≤—ã–¥–∞–Ω VIP —Å—Ç–∞—Ç—É—Å!\n"
            f"‚è∞ –°—Ä–æ–∫: {days} –¥–Ω–µ–π\n"
            f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {(datetime.datetime.now() + datetime.timedelta(days=days)).strftime('%d.%m.%Y %H:%M')}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –¥–Ω–µ–π!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ù–Ø–¢–ò–Ø VIP
async def vip_remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /vip_remove <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        success = await remove_vip(target_id, user_id)
        
        if success:
            await update.message.reply_text(f"‚úÖ VIP —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–Ω—è—Ç!")
        else:
            await update.message.reply_text("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç VIP —Å—Ç–∞—Ç—É—Å–∞!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–†–û–ú–û–ö–û–î–ï
async def promo_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo_info <–∫–æ–¥>")
        return
    
    code = context.args[0].upper()
    
    if code not in promo_codes:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    promo = promo_codes[code]
    
    promo_info = f"""
üéüÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ú–û–ö–û–î–ï

üíé –ö–æ–¥: {code}
üí∞ –°—É–º–º–∞: {promo['amount']} ‚≠ê
üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {len(promo['used_by'])}/{promo['uses_left'] + len(promo['used_by'])}
üë§ –°–æ–∑–¥–∞–ª: {promo['created_by']}
üìÖ –°–æ–∑–¥–∞–Ω: {promo['created_at'][:16]}

üë• –ò–°–ü–û–õ–¨–ó–û–í–ê–õ–ò:
"""
    
    if promo['used_by']:
        for i, user_id in enumerate(promo['used_by'][:10]):
            promo_info += f"‚Ä¢ {user_id}\n"
        if len(promo['used_by']) > 10:
            promo_info += f"... –∏ –µ—â–µ {len(promo['used_by']) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    else:
        promo_info += "‚Ä¢ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª"
    
    await update.message.reply_text(promo_info)

# üÜï –ö–û–ú–ê–ù–î–ê –õ–û–ì–û–í
async def logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if not admin_logs:
        await update.message.reply_text("üìù –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç—ã")
        return
    
    recent_logs = admin_logs[-20:]
    logs_text = "üìù –ü–û–°–õ–ï–î–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø:\n\n"
    
    for log in reversed(recent_logs):
        logs_text += f"üë§ {log['admin_id']} - {log['action']}"
        if log.get('target_id'):
            logs_text += f" (ID: {log['target_id']})"
        if log.get('details'):
            logs_text += f" - {log['details']}"
        logs_text += f"\n‚è∞ {log['timestamp'][:16]}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    
    await update.message.reply_text(logs_text)

# üÜï –ö–û–ú–ê–ù–î–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø
async def save_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    save_data()
    await update.message.reply_text("üíæ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ò–°–¢–ï–ú–´
async def system_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    process = psutil.Process()
    memory_info = process.memory_info()
    cpu_percent = psutil.cpu_percent(interval=1)
    memory_percent = psutil.virtual_memory().percent
    disk_usage = psutil.disk_usage('/')
    
    system_text = f"""
‚öôÔ∏è –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø

üìä –ü–†–û–¶–ï–°–°:
‚Ä¢ –ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞: {memory_info.rss // 1024 // 1024} MB
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.datetime.now() - datetime.datetime.fromtimestamp(process.create_time())}
‚Ä¢ –ü–æ—Ç–æ–∫–æ–≤: {process.num_threads()}

üíª –°–ò–°–¢–ï–ú–ê:
‚Ä¢ CPU: {cpu_percent}%
‚Ä¢ –ü–∞–º—è—Ç—å: {memory_percent}%
‚Ä¢ –î–∏—Å–∫: {disk_usage.percent}%

üóÉÔ∏è –î–ê–ù–ù–´–ï:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}
‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤: {len(promo_codes)}
‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned_users)}
‚Ä¢ –õ–æ–≥–æ–≤: {len(admin_logs)}
"""
    
    await update.message.reply_text(system_text)

# üÜï –ö–û–ú–ê–ù–î–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async def userstats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /userstats <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        data = user_data[target_id]
        activity = user_activity[target_id]
        
        win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
        
        user_stats = f"""
üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {target_id}

üíé –û–°–ù–û–í–ù–û–ï:
‚Ä¢ –ë–∞–ª–∞–Ω—Å: {round(data['game_balance'], 1)} ‚≠ê
‚Ä¢ –°—Ç–∞–≤–∫–∞: {data['current_bet']} ‚≠ê
‚Ä¢ –ò–≥—Ä: {data['total_games']}
‚Ä¢ –ü–æ–±–µ–¥: {data['total_wins']}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {data['total_deposited']} ‚≠ê

üî• –ë–û–ù–£–°–´:
‚Ä¢ –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {data['win_streak']}
‚Ä¢ –ú–∞–∫—Å. —Å–µ—Ä–∏—è: {data['max_win_streak']}
‚Ä¢ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {data['mega_wins_count']}
‚Ä¢ –°—É–º–º–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {round(data['total_mega_win_amount'], 1)} ‚≠ê

üìÖ –ê–ö–¢–ò–í–ù–û–°–¢–¨:
‚Ä¢ –°–µ—Ä–∏—è –¥–Ω–µ–π: {activity['weekly_streak_days']}/7
‚Ä¢ –ò–≥—Ä —Å–µ–≥–æ–¥–Ω—è: {activity['daily_games_count']}/5
‚Ä¢ –ò–≥—Ä –∑–∞ –Ω–µ–¥–µ–ª—é: {activity['weekly_total_games']}
‚Ä¢ –°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {round(activity['weekly_total_bets'], 1)} ‚≠ê

üë• –†–ï–§–ï–†–ê–õ–´:
‚Ä¢ –ö–æ–¥: {data['referral_code']}
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {data['referrals_count']}
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {round(data['referral_earnings'], 1)} ‚≠ê
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {'–î–∞' if data['referral_by'] else '–ù–µ—Ç'}
"""
        
        await update.message.reply_text(user_stats)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# üÜï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ï–î–ï–õ–¨–ù–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò
def update_weekly_activity(user_id: int, bet_amount: float) -> dict:
    today = datetime.datetime.now().date()
    activity = user_activity[user_id]
    
    if activity['last_activity_date'] != today.isoformat():
        if activity['last_activity_date']:
            last_date = datetime.datetime.fromisoformat(activity['last_activity_date']).date()
            if (today - last_date).days == 1:
                activity['weekly_streak_days'] += 1
            elif (today - last_date).days > 1:
                activity['weekly_streak_days'] = 1
        else:
            activity['weekly_streak_days'] = 1
        
        activity['last_activity_date'] = today.isoformat()
        activity['daily_games_count'] = 0
    
    activity['daily_games_count'] += 1
    activity['weekly_total_games'] += 1
    activity['weekly_total_bets'] += bet_amount
    
    if activity['weekly_streak_days'] >= WEEKLY_BONUS_CONFIG["required_days"]:
        if activity['daily_games_count'] >= WEEKLY_BONUS_CONFIG["min_daily_games"]:
            if activity.get('last_weekly_bonus_date') != today.isoformat():
                base_bonus = activity['weekly_total_bets'] * WEEKLY_BONUS_CONFIG["base_percent"]
                min_games = WEEKLY_BONUS_CONFIG["min_daily_games"] * WEEKLY_BONUS_CONFIG["required_days"]
                extra_games = max(0, activity['weekly_total_games'] - min_games)
                extra_bonus = activity['weekly_total_bets'] * extra_games * WEEKLY_BONUS_CONFIG["bonus_per_extra_game"]
                max_extra = activity['weekly_total_bets'] * WEEKLY_BONUS_CONFIG["max_extra_bonus"]
                extra_bonus = min(extra_bonus, max_extra)
                total_bonus = base_bonus + extra_bonus
                
                user_data[user_id]['game_balance'] += total_bonus
                activity['last_weekly_bonus_date'] = today.isoformat()
                
                save_data()
                
                return {
                    'total_games': activity['weekly_total_games'],
                    'total_bets': activity['weekly_total_bets'],
                    'base_bonus': base_bonus,
                    'extra_bonus': extra_bonus,
                    'total_bonus': total_bonus
                }
    
    save_data()
    return None

# üÜï –ö–û–ú–ê–ù–î–ê –ú–£–¢–ê
async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute <user_id> <–º–∏–Ω—É—Ç—ã> <–ø—Ä–∏—á–∏–Ω–∞>")
        return
    
    try:
        target_id = int(context.args[0])
        minutes = int(context.args[1])
        reason = ' '.join(context.args[2:])
        
        if target_id not in user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        if target_id in admin_mode and admin_mode[target_id]:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        await mute_user(target_id, user_id, minutes, reason)
        
        await update.message.reply_text(
            f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–º—É—á–µ–Ω!\n"
            f"‚è∞ –í—Ä–µ–º—è: {minutes} –º–∏–Ω—É—Ç\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –º–∏–Ω—É—Ç!")

# üÜï –ö–û–ú–ê–ù–î–ê –†–ê–ó–ú–£–¢–ê
async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute <user_id>")
        return
    
    try:
        target_id = int(context.args[0])
        
        success = await unmute_user(target_id, user_id)
        
        if success:
            await update.message.reply_text(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–º—É—á–µ–Ω!")
        else:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# üÜï –ö–û–ú–ê–ù–î–ê –°–ü–ò–°–ö–ê –ú–£–¢–û–í
async def mutelist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if not muted_users:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return
    
    mutelist_text = "üîá –ó–ê–ú–£–ß–ï–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n\n"
    
    for muted_id, mute_data in list(muted_users.items())[:20]:
        mute_until = datetime.datetime.fromisoformat(mute_data['muted_until'])
        time_left = mute_until - datetime.datetime.now()
        
        mutelist_text += (
            f"üë§ ID: {muted_id}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {mute_data.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {str(time_left).split('.')[0]}\n"
            f"üëÆ –ó–∞–º—É—Ç–∏–ª: {mute_data.get('muted_by', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üìÖ –î–∞—Ç–∞: {mute_data.get('muted_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    
    if len(muted_users) > 20:
        mutelist_text += f"\n... –∏ –µ—â–µ {len(muted_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await update.message.reply_text(mutelist_text)

# üÜï –°–û–ó–î–ê–ù–ò–ï –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –ü–†–û–î–£–ö–¢–ê –î–õ–Ø –ö–ê–°–¢–û–ú–ù–û–ì–û –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
def create_custom_product(amount: int) -> dict:
    return {
        "title": f"{amount} ‚≠ê",
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} ‚≠ê",
        "price": amount,
        "currency": "XTR",
        "credits": amount
    }

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
def main():
    load_data()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("activity", activity_command))
    application.add_handler(CommandHandler("promo", promo_command))
    application.add_handler(CommandHandler("bet", bet_command))
    application.add_handler(CommandHandler("deposit", deposit_command))
    application.add_handler(CommandHandler("withdraw", withdraw_command))
    
    # –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("admin_logout", admin_logout_command))
    application.add_handler(CommandHandler("system", system_command))
    application.add_handler(CommandHandler("searchid", searchid_command))
    application.add_handler(CommandHandler("addbalance", addbalance_command))
    application.add_handler(CommandHandler("setbalance", setbalance_command))
    application.add_handler(CommandHandler("resetbalance", resetbalance_command))
    application.add_handler(CommandHandler("userstats", userstats_command))
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("unban", unban_command))
    application.add_handler(CommandHandler("banlist", banlist_command))
    application.add_handler(CommandHandler("mute", mute_command))
    application.add_handler(CommandHandler("unmute", unmute_command))
    application.add_handler(CommandHandler("mutelist", mutelist_command))
    application.add_handler(CommandHandler("warn", warn_command))
    application.add_handler(CommandHandler("unwarn", unwarn_command))
    application.add_handler(CommandHandler("warnlist", warnlist_command))
    application.add_handler(CommandHandler("warnclear", warnclear_command))
    application.add_handler(CommandHandler("promo_create", promo_create_command))
    application.add_handler(CommandHandler("promo_list", promo_list_command))
    application.add_handler(CommandHandler("promo_delete", promo_delete_command))
    application.add_handler(CommandHandler("promo_info", promo_info_command))
    application.add_handler(CommandHandler("vip_give", vip_give_command))
    application.add_handler(CommandHandler("vip_remove", vip_remove_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("logs", logs_command))
    application.add_handler(CommandHandler("save", save_command))
    
    # CALLBACK HANDLERS
    application.add_handler(CallbackQueryHandler(profile, pattern="^back_to_profile$"))
    application.add_handler(CallbackQueryHandler(play_games_callback, pattern="^play_games$"))
    application.add_handler(CallbackQueryHandler(deposit_callback, pattern="^deposit$"))
    application.add_handler(CallbackQueryHandler(withdraw_callback, pattern="^withdraw$"))
    application.add_handler(CallbackQueryHandler(change_bet_callback, pattern="^change_bet$"))
    application.add_handler(CallbackQueryHandler(referral_system_callback, pattern="^referral_system$"))
    application.add_handler(CallbackQueryHandler(admin_panel_callback, pattern="^admin_panel$"))
    application.add_handler(CallbackQueryHandler(admin_stats_callback, pattern="^admin_stats$"))
    application.add_handler(CallbackQueryHandler(admin_users_callback, pattern="^admin_users$"))
    application.add_handler(CallbackQueryHandler(admin_moderation_callback, pattern="^admin_moderation$"))
    application.add_handler(CallbackQueryHandler(admin_finance_callback, pattern="^admin_finance$"))
    application.add_handler(CallbackQueryHandler(admin_games_callback, pattern="^admin_games$"))
    application.add_handler(CallbackQueryHandler(admin_promo_callback, pattern="^admin_promo$"))
    application.add_handler(CallbackQueryHandler(admin_system_callback, pattern="^admin_system$"))
    application.add_handler(CallbackQueryHandler(admin_logs_callback, pattern="^admin_logs$"))
    
    # –ò–ì–†–û–í–´–ï CALLBACK HANDLERS
    application.add_handler(CallbackQueryHandler(handle_game_selection, pattern="^play_"))
    
    # –í–´–í–û–î –°–†–ï–î–°–¢–í CALLBACK HANDLERS
    application.add_handler(CallbackQueryHandler(handle_withdraw_selection, pattern="^withdraw_"))
    application.add_handler(CallbackQueryHandler(confirm_withdraw, pattern="^confirm_withdraw$"))
    
    # –ü–û–ü–û–õ–ù–ï–ù–ò–ï CALLBACK HANDLERS
    application.add_handler(CallbackQueryHandler(handle_deposit_selection, pattern="^buy_"))
    
    # üÜï CONVERSATION HANDLER –î–õ–Ø –ö–ê–°–¢–û–ú–ù–û–ì–û –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
    custom_deposit_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(custom_deposit_callback, pattern="^custom_deposit$")],
        states={
            WAITING_CUSTOM_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_amount_input),
                CallbackQueryHandler(cancel_custom_deposit, pattern="^cancel_custom_deposit$")
            ],
            CONFIRM_CUSTOM_AMOUNT: [
                CallbackQueryHandler(confirm_custom_payment_callback, pattern="^confirm_custom_"),
                CallbackQueryHandler(cancel_custom_deposit, pattern="^cancel_custom_deposit$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_custom_deposit_message),
            CallbackQueryHandler(cancel_custom_deposit, pattern="^cancel_custom_deposit$")
        ]
    )
    application.add_handler(custom_deposit_handler)
    
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô
    application.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö DICE –°–û–û–ë–©–ï–ù–ò–ô
    application.add_handler(MessageHandler(filters.DICE, handle_user_dice))
    
    # –ó–ê–ü–£–°–ö –ë–û–¢–ê
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == "__main__":
    main()
