import os
import datetime
import asyncio
from collections import defaultdict
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from threading import Thread
from flask import Flask

# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = "8378526693:AAFOwAb6pVp1GOE0tXZN4PDLFnD_TTT1djg"

# üóÉÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–• –î–õ–Ø –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø
research_data = {
    "üèÄ": defaultdict(lambda: {'count': 0, 'users': set(), 'first_seen': None}),
    "‚öΩ": defaultdict(lambda: {'count': 0, 'users': set(), 'first_seen': None})
}

user_stats = defaultdict(lambda: {'total_games': 0})

# üë§ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîç —Ö—É–π –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –ê–ù–ò–ú–ê–¶–ò–ô\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å üèÄ –∏–ª–∏ ‚öΩ –≤ —á–∞—Ç!\n"
        "–Ø –ø–æ–∫–∞–∂—É –Ω–æ–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ (1-5) –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/clear - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –∏ —É–∑–Ω–∞–≤–∞–π –Ω–æ–º–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–π!"
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∞–Ω–∏–º–∞—Ü–∏—è–º"""
    stats_text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø\n\n"
    
    # –ë–∞—Å–∫–µ—Ç–±–æ–ª
    basketball_data = research_data["üèÄ"]
    if basketball_data:
        stats_text += "üèÄ –ë–ê–°–ö–ï–¢–ë–û–õ (1-5):\n"
        for value in sorted(basketball_data.keys()):
            data = basketball_data[value]
            stats_text += f"üî¢ –ê–Ω–∏–º–∞—Ü–∏—è #{value}: {data['count']} —Ä–∞–∑\n"
        stats_text += f"üìà –í—Å–µ–≥–æ –∞–Ω–∏–º–∞—Ü–∏–π: {len(basketball_data)}/5\n\n"
    else:
        stats_text += "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª: –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç\n\n"
    
    # –§—É—Ç–±–æ–ª
    football_data = research_data["‚öΩ"]
    if football_data:
        stats_text += "‚öΩ –§–£–¢–ë–û–õ (1-5):\n"
        for value in sorted(football_data.keys()):
            data = football_data[value]
            stats_text += f"üî¢ –ê–Ω–∏–º–∞—Ü–∏—è #{value}: {data['count']} —Ä–∞–∑\n"
        stats_text += f"üìà –í—Å–µ–≥–æ –∞–Ω–∏–º–∞—Ü–∏–π: {len(football_data)}/5\n"
    else:
        stats_text += "‚öΩ –§—É—Ç–±–æ–ª: –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç\n"
    
    await update.message.reply_text(stats_text)

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    research_data["üèÄ"].clear()
    research_data["‚öΩ"].clear()
    user_stats.clear()
    await update.message.reply_text("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞!")

# üéÆ –û–ë–†–ê–ë–û–¢–ö–ê –ò–ì–† - –ü–†–û–°–¢–û–ô –ò –≠–§–§–ï–ö–¢–ò–í–ù–´–ô –ú–ï–¢–û–î
async def handle_game_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    emoji = update.message.text
    
    if emoji not in ["üèÄ", "‚öΩ"]:
        await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ üèÄ –∏–ª–∏ ‚öΩ!")
        return
    
    user_stats[user_id]['total_games'] += 1
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º dice –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    dice_message = await context.bot.send_dice(chat_id=update.message.chat_id, emoji=emoji)
    value = dice_message.dice.value
    
    # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
    await asyncio.sleep(2)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    game_data = research_data[emoji]
    
    if game_data[value]['first_seen'] is None:
        game_data[value]['first_seen'] = datetime.datetime.now().isoformat()
    
    game_data[value]['count'] += 1
    game_data[value]['users'].add(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    game_name = "–ë–ê–°–ö–ï–¢–ë–û–õ" if emoji == "üèÄ" else "–§–£–¢–ë–û–õ"
    
    result_text = (
        f"{emoji} {game_name} - –ê–ù–ò–ú–ê–¶–ò–Ø #{value}\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ç–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏:\n"
        f"üîÑ –í—ã–ø–∞–¥–∞–ª–∞ —Ä–∞–∑: {game_data[value]['count']}\n"
        f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤: {len(game_data[value]['users'])}\n"
        f"üìà –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–∞—Ü–∏–π: {len(game_data)}/5"
    )
    
    await update.message.reply_text(result_text)

# üåê FLASK –î–õ–Ø RAILWAY
app = Flask(__name__)

@app.route('/')
def home():
    return "üîç Animation Research Bot - –ò—Å—Å–ª–µ–¥—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ üèÄ –∏ ‚öΩ!"

@app.route('/stats')
def stats_web():
    """–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    html = "<h1>üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π üèÄ –∏ ‚öΩ</h1>"
    
    # –ë–∞—Å–∫–µ—Ç–±–æ–ª
    html += "<h2>üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª (1-5)</h2>"
    basketball_data = research_data["üèÄ"]
    if basketball_data:
        html += f"<p>–ù–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–∞—Ü–∏–π: {len(basketball_data)}/5</p>"
        html += "<table border='1'><tr><th>–ù–æ–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th><th>–¢–µ—Å—Ç–µ—Ä–æ–≤</th><th>–ü–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ</th></tr>"
        for value in sorted(basketball_data.keys()):
            data = basketball_data[value]
            first_seen = data['first_seen'][:19] if data['first_seen'] else "N/A"
            html += f"<tr><td>{value}</td><td>{data['count']}</td><td>{len(data['users'])}</td><td>{first_seen}</td></tr>"
        html += "</table>"
    else:
        html += "<p>–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç</p>"
    
    # –§—É—Ç–±–æ–ª
    html += "<h2>‚öΩ –§—É—Ç–±–æ–ª (1-5)</h2>"
    football_data = research_data["‚öΩ"]
    if football_data:
        html += f"<p>–ù–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–∞—Ü–∏–π: {len(football_data)}/5</p>"
        html += "<table border='1'><tr><th>–ù–æ–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th><th>–¢–µ—Å—Ç–µ—Ä–æ–≤</th><th>–ü–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ</th></tr>"
        for value in sorted(football_data.keys()):
            data = football_data[value]
            first_seen = data['first_seen'][:19] if data['first_seen'] else "N/A"
            html += f"<tr><td>{value}</td><td>{data['count']}</td><td>{len(data['users'])}</td><td>{first_seen}</td></tr>"
        html += "</table>"
    else:
        html += "<p>–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç</p>"
    
    return html

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
def main():
    port = int(os.environ.get("PORT", 5000))
    
    def run_flask():
        app.run(host='0.0.0.0', port=port)
    
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("clear", clear_command))
    
    # –°–û–û–ë–©–ï–ù–ò–Ø
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(üèÄ|‚öΩ)$"), handle_game_message))
    
    print("üîç Animation Research Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –∞–Ω–∏–º–∞—Ü–∏–π üèÄ –∏ ‚öΩ!")
    print("üìä –ó–Ω–∞—á–µ–Ω–∏—è: –æ—Ç 1 –¥–æ 5 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–º–æ–¥–∑–∏")
    print("‚ö° –ö–æ–º–∞–Ω–¥—ã: /start, /stats, /clear")
    application.run_polling()

if __name__ == '__main__':
    main()
