import os
import json
import random
import datetime
from collections import defaultdict
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, PreCheckoutQueryHandler
from threading import Thread
from flask import Flask

# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8378526693:AAFOwAb6pVp1GOE0tXZN4PDLFnD_TTT1djg")
PROVIDER_TOKEN = os.environ.get("PROVIDER_TOKEN", "TEST_PROVIDER_TOKEN")
ADMIN_CODE = os.environ.get("ADMIN_CODE", "1337")

# üéØ –ù–ê–°–¢–†–û–ô–ö–ò –ò–ì–†
GAME_COST = 5

# üí∞ –ü–ê–ö–ï–¢–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø (1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 –∏–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞)
PRODUCTS = {
    "pack_5": {"title": "5 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 5 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 5, "currency": "XTR", "credits": 5},
    "pack_10": {"title": "10 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 10 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 10, "currency": "XTR", "credits": 10},
    "pack_25": {"title": "25 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 25 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 25, "currency": "XTR", "credits": 25},
    "pack_50": {"title": "50 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 50 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 50, "currency": "XTR", "credits": 50},
    "pack_100": {"title": "100 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 100 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 100, "currency": "XTR", "credits": 100},
    "pack_250": {"title": "250 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 250 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 250, "currency": "XTR", "credits": 250},
    "pack_500": {"title": "500 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 500 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 500, "currency": "XTR", "credits": 500},
    "pack_1000": {"title": "1000 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 1000 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 1000, "currency": "XTR", "credits": 1000}
}

# üéÆ –ü–û–õ–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –í–°–ï–• –ò–ì–† –° –í–´–ò–ì–†–´–®–ù–´–ú–ò –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò
GAMES_CONFIG = {
    "üé∞": {
        "cost": 5,
        "values": {
            # –°–õ–û–¢–´ - 64 –∑–Ω–∞—á–µ–Ω–∏—è, 4 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö
            1: {"win": True, "prize": 15, "message": "üé∞ –¢–†–ò –ë–ê–†–ê! –í—ã–∏–≥—Ä—ã—à: 15 –∑–≤–µ–∑–¥"},
            2: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #2 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            3: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #3 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            4: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #4 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            5: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #5 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            6: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #6 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            7: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #7 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            8: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #8 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            9: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #9 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            10: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #10 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            11: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #11 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            12: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #12 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            13: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #13 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            14: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #14 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            15: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #15 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            16: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #16 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            17: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #17 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            18: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #18 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            19: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #19 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            20: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #20 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            21: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #21 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            22: {"win": True, "prize": 25, "message": "üé∞ –¢–†–ò –í–ò–®–ù–ò! –í—ã–∏–≥—Ä—ã—à: 25 –∑–≤–µ–∑–¥"},
            23: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #23 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            24: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #24 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            25: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #25 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            26: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #26 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            27: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #27 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            28: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #28 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            29: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #29 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            30: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #30 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            31: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #31 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            32: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #32 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            33: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #33 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            34: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #34 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            35: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #35 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            36: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #36 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            37: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #37 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            38: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #38 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            39: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #39 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            40: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #40 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            41: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #41 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            42: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #42 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            43: {"win": True, "prize": 50, "message": "üé∞ –¢–†–ò –õ–ò–ú–û–ù–ê! –í—ã–∏–≥—Ä—ã—à: 50 –∑–≤–µ–∑–¥"},
            44: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #44 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            45: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #45 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            46: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #46 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            47: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #47 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            48: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #48 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            49: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #49 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            50: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #50 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            51: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #51 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            52: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #52 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            53: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #53 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            54: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #54 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            55: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #55 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            56: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #56 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            57: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #57 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            58: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #58 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            59: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #59 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            60: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #60 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            61: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #61 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            62: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #62 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            63: {"win": False, "prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #63 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            64: {"win": True, "prize": 100, "message": "üé∞ –î–ñ–ï–ö–ü–û–¢ 777! –í—ã–∏–≥—Ä—ã—à: 100 –∑–≤–µ–∑–¥"}
        }
    },
    "üéØ": {
        "cost": 5,
        "values": {
            # –î–ê–†–¢–° - 6 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (6)
            1: {"win": False, "prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            2: {"win": False, "prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            3: {"win": False, "prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            4: {"win": False, "prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            5: {"win": False, "prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            6: {"win": True, "prize": 15, "message": "üéØ - –ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨! –í—ã–∏–≥—Ä—ã—à: 15 –∑–≤–µ–∑–¥"}
        }
    },
    "üé≤": {
        "cost": 5,
        "values": {
            # –ö–û–°–¢–ò - 6 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (6)
            1: {"win": False, "prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            2: {"win": False, "prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            3: {"win": False, "prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            4: {"win": False, "prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            5: {"win": False, "prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            6: {"win": True, "prize": 15, "message": "üé≤ - –í–´–ü–ê–õ–û 6! –í—ã–∏–≥—Ä—ã—à: 15 –∑–≤–µ–∑–¥"}
        }
    },
    "üé≥": {
        "cost": 5,
        "values": {
            # –ë–û–£–õ–ò–ù–ì - 6 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (6)
            1: {"win": False, "prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            2: {"win": False, "prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            3: {"win": False, "prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            4: {"win": False, "prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            5: {"win": False, "prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            6: {"win": True, "prize": 15, "message": "üé≥ - –°–¢–†–ê–ô–ö! –í—ã–∏–≥—Ä—ã—à: 15 –∑–≤–µ–∑–¥"}
        }
    },
    "‚öΩ": {
        "cost": 5,
        "values": {
            # –§–£–¢–ë–û–õ - 5 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (5)
            1: {"win": False, "prize": 0, "message": "‚öΩ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            2: {"win": False, "prize": 0, "message": "‚öΩ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            3: {"win": False, "prize": 0, "message": "‚öΩ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            4: {"win": False, "prize": 0, "message": "‚öΩ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            5: {"win": True, "prize": 15, "message": "‚öΩ - –ì–û–û–û–õ! –í—ã–∏–≥—Ä—ã—à: 15 –∑–≤–µ–∑–¥"}
        }
    },
    "üèÄ": {
        "cost": 5,
        "values": {
            # –ë–ê–°–ö–ï–¢–ë–û–õ - 5 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (5)
            1: {"win": False, "prize": 0, "message": "üèÄ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            2: {"win": False, "prize": 0, "message": "üèÄ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            3: {"win": False, "prize": 0, "message": "üèÄ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            4: {"win": False, "prize": 0, "message": "üèÄ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            5: {"win": True, "prize": 15, "message": "üèÄ - –ü–û–ü–ê–î–ê–ù–ò–ï! –í—ã–∏–≥—Ä—ã—à: 15 –∑–≤–µ–∑–¥"}
        }
    }
}

# üóÉÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•
user_data = defaultdict(lambda: {
    'game_balance': 0,
    'total_games': 0,
    'total_wins': 0,
    'total_deposited': 0,
    'real_money_spent': 0,
    'registration_date': datetime.datetime.now().isoformat(),
    'last_activity': datetime.datetime.now().isoformat()
})

user_activity = defaultdict(lambda: {
    'last_play_date': None,
    'consecutive_days': 0,
    'plays_today': 0,
    'weekly_reward_claimed': False
})

consecutive_wins = defaultdict(int)
admin_mode = defaultdict(bool)

# üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•
def save_data():
    try:
        data = {
            'user_data': dict(user_data),
            'user_activity': dict(user_activity),
            'consecutive_wins': dict(consecutive_wins),
            'admin_mode': dict(admin_mode)
        }
        with open('data.json', 'w') as f:
            json.dump(data, f, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def load_data():
    try:
        with open('data.json', 'r') as f:
            data = json.load(f)
            user_data.update(data.get('user_data', {}))
            user_activity.update(data.get('user_activity', {}))
            consecutive_wins.update(data.get('consecutive_wins', {}))
            admin_mode.update(data.get('admin_mode', {}))
    except FileNotFoundError:
        pass

# üéÅ –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò
WEEKLY_REWARDS = [15, 25, 50]

def update_daily_activity(user_id: int):
    today = datetime.datetime.now().date()
    activity = user_activity[user_id]
    
    if activity['last_play_date'] != today:
        if activity['last_play_date'] and activity['plays_today'] >= 3:
            activity['consecutive_days'] += 1
        elif activity['last_play_date'] and (today - activity['last_play_date']).days > 1:
            activity['consecutive_days'] = 0
        
        activity['plays_today'] = 0
        activity['last_play_date'] = today
    
    activity['plays_today'] += 1
    
    if (activity['consecutive_days'] >= 7 and 
        activity['plays_today'] >= 3 and 
        not activity['weekly_reward_claimed']):
        
        reward = random.choice(WEEKLY_REWARDS)
        activity['consecutive_days'] = 0
        activity['weekly_reward_claimed'] = True
        return reward
    
    return None

# üë§ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üé∞ NSource Casino

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã (5 –∑–≤–µ–∑–¥ –∑–∞ –∏–≥—Ä—É):
üé∞ –°–ª–æ—Ç—ã - 64 –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, 4 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö (15-100 –∑–≤–µ–∑–¥)
üéØ –î–∞—Ä—Ç—Å - –ø–æ–±–µ–¥–∞ –Ω–∞ 6 (15 –∑–≤–µ–∑–¥)
üé≤ –ö—É–±–∏–∫ - –ø–æ–±–µ–¥–∞ –Ω–∞ 6 (15 –∑–≤–µ–∑–¥)
üé≥ –ë–æ—É–ª–∏–Ω–≥ - –ø–æ–±–µ–¥–∞ –Ω–∞ 6 (15 –∑–≤–µ–∑–¥)
‚öΩ –§—É—Ç–±–æ–ª - –ø–æ–±–µ–¥–∞ –Ω–∞ 5 (15 –∑–≤–µ–∑–¥)
üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª - –ø–æ–±–µ–¥–∞ –Ω–∞ 5 (15 –∑–≤–µ–∑–¥)

üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 1:1
1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 –∏–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞

üéÅ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
–ò–≥—Ä–∞–π 3+ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (15-50 –∑–≤–µ–∑–¥)

–ö–æ–º–∞–Ω–¥—ã:
/profile - –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
/deposit - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å  
/activity - –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —ç–º–æ–¥–∑–∏ –∏–≥—Ä—ã —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!
    """
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    data = user_data[user_id]
    
    win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
    
    profile_text = f"""
üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üë§ –ò–º—è: {user.first_name}
üÜî ID: {user_id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {data['registration_date'][:10]}

üíé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üí∞ –ë–∞–ª–∞–Ω—Å: {data['game_balance']} –∑–≤–µ–∑–¥
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {data['total_games']}
üèÜ –ü–æ–±–µ–¥: {data['total_wins']}
üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {data['total_deposited']} –∑–≤–µ–∑–¥
    """
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")]
    ]
    
    if admin_mode.get(user_id, False):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(profile_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(profile_text, reply_markup=reply_markup)

async def deposit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deposit"""
    user_id = update.effective_user.id
    data = user_data[user_id]
    
    deposit_text = f"""
üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data['game_balance']} –∑–≤–µ–∑–¥

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
üí´ 1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 –∏–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞
    """
    
    keyboard = []
    for product_key, product in PRODUCTS.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{product['title']} - {product['price']} Stars", 
                callback_data=f"buy_{product_key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(deposit_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(deposit_text, reply_markup=reply_markup)

async def activity_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /activity"""
    user_id = update.effective_user.id
    activity_data = user_activity[user_id]
    
    today = datetime.datetime.now().date()
    plays_remaining = max(0, 3 - activity_data['plays_today'])
    
    activity_text = f"""
üìä –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

üéÆ –°—ã–≥—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {activity_data['plays_today']}/3
üìÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {activity_data['consecutive_days']}/7
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä –¥–ª—è –∑–∞—á–µ—Ç–∞: {plays_remaining}

üéÅ –ò–≥—Ä–∞–π—Ç–µ 3+ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!
    """
    
    if activity_data['weekly_reward_claimed']:
        activity_text += "\n‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞!"
    
    await update.message.reply_text(activity_text)

# üí≥ –°–ò–°–¢–ï–ú–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
async def deposit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    current_balance = user_data[user_id]['game_balance']
    
    deposit_text = f"""
üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} –∑–≤–µ–∑–¥

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
üí´ 1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 –∏–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞
    """
    
    keyboard = []
    for product_key, product in PRODUCTS.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{product['title']} - {product['price']} Stars", 
                callback_data=f"buy_{product_key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(deposit_text, reply_markup=reply_markup)

async def handle_deposit_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    product_key = query.data.replace("buy_", "")
    product = PRODUCTS[product_key]
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –¶–ï–ù–ê - –±–µ–∑ —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ 100
    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=product["title"],
        description=product["description"],
        payload=product_key,
        provider_token=PROVIDER_TOKEN,
        currency=product["currency"],
        prices=[LabeledPrice(product["title"], product["price"])],
        start_parameter="nsource_casino"
    )

# üí∞ –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô
async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    user_id = update.effective_user.id
    product_key = payment.invoice_payload
    product = PRODUCTS[product_key]
    
    user_data[user_id]['game_balance'] += product["credits"]
    user_data[user_id]['total_deposited'] += product["credits"]
    user_data[user_id]['real_money_spent'] += product["price"]
    
    save_data()
    
    await update.message.reply_text(
        f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!\n\n"
        f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: {product['price']} Stars\n"
        f"üíé –ó–∞—á–∏—Å–ª–µ–Ω–æ: {product['credits']} –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥\n\n"
        f"üéÆ –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!"
    )

# üéÆ –°–ò–°–¢–ï–ú–ê –ò–ì–† - –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø
async def play_games_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    balance = user_data[user_id]['game_balance']
    
    games_text = f"""
üéÆ –í—ã–±–æ—Ä –∏–≥—Ä—ã

üíé –ë–∞–ª–∞–Ω—Å: {balance} –∑–≤–µ–∑–¥
üéØ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã: 5 –∑–≤–µ–∑–¥

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —ç–º–æ–¥–∑–∏ –∏–≥—Ä—ã –≤ —á–∞—Ç!
    """
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã (5 –∑–≤–µ–∑–¥)", callback_data="play_slots")],
        [InlineKeyboardButton("üéØ –î–∞—Ä—Ç—Å (5 –∑–≤–µ–∑–¥)", callback_data="play_dart")],
        [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫ (5 –∑–≤–µ–∑–¥)", callback_data="play_dice")],
        [InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥ (5 –∑–≤–µ–∑–¥)", callback_data="play_bowling")],
        [InlineKeyboardButton("‚öΩ –§—É—Ç–±–æ–ª (5 –∑–≤–µ–∑–¥)", callback_data="play_football")],
        [InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª (5 –∑–≤–µ–∑–¥)", callback_data="play_basketball")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
        [InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(games_text, reply_markup=reply_markup)

async def handle_game_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    game_type = query.data.replace("play_", "")
    
    # –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê
    if user_data[user_id]['game_balance'] < GAME_COST and not admin_mode.get(user_id, False):
        await query.edit_message_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥\n"
            f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: {GAME_COST} –∑–≤–µ–∑–¥\n\n"
            "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
                [InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
            ])
        )
        return
    
    # –°–ü–ò–°–ê–ù–ò–ï –°–†–ï–î–°–¢–í
    if not admin_mode.get(user_id, False):
        user_data[user_id]['game_balance'] -= GAME_COST
    
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    game_emojis = {
        'slots': 'üé∞', 'dart': 'üéØ', 'dice': 'üé≤',
        'bowling': 'üé≥', 'football': '‚öΩ', 'basketball': 'üèÄ'
    }
    
    emoji = game_emojis.get(game_type, 'üé∞')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    context.user_data['expecting_dice'] = True
    context.user_data['last_game_type'] = game_type
    context.user_data['last_game_user_id'] = user_id
    context.user_data['last_game_emoji'] = emoji
    context.user_data['last_game_cost'] = GAME_COST if not admin_mode.get(user_id, False) else 0
    
    dice_message = await context.bot.send_dice(chat_id=query.message.chat_id, emoji=emoji)
    context.user_data['last_dice_message_id'] = dice_message.message_id
    
    message_text = f"üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! {emoji}\n"
    if admin_mode.get(user_id, False):
        message_text += "üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞: –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
    else:
        message_text += f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {GAME_COST} –∑–≤–µ–∑–¥\n"
    message_text += f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥"
    
    await query.edit_message_text(message_text)
    save_data()

# üé∞ –û–ë–†–ê–ë–û–¢–ö–ê DICE - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
async def handle_dice_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    
    if not message.dice:
        return
    
    # –î–ª—è –∏–≥—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º context.user_data
    if context.user_data.get('expecting_dice', False):
        user_id = context.user_data.get('last_game_user_id')
        if not user_id:
            return
        
        emoji = message.dice.emoji
        value = message.dice.value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ–∂–∏–¥–∞–µ–º
        expected_emoji = context.user_data.get('last_game_emoji')
        if emoji != expected_emoji:
            return
        
        await process_game_result(user_id, emoji, value, context.user_data.get('last_game_cost', 0), message, context)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        context.user_data.pop('expecting_dice', None)
        context.user_data.pop('last_game_type', None)
        context.user_data.pop('last_dice_message_id', None)
        context.user_data.pop('last_game_user_id', None)
        context.user_data.pop('last_game_cost', None)
        context.user_data.pop('last_game_emoji', None)

# üéÆ –û–ë–†–ê–ë–û–¢–ö–ê –ò–ì–† –ß–ï–†–ï–ó –≠–ú–û–î–ó–ò - –ü–û–°–¢–û–Ø–ù–ù–ê–Ø –†–ê–ë–û–¢–ê
async def handle_game_emoji(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    emoji = update.message.text
    
    if emoji not in GAMES_CONFIG:
        return
    
    game_config = GAMES_CONFIG[emoji]
    
    # –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê
    if user_data[user_id]['game_balance'] < game_config["cost"] and not admin_mode.get(user_id, False):
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥\n"
            f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: {game_config['cost']} –∑–≤–µ–∑–¥\n\n"
            "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")]
            ])
        )
        return
    
    # –°–ü–ò–°–ê–ù–ò–ï –°–†–ï–î–°–¢–í
    cost = game_config["cost"]
    if not admin_mode.get(user_id, False):
        user_data[user_id]['game_balance'] -= cost
    
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    context.user_data['expecting_dice'] = True
    context.user_data['last_game_user_id'] = user_id
    context.user_data['last_game_emoji'] = emoji
    context.user_data['last_game_cost'] = cost if not admin_mode.get(user_id, False) else 0
    
    dice_message = await context.bot.send_dice(chat_id=update.message.chat_id, emoji=emoji)
    context.user_data['last_dice_message_id'] = dice_message.message_id
    
    message_text = f"üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! {emoji}\n"
    if admin_mode.get(user_id, False):
        message_text += "üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞: –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
    else:
        message_text += f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {cost} –∑–≤–µ–∑–¥\n"
    message_text += f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥"
    
    await update.message.reply_text(message_text)
    save_data()

# üéØ –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ò–ì–†–´
async def process_game_result(user_id: int, emoji: str, value: int, cost: int, message, context: ContextTypes.DEFAULT_TYPE):
    game_config = GAMES_CONFIG.get(emoji)
    if not game_config:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    result_config = game_config["values"].get(value)
    if not result_config:
        result_config = {"win": False, "prize": 0, "message": f"{emoji} - –ø—Ä–æ–∏–≥—Ä—ã—à"}
    
    result_text = ""
    
    if result_config["win"]:
        # –í–´–ò–ì–†–´–®
        win_amount = result_config["prize"]
        user_data[user_id]['game_balance'] += win_amount
        user_data[user_id]['total_wins'] += 1
        
        result_text = (
            f"{result_config['message']}\n\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥\n"
            f"üìä (–°–ø–∏—Å–∞–Ω–æ: {cost} –∑–≤–µ–∑–¥ + –í—ã–∏–≥—Ä—ã—à: {win_amount} –∑–≤–µ–∑–¥)"
        )
    else:
        # –ü–†–û–ò–ì–†–´–®
        result_text = (
            f"{result_config['message']}\n\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥\n"
            f"üìä (–°–ø–∏—Å–∞–Ω–æ: {cost} –∑–≤–µ–∑–¥)"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.reply_text(result_text)
    
    # üìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò
    weekly_reward = update_daily_activity(user_id)
    if weekly_reward:
        user_data[user_id]['game_balance'] += weekly_reward
        await message.reply_text(
            f"üéÅ –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–ê–Ø –ù–ê–ì–†–ê–î–ê!\n\n"
            f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {weekly_reward} –∑–≤–µ–∑–¥\n"
            f"üíé –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥"
        )
    
    save_data()

# üëë –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–î–ú–ò–ù –°–ò–°–¢–ï–ú–ê
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if len(context.args) == 0:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–∫–æ–¥>")
        return
    
    code = context.args[0]
    if code == ADMIN_CODE:
        admin_mode[user_id] = True
        await update.message.reply_text(
            "üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ò–≥—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ –ü–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å—ã\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–¥–º–∏–Ω–∞")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    total_users = len(user_data)
    total_games = sum(data['total_games'] for data in user_data.values())
    total_balance = sum(data['game_balance'] for data in user_data.values())
    
    admin_text = f"""
üëë –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}
üíé –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} –∑–≤–µ–∑–¥

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    """
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã", callback_data="admin_play")],
        [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_balance")],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_reset_confirm")],
        [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="admin_exit")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(admin_text, reply_markup=reply_markup)

async def admin_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    total_users = len(user_data)
    total_games = sum(data['total_games'] for data in user_data.values())
    total_wins = sum(data['total_wins'] for data in user_data.values())
    total_balance = sum(data['game_balance'] for data in user_data.values())
    total_deposited = sum(data['total_deposited'] for data in user_data.values())
    total_real_money = sum(data['real_money_spent'] for data in user_data.values())
    
    win_rate = (total_wins / total_games * 100) if total_games > 0 else 0
    
    stats_text = f"""
üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}
üèÜ –í—Å–µ–≥–æ –ø–æ–±–µ–¥: {total_wins}
üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%

üíé –ë–∞–ª–∞–Ω—Å—ã:
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} –∑–≤–µ–∑–¥
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {total_deposited} –∑–≤–µ–∑–¥
üíµ –†–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏: {total_real_money} Stars
    """
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(stats_text, reply_markup=reply_markup)

async def admin_users_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É
    top_users = sorted(user_data.items(), key=lambda x: x[1]['game_balance'], reverse=True)[:10]
    
    users_text = "üë§ –¢–û–ü-10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û –ë–ê–õ–ê–ù–°–£:\n\n"
    
    for i, (uid, data) in enumerate(top_users, 1):
        users_text += f"{i}. ID: {uid} | üí∞: {data['game_balance']} | üéÆ: {data['total_games']}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(users_text, reply_markup=reply_markup)

async def admin_add_balance_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    add_balance_text = """
üíé –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø

–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/addbalance <user_id> <amount>`

–ü—Ä–∏–º–µ—Ä:
`/addbalance 123456789 100`

–≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç 100 –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID 123456789
    """
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(add_balance_text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_reset_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    reset_text = """
üîÑ –°–ë–†–û–° –î–ê–ù–ù–´–•

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞?
–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –±–∞–ª–∞–Ω—Å—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data="admin_reset")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(reset_text, reply_markup=reply_markup)

async def admin_reset_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
    current_admin = user_id
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data.clear()
    user_activity.clear()
    consecutive_wins.clear()
    admin_mode.clear()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    admin_mode[current_admin] = True
    
    save_data()
    
    await query.edit_message_text(
        "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!\n\n"
        "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —á–∏—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."
    )

async def admin_play_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    games_text = "üëë –ê–î–ú–ò–ù - –ë–ï–°–ü–õ–ê–¢–ù–´–ï –ò–ì–†–´\n\nüéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:"
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_slots")],
        [InlineKeyboardButton("üéØ –î–∞—Ä—Ç—Å (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_dart")],
        [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫ (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_dice")],
        [InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥ (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_bowling")],
        [InlineKeyboardButton("‚öΩ –§—É—Ç–±–æ–ª (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_football")],
        [InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_basketball")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(games_text, reply_markup=reply_markup)

async def admin_handle_game_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    game_type = query.data.replace("admin_play_", "")
    
    # –í —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    game_emojis = {
        'slots': 'üé∞', 'dart': 'üéØ', 'dice': 'üé≤',
        'bowling': 'üé≥', 'football': '‚öΩ', 'basketball': 'üèÄ'
    }
    
    emoji = game_emojis.get(game_type, 'üé∞')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    context.user_data['expecting_dice'] = True
    context.user_data['last_game_type'] = game_type
    context.user_data['last_game_user_id'] = user_id
    context.user_data['last_game_emoji'] = emoji
    context.user_data['last_game_cost'] = 0  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    
    dice_message = await context.bot.send_dice(chat_id=query.message.chat_id, emoji=emoji)
    context.user_data['last_dice_message_id'] = dice_message.message_id
    
    await query.edit_message_text(
        f"üëë –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º - –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! {emoji}\n"
        f"üí∏ –°–ø–∏—Å–∞–Ω–æ: 0 –∑–≤–µ–∑–¥ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥"
    )

# üîß –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
async def add_balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return
    
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance <user_id> <amount>")
        return
    
    try:
        target_user_id = int(context.args[0])
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: user_id –∏ amount –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    if target_user_id not in user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data[target_user_id]['game_balance'] += amount
    user_data[target_user_id]['total_deposited'] += amount
    
    save_data()
    
    await update.message.reply_text(
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –∑–≤–µ–∑–¥\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data[target_user_id]['game_balance']} –∑–≤–µ–∑–¥"
    )

# üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    callback_data = query.data
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º play_games –æ—Ç–¥–µ–ª—å–Ω–æ
    if callback_data == 'play_games':
        await play_games_callback(update, context)
    
    # –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
    elif callback_data.startswith('admin_'):
        if callback_data == 'admin_panel':
            await admin_panel(update, context)
        elif callback_data == 'admin_play':
            await admin_play_callback(update, context)
        elif callback_data == 'admin_stats':
            await admin_stats_callback(update, context)
        elif callback_data == 'admin_users':
            await admin_users_callback(update, context)
        elif callback_data == 'admin_add_balance':
            await admin_add_balance_callback(update, context)
        elif callback_data == 'admin_reset_confirm':
            await admin_reset_confirm_callback(update, context)
        elif callback_data == 'admin_reset':
            await admin_reset_callback(update, context)
        elif callback_data.startswith('admin_play_'):
            await admin_handle_game_selection(update, context)
        elif callback_data == 'admin_back':
            await admin_panel(update, context)
        elif callback_data == 'admin_exit':
            user_id = query.from_user.id
            admin_mode[user_id] = False
            await query.edit_message_text("üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    # –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
    elif callback_data.startswith('buy_'):
        await handle_deposit_selection(update, context)
    elif callback_data.startswith('play_'):
        await handle_game_selection(update, context)
    elif callback_data == 'deposit':
        await deposit_callback(update, context)
    elif callback_data == 'back_to_profile':
        await back_to_profile_callback(update, context)

async def back_to_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await profile(update, context)

# üåê FLASK –î–õ–Ø RAILWAY
app = Flask(__name__)

@app.route('/')
def home():
    return "üé∞ NSource Casino Bot - –ü–æ–ª–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞!"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
def main():
    load_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("deposit", deposit_command))
    application.add_handler(CommandHandler("activity", activity_command))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("addbalance", add_balance_command))
    
    # CALLBACK'–ò
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –ü–õ–ê–¢–ï–ñ–ò
    application.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    
    # –°–û–û–ë–©–ï–ù–ò–Ø - –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(üé∞|üéØ|üé≤|üé≥|‚öΩ|üèÄ)$"), handle_game_emoji))
    application.add_handler(MessageHandler(filters.Dice.ALL, handle_dice_result))
    
    print("üé∞ NSource Casino Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã: üé∞ üéØ üé≤ üé≥ ‚öΩ üèÄ")
    print("üí∞ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É —ç–º–æ–¥–∑–∏!")
    application.run_polling()

if __name__ == '__main__':
    main()
