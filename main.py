import os
import json
import random
import datetime
import asyncio
from collections import defaultdict
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, PreCheckoutQueryHandler
from threading import Thread
from flask import Flask

# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8378526693:AAFOwAb6pVp1GOE0tXZN4PDLFnD_TTT1djg")
PROVIDER_TOKEN = os.environ.get("PROVIDER_TOKEN", "TEST_PROVIDER_TOKEN")
ADMIN_CODE = os.environ.get("ADMIN_CODE", "1337")

# üéØ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ò –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –°–¢–ê–í–ö–ê
MIN_BET = 1
MAX_BET = 100000

# ‚è±Ô∏è –í–†–ï–ú–Ø –ê–ù–ò–ú–ê–¶–ò–ò –î–õ–Ø –ö–ê–ñ–î–û–ô –ò–ì–†–´ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
DICE_DELAYS = {
    "üé∞": 1.5,  # –°–ª–æ—Ç—ã - —Å–∞–º–∞—è –¥–æ–ª–≥–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
    "üéØ": 2.5,  # –î–∞—Ä—Ç—Å
    "üé≤": 2.5,  # –ö—É–±–∏–∫
    "üé≥": 3.5,  # –ë–æ—É–ª–∏–Ω–≥
    "‚öΩ": 3.5,  # –§—É—Ç–±–æ–ª
    "üèÄ": 3.5   # –ë–∞—Å–∫–µ—Ç–±–æ–ª
}

# üí∞ –ü–ê–ö–ï–¢–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø (1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 –∏–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞)
PRODUCTS = {
    "pack_5": {"title": "5 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 5 ‚≠ê", "price": 5, "currency": "XTR", "credits": 5},
    "pack_10": {"title": "10 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 10 ‚≠ê", "price": 10, "currency": "XTR", "credits": 10},
    "pack_25": {"title": "25 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 25 ‚≠ê", "price": 25, "currency": "XTR", "credits": 25},
    "pack_50": {"title": "50 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 50 ‚≠ê", "price": 50, "currency": "XTR", "credits": 50},
    "pack_100": {"title": "100 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 100 ‚≠ê", "price": 100, "currency": "XTR", "credits": 100},
    "pack_250": {"title": "250 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 250 ‚≠ê", "price": 250, "currency": "XTR", "credits": 250},
    "pack_500": {"title": "500 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 500 ‚≠ê", "price": 500, "currency": "XTR", "credits": 500},
    "pack_1000": {"title": "1000 ‚≠ê", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 1000 ‚≠ê", "price": 1000, "currency": "XTR", "credits": 1000}
}

# üéÅ –í–´–í–û–î –°–†–ï–î–°–¢–í - –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–£–ú–ú–ê –ò –í–ê–†–ò–ê–ù–¢–´
MIN_WITHDRAWAL = 15
WITHDRAWAL_AMOUNTS = [15, 25, 50, 100]

# üéÆ –ë–ê–ó–û–í–´–ï –í–´–ò–ì–†–´–®–ò –î–õ–Ø –°–¢–ê–í–ö–ò 1 ‚≠ê
BASE_PRIZES = {
    "üé∞": {
        "–¢–†–ò –ë–ê–†–ê": 5,
        "–¢–†–ò –í–ò–®–ù–ò": 10, 
        "–¢–†–ò –õ–ò–ú–û–ù–ê": 15,
        "–î–ñ–ï–ö–ü–û–¢ 777": 20
    },
    "üéØ": {"–ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨": 3},
    "üé≤": {"–í–´–ü–ê–õ–û 6": 3},
    "üé≥": {"–°–¢–†–ê–ô–ö": 3},
    "‚öΩ": {
        "–°–õ–ê–ë–´–ô –£–î–ê–†": 0.1,
        "–£–î–ê–† –ú–ò–ú–û": 0.2,
        "–ë–õ–ò–ó–ö–ò–ô –£–î–ê–†": 0.5,
        "–•–û–†–û–®–ò–ô –ì–û–õ": 1.2,
        "–°–£–ü–ï–†–ì–û–õ": 1.5
    },
    "üèÄ": {
        "–ü–†–û–ú–ê–•": 0.1,
        "–ö–ê–°–ê–¢–ï–õ–¨–ù–û": 0.15,
        "–û–¢–°–ö–û–ö": 0.2,
        "–¢–†–ï–•–û–ß–ö–û–í–´–ô": 1.4,
        "–°–õ–≠–ú-–î–ê–ù–ö": 1.4
    }
}

# üé∞ –°–ò–°–¢–ï–ú–ê –°–ï–†–ò–ô –ü–û–ë–ï–î (–î–õ–Ø –í–°–ï–• –ò–ì–†)
WIN_STREAK_BONUSES = {
    2: {"multiplier": 1.25, "message": "üî• –°–µ—Ä–∏—è –∏–∑ 2 –ø–æ–±–µ–¥! –ë–æ–Ω—É—Å +25% –∫ –≤—ã–∏–≥—Ä—ã—à—É!"},
    3: {"multiplier": 1.5, "message": "üî•üî• –°–µ—Ä–∏—è –∏–∑ 3 –ø–æ–±–µ–¥! –ë–æ–Ω—É—Å +50% –∫ –≤—ã–∏–≥—Ä—ã—à—É!"},
    5: {"multiplier": 2.0, "message": "üî•üî•üî• –°–ï–†–ò–Ø –ò–ó 5 –ü–û–ë–ï–î! –ú–ï–ì–ê –ë–û–ù–£–° +100% –∫ –≤—ã–∏–≥—Ä—ã—à—É!"}
}

# üéÅ –°–ò–°–¢–ï–ú–ê –°–õ–£–ß–ê–ô–ù–´–• –ú–ï–ì–ê-–í–´–ò–ì–†–´–®–ï–ô (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø)
MEGA_WIN_CONFIG = {
    "chance": 0.015,  # 1.5% —à–∞–Ω—Å –Ω–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à (—Å–Ω–∏–∂–µ–Ω–æ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞)
    "min_multiplier": 2,
    "max_multiplier": 8  # —Å–Ω–∏–∂–µ–Ω–æ —Å 10 –¥–æ 8 –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
}

# üîÑ –°–ò–°–¢–ï–ú–ê –í–û–ó–í–†–ê–¢–û–í –ü–†–ò –ü–†–û–ò–ì–†–´–®–ï (0-20% –æ—Ç —Å—Ç–∞–≤–∫–∏)
REFUND_CONFIG = {
    "min_refund": 0.0,   # 0% –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
    "max_refund": 0.2    # 20% –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
}

# üéÆ –ü–û–õ–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ì–† (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø)
GAMES_CONFIG = {
    "üé∞": {
        "values": {
            # –û–ë–´–ß–ù–´–ï –°–õ–û–¢–´ - 64 –∑–Ω–∞—á–µ–Ω–∏—è, 4 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö
            1: {"win": True, "base_prize": BASE_PRIZES["üé∞"]["–¢–†–ò –ë–ê–†–ê"], "message": "üé∞ –¢–†–ò –ë–ê–†–ê! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #2 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            3: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #3 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            4: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #4 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            5: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #5 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            6: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #6 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            7: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #7 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            8: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #8 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            9: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #9 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            10: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #10 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            11: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #11 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            12: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #12 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            13: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #13 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            14: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #14 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            15: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #15 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            16: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #16 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            17: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #17 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            18: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #18 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            19: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #19 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            20: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #20 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            21: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #21 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            22: {"win": True, "base_prize": BASE_PRIZES["üé∞"]["–¢–†–ò –í–ò–®–ù–ò"], "message": "üé∞ –¢–†–ò –í–ò–®–ù–ò! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            23: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #23 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            24: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #24 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            25: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #25 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            26: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #26 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            27: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #27 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            28: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #28 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            29: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #29 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            30: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #30 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            31: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #31 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            32: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #32 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            33: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #33 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            34: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #34 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            35: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #35 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            36: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #36 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            37: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #37 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            38: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #38 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            39: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #39 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            40: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #40 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            41: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #41 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            42: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #42 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            43: {"win": True, "base_prize": BASE_PRIZES["üé∞"]["–¢–†–ò –õ–ò–ú–û–ù–ê"], "message": "üé∞ –¢–†–ò –õ–ò–ú–û–ù–ê! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            44: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #44 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            45: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #45 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            46: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #46 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            47: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #47 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            48: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #48 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            49: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #49 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            50: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #50 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            51: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #51 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            52: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #52 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            53: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #53 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            54: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #54 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            55: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #55 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            56: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #56 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            57: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #57 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            58: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #58 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            59: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #59 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            60: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #60 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            61: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #61 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            62: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #62 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            63: {"win": False, "base_prize": 0, "message": "üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è #63 - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            64: {"win": True, "base_prize": BASE_PRIZES["üé∞"]["–î–ñ–ï–ö–ü–û–¢ 777"], "message": "üé∞ –î–ñ–ï–ö–ü–û–¢ 777! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"}
        }
    },
    "üéØ": {
        "values": {
            # –î–ê–†–¢–° - 6 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (6)
            1: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            2: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            3: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            4: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            5: {"win": False, "base_prize": 0, "message": "üéØ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            6: {"win": True, "base_prize": BASE_PRIZES["üéØ"]["–ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨"], "message": "üéØ - –ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"}
        }
    },
    "üé≤": {
        "values": {
            # –ö–û–°–¢–ò - 6 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (6)
            1: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            2: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            3: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            4: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            5: {"win": False, "base_prize": 0, "message": "üé≤ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            6: {"win": True, "base_prize": BASE_PRIZES["üé≤"]["–í–´–ü–ê–õ–û 6"], "message": "üé≤ - –í–´–ü–ê–õ–û 6! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"}
        }
    },
    "üé≥": {
        "values": {
            # –ë–û–£–õ–ò–ù–ì - 6 –∑–Ω–∞—á–µ–Ω–∏–π, 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (6)
            1: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            2: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            3: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            4: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            5: {"win": False, "base_prize": 0, "message": "üé≥ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            6: {"win": True, "base_prize": BASE_PRIZES["üé≥"]["–°–¢–†–ê–ô–ö"], "message": "üé≥ - –°–¢–†–ê–ô–ö! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"}
        }
    },
    "‚öΩ": {
        "values": {
            # –§–£–¢–ë–û–õ - 5 –∑–Ω–∞—á–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ 3 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö (–≥–æ–ª—ã)
            1: {"win": False, "base_prize": BASE_PRIZES["‚öΩ"]["–°–õ–ê–ë–´–ô –£–î–ê–†"], "message": "‚öΩ –°–ª–∞–±—ã–π —É–¥–∞—Ä... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": BASE_PRIZES["‚öΩ"]["–£–î–ê–† –ú–ò–ú–û"], "message": "‚öΩ –£–¥–∞—Ä –º–∏–º–æ –≤–æ—Ä–æ—Ç... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": True, "base_prize": BASE_PRIZES["‚öΩ"]["–ë–õ–ò–ó–ö–ò–ô –£–î–ê–†"], "message": "‚öΩ –ë–ª–∏–∑–∫–æ –∫ –≤–æ—Ä–æ—Ç–∞–º! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            4: {"win": True, "base_prize": BASE_PRIZES["‚öΩ"]["–•–û–†–û–®–ò–ô –ì–û–õ"], "message": "‚öΩ –ì–û–û–û–õ! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            5: {"win": True, "base_prize": BASE_PRIZES["‚öΩ"]["–°–£–ü–ï–†–ì–û–õ"], "message": "‚öΩ –°–£–ü–ï–†–ì–û–û–û–õ! –ú–ï–ì–ê –í–´–ò–ì–†–´–®: {prize} ‚≠ê"}
        }
    },
    "üèÄ": {
        "values": {
            # –ë–ê–°–ö–ï–¢–ë–û–õ - 5 –∑–Ω–∞—á–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ 3 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö (–±—Ä–æ—Å–∫–∏)
            1: {"win": False, "base_prize": BASE_PRIZES["üèÄ"]["–ü–†–û–ú–ê–•"], "message": "üèÄ –ü—Ä–æ–º–∞—Ö... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            2: {"win": False, "base_prize": BASE_PRIZES["üèÄ"]["–ö–ê–°–ê–¢–ï–õ–¨–ù–û"], "message": "üèÄ –ö–æ—Å–Ω—É–ª–æ—Å—å –∫–æ–ª—å—Ü–∞... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            3: {"win": False, "base_prize": BASE_PRIZES["üèÄ"]["–ö–ê–°–ê–¢–ï–õ–¨–ù–û"], "message": "üèÄ –ö–æ—Å–Ω—É–ª–æ—Å—å –∫–æ–ª—å—Ü–∞... –í–æ–∑–≤—Ä–∞—Ç: {prize} ‚≠ê"},
            4: {"win": True, "base_prize": BASE_PRIZES["üèÄ"]["–¢–†–ï–•–û–ß–ö–û–í–´–ô"], "message": "üèÄ –¢—Ä–µ—Ö–æ—á–∫–æ–≤—ã–π! –í—ã–∏–≥—Ä—ã—à: {prize} ‚≠ê"},
            5: {"win": True, "base_prize": BASE_PRIZES["üèÄ"]["–°–õ–≠–ú-–î–ê–ù–ö"], "message": "üèÄ –°–õ–≠–ú-–î–ê–ù–ö! –ú–ï–ì–ê –í–´–ò–ì–†–´–®: {prize} ‚≠ê"}
        }
    }
}

# üéÆ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –°–õ–û–¢–û–í 777 (–¢–û–õ–¨–ö–û –î–ñ–ï–ö–ü–û–¢)
SLOTS_777_CONFIG = {
    "üé∞": {
        "values": {
            # –°–õ–û–¢–´ 777 - 64 –∑–Ω–∞—á–µ–Ω–∏—è, –¢–û–õ–¨–ö–û 1 –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ (64) —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –ø—Ä–∏–∑–æ–º
            1: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            2: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            3: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            4: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            5: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            6: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            7: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            8: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            9: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            10: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            11: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            12: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            13: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            14: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            15: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            16: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            17: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            18: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            19: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            20: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            21: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            22: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            23: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            24: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            25: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            26: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            27: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            28: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            29: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            30: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            31: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            32: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            33: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            34: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            35: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            36: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            37: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            38: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            39: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            40: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            41: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            42: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            43: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            44: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            45: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            46: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            47: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            48: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            49: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            50: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            51: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            52: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            53: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            54: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            55: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            56: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            57: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            58: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            59: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            60: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            61: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            62: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            63: {"win": False, "base_prize": 0, "message": "üé∞ - –ø—Ä–æ–∏–≥—Ä—ã—à"},
            64: {"win": True, "base_prize": 50, "message": "üé∞ –î–ñ–ï–ö–ü–û–¢ 777! –ú–ï–ì–ê –í–´–ò–ì–†–´–®: {prize} ‚≠ê"}  # 50x —Å—Ç–∞–≤–∫–∏
        }
    }
}

# üóÉÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•
user_data = defaultdict(lambda: {
    'game_balance': 0.0,
    'total_games': 0,
    'total_wins': 0,
    'total_deposited': 0,
    'real_money_spent': 0,
    'current_bet': 5,
    'registration_date': datetime.datetime.now().isoformat(),
    'last_activity': datetime.datetime.now().isoformat(),
    'slots_mode': 'normal',
    'win_streak': 0,
    'max_win_streak': 0,
    'mega_wins_count': 0,
    'total_mega_win_amount': 0.0
})

user_activity = defaultdict(lambda: {
    'last_play_date': None,
    'consecutive_days': 0,
    'plays_today': 0,
    'weekly_reward_claimed': False
})

admin_mode = defaultdict(bool)
user_sessions = defaultdict(dict)
withdrawal_requests = defaultdict(list)

# üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•
def save_data():
    try:
        data = {
            'user_data': dict(user_data),
            'user_activity': dict(user_activity),
            'admin_mode': dict(admin_mode),
            'withdrawal_requests': dict(withdrawal_requests)
        }
        with open('data.json', 'w') as f:
            json.dump(data, f, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def load_data():
    try:
        with open('data.json', 'r') as f:
            data = json.load(f)
            user_data.update(data.get('user_data', {}))
            user_activity.update(data.get('user_activity', {}))
            admin_mode.update(data.get('admin_mode', {}))
            withdrawal_requests.update(data.get('withdrawal_requests', {}))
    except FileNotFoundError:
        pass

# üéÅ –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò
WEEKLY_REWARDS = [15, 25, 50]

def update_daily_activity(user_id: int):
    today = datetime.datetime.now().date()
    activity = user_activity[user_id]
    
    if activity['last_play_date'] != str(today):
        if activity['last_play_date']:
            last_play = datetime.datetime.fromisoformat(activity['last_play_date']).date()
            if (today - last_play).days == 1 and activity['plays_today'] >= 3:
                activity['consecutive_days'] += 1
            elif (today - last_play).days > 1:
                activity['consecutive_days'] = 0
        else:
            activity['consecutive_days'] = 0
        
        activity['plays_today'] = 0
        activity['last_play_date'] = str(today)
        activity['weekly_reward_claimed'] = False
    
    activity['plays_today'] += 1
    
    if (activity['consecutive_days'] >= 7 and 
        activity['plays_today'] >= 3 and 
        not activity['weekly_reward_claimed']):
        
        reward = random.choice(WEEKLY_REWARDS)
        user_data[user_id]['game_balance'] += reward
        activity['consecutive_days'] = 0
        activity['weekly_reward_claimed'] = True
        save_data()
        return reward
    
    return None

# üé∞ –°–ò–°–¢–ï–ú–ê –°–ï–†–ò–ô –ü–û–ë–ï–î, –ú–ï–ì–ê-–í–´–ò–ì–†–´–®–ï–ô –ò –í–û–ó–í–†–ê–¢–û–í
def calculate_win_bonuses(user_id: int, base_prize: float, bet: int, emoji: str, is_win: bool) -> tuple:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å—ã –∑–∞ —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥, —Å–ª—É—á–∞–π–Ω—ã–µ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π_–ø—Ä–∏–∑, —Å–æ–æ–±—â–µ–Ω–∏—è_–æ_–±–æ–Ω—É—Å–∞—Ö)
    """
    user = user_data[user_id]
    bonus_messages = []
    
    # –ë–∞–∑–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à
    base_win_amount = base_prize * bet
    
    # üîÑ –°–ò–°–¢–ï–ú–ê –í–û–ó–í–†–ê–¢–û–í –ü–†–ò –ü–†–û–ò–ì–†–´–®–ï (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ is_win=False)
    if not is_win:
        refund_percent = random.uniform(REFUND_CONFIG["min_refund"], REFUND_CONFIG["max_refund"])
        refund_amount = round(bet * refund_percent, 1)
        base_win_amount = refund_amount
        bonus_messages.append(f"üîÑ –í–æ–∑–≤—Ä–∞—Ç {refund_percent*100:.1f}% –æ—Ç —Å—Ç–∞–≤–∫–∏: {refund_amount} ‚≠ê")
    
    # üî• –°–ò–°–¢–ï–ú–ê –°–ï–†–ò–ô –ü–û–ë–ï–î (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –≤—ã–∏–≥—Ä—ã—à–µ)
    if is_win and base_prize > 0:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –í–´–ò–ì–†–´–®–ï (–Ω–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ)
        user['win_streak'] += 1
        user['max_win_streak'] = max(user['max_win_streak'], user['win_streak'])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞ —Å–µ—Ä–∏–∏
        for streak, bonus in WIN_STREAK_BONUSES.items():
            if user['win_streak'] == streak:
                streak_multiplier = bonus["multiplier"]
                base_win_amount *= streak_multiplier
                bonus_messages.append(bonus["message"])
                break
    else:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é –ø—Ä–∏ –ü–†–û–ò–ì–†–´–®–ï –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
        if user['win_streak'] > 0:
            bonus_messages.append(f"üíî –°–µ—Ä–∏—è –ø–æ–±–µ–¥ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –Ω–∞ {user['win_streak']}!")
        user['win_streak'] = 0
    
    # üéâ –°–ò–°–¢–ï–ú–ê –°–õ–£–ß–ê–ô–ù–´–• –ú–ï–ì–ê-–í–´–ò–ì–†–´–®–ï–ô (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –≤—ã–∏–≥—Ä—ã—à–µ)
    if is_win and base_prize > 0 and random.random() < MEGA_WIN_CONFIG["chance"]:
        mega_multiplier = random.randint(MEGA_WIN_CONFIG["min_multiplier"], MEGA_WIN_CONFIG["max_multiplier"])
        base_win_amount *= mega_multiplier
        user['mega_wins_count'] += 1
        user['total_mega_win_amount'] += base_win_amount - (base_prize * bet)
        
        bonus_messages.append(f"üéâ –ú–ï–ì–ê-–í–´–ò–ì–†–´–®! x{mega_multiplier} –∫ –≤—ã–∏–≥—Ä—ã—à—É!")
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–µ—Å—è—Ç—ã—Ö
    final_prize = round(base_win_amount, 1)
    
    return final_prize, bonus_messages

# üë§ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üé∞ NSource Casino

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!

üéÅ –ù–û–í–´–ï –°–ò–°–¢–ï–ú–´:
‚Ä¢ üî• –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥ - –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥ (–≤–æ –≤—Å–µ—Ö –∏–≥—Ä–∞—Ö)
‚Ä¢ üéâ –°–ª—É—á–∞–π–Ω—ã–µ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∏ - —à–∞–Ω—Å —É–≤–µ–ª–∏—á–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à –≤ 2-8 —Ä–∞–∑!
‚Ä¢ üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã 0-20% - –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –ø–æ–ª—É—á–∞–π—Ç–µ —á–∞—Å—Ç—å —Å—Ç–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã (—Å—Ç–∞–≤–∫–∞ –æ—Ç 1 –¥–æ 100000 ‚≠ê):
üé∞ –°–ª–æ—Ç—ã - 64 –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, 4 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö (5-20x —Å—Ç–∞–≤–∫–∏)
üé∞ –°–ª–æ—Ç—ã 777 - —Ç–æ–ª—å–∫–æ –¥–∂–µ–∫–ø–æ—Ç 777 (50x —Å—Ç–∞–≤–∫–∏)
üéØ –î–∞—Ä—Ç—Å - –ø–æ–±–µ–¥–∞ –Ω–∞ 6 (3x —Å—Ç–∞–≤–∫–∏)
üé≤ –ö—É–±–∏–∫ - –ø–æ–±–µ–¥–∞ –Ω–∞ 6 (3x —Å—Ç–∞–≤–∫–∏)
üé≥ –ë–æ—É–ª–∏–Ω–≥ - –ø–æ–±–µ–¥–∞ –Ω–∞ 6 (3x —Å—Ç–∞–≤–∫–∏)
‚öΩ –§—É—Ç–±–æ–ª - 2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –≥–æ–ª–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º
üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª - 2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –±—Ä–æ—Å–∫–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º

üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 1:1
1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 ‚≠ê

üéÅ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
–ò–≥—Ä–∞–π 3+ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (15-50 ‚≠ê)

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–π dice —ç–º–æ–¥–∑–∏ –∏–≥—Ä—ã —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!
    """
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
        [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    data = user_data[user_id]
    
    win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
    
    slots_mode = data.get('slots_mode', 'normal')
    slots_mode_text = "üé∞ –û–±—ã—á–Ω—ã–µ" if slots_mode == 'normal' else "üé∞ –°–ª–æ—Ç—ã 777"
    
    profile_text = f"""
üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üë§ –ò–º—è: {user.first_name}
üÜî ID: {user_id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {data['registration_date'][:10]}
üéÆ –†–µ–∂–∏–º —Å–ª–æ—Ç–æ–≤: {slots_mode_text}

üíé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üí∞ –ë–∞–ª–∞–Ω—Å: {round(data['game_balance'], 1)} ‚≠ê
üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {data['current_bet']} ‚≠ê
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {data['total_games']}
üèÜ –ü–æ–±–µ–¥: {data['total_wins']}
üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {data['total_deposited']} ‚≠ê

üî• –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤:
üìä –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {data['win_streak']}
üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {data['max_win_streak']}
üéâ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {data['mega_wins_count']}
üí´ –°—É–º–º–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {round(data['total_mega_win_amount'], 1)} ‚≠ê
    """
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit"),
         InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ ‚≠ê", callback_data="withdraw")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")]
    ]
    
    if admin_mode.get(user_id, False):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(profile_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(profile_text, reply_markup=reply_markup)

# üí∏ –°–ò–°–¢–ï–ú–ê –í–´–í–û–î–ê –°–†–ï–î–°–¢–í
async def withdraw_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = round(user_data[user_id]['game_balance'], 1)
    
    if balance < MIN_WITHDRAWAL:
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê\n"
            f"üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚≠ê\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥!"
        )
        return
    
    withdraw_text = f"""
üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê
üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚≠ê

üéÅ –ü—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram Stars!

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:
    """
    
    keyboard = []
    for amount in WITHDRAWAL_AMOUNTS:
        if balance >= amount:
            keyboard.append([InlineKeyboardButton(f"{amount} ‚≠ê", callback_data=f"withdraw_{amount}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(withdraw_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(withdraw_text, reply_markup=reply_markup)

async def withdraw_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    balance = round(user_data[user_id]['game_balance'], 1)
    
    if balance < MIN_WITHDRAWAL:
        await query.edit_message_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê\n"
            f"üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚≠ê\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
                [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
            ])
        )
        return
    
    withdraw_text = f"""
üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê
üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚≠ê

üéÅ –ü—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram Stars!

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:
    """
    
    keyboard = []
    for amount in WITHDRAWAL_AMOUNTS:
        if balance >= amount:
            keyboard.append([InlineKeyboardButton(f"{amount} ‚≠ê", callback_data=f"withdraw_{amount}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(withdraw_text, reply_markup=reply_markup)

async def handle_withdraw_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    amount = int(query.data.split('_')[1])
    balance = round(user_data[user_id]['game_balance'], 1)
    
    if balance < amount:
        await query.edit_message_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="withdraw")]
            ])
        )
        return
    
    context.user_data['withdraw_amount'] = amount
    context.user_data['withdraw_user_id'] = user_id
    
    gifts_count = amount // 15
    gifts_count = max(1, gifts_count)
    
    confirm_text = f"""
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞

üí∏ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {amount} ‚≠ê
üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {gifts_count}

üí∞ –ë–∞–ª–∞–Ω—Å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è: {balance} ‚≠ê
üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: {round(balance - amount, 1)} ‚≠ê

–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {amount} ‚≠ê –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {gifts_count} —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram Stars!
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="confirm_withdraw")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="withdraw")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(confirm_text, reply_markup=reply_markup)

async def confirm_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = context.user_data.get('withdraw_user_id')
    amount = context.user_data.get('withdraw_amount')
    
    if not user_id or not amount:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
        return
    
    if user_data[user_id]['game_balance'] < amount:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    
    user_data[user_id]['game_balance'] -= amount
    
    gifts_count = amount // 15
    gifts_count = max(1, gifts_count)
    
    withdrawal_request = {
        'user_id': user_id,
        'amount': amount,
        'gifts_count': gifts_count,
        'timestamp': datetime.datetime.now().isoformat(),
        'status': 'completed'
    }
    
    if user_id not in withdrawal_requests:
        withdrawal_requests[user_id] = []
    withdrawal_requests[user_id].append(withdrawal_request)
    
    save_data()
    
    success_text = f"""
üéâ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üí∏ –°–ø–∏—Å–∞–Ω–æ: {amount} ‚≠ê
üéÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {gifts_count}
üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê

üì¶ –í–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–∞—Ä–∫–∏" –≤ Telegram.

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–≥—Ä—É! üé∞
    """
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(success_text, reply_markup=reply_markup)
    
    print(f"üí∞ –í–´–í–û–î: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–≤–µ–ª {amount} ‚≠ê, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {gifts_count} –ø–æ–¥–∞—Ä–∫–æ–≤")

# üéØ –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–¢–ê–í–ö–ò
async def bet_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text(
            f"üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user_data[user_id]['current_bet']} ‚≠ê\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bet <—Å—É–º–º–∞>\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET} ‚≠ê\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MAX_BET} ‚≠ê"
        )
        return
    
    try:
        new_bet = int(context.args[0])
        
        if new_bet < MIN_BET:
            await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET} ‚≠ê")
            return
            
        if new_bet > MAX_BET:
            await update.message.reply_text(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MAX_BET} ‚≠ê")
            return
            
        user_data[user_id]['current_bet'] = new_bet
        save_data()
        
        await update.message.reply_text(f"‚úÖ –°—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_bet} ‚≠ê")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

# üìä –ö–û–ú–ê–ù–î–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò
async def activity_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    activity_data = user_activity[user_id]
    
    today = datetime.datetime.now().date()
    plays_remaining = max(0, 3 - activity_data['plays_today'])
    
    activity_text = f"""
üìä –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

üéÆ –°—ã–≥—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {activity_data['plays_today']}/3
üìÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {activity_data['consecutive_days']}/7
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä –¥–ª—è –∑–∞—á–µ—Ç–∞: {plays_remaining}

üéÅ –ò–≥—Ä–∞–π—Ç–µ 3+ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!
    """
    
    if activity_data['weekly_reward_claimed']:
        activity_text += "\n‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞!"
    
    await update.message.reply_text(activity_text)

# üí∞ –°–ò–°–¢–ï–ú–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
async def deposit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_data[user_id]
    
    deposit_text = f"""
üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(data['game_balance'], 1)} ‚≠ê

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
üí´ 1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 ‚≠ê
    """
    
    keyboard = []
    for product_key, product in PRODUCTS.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{product['title']} - {product['price']} Stars", 
                callback_data=f"buy_{product_key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(deposit_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(deposit_text, reply_markup=reply_markup)

async def deposit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    current_balance = round(user_data[user_id]['game_balance'], 1)
    
    deposit_text = f"""
üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} ‚≠ê

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
üí´ 1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 ‚≠ê
    """
    
    keyboard = []
    for product_key, product in PRODUCTS.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{product['title']} - {product['price']} Stars", 
                callback_data=f"buy_{product_key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(deposit_text, reply_markup=reply_markup)

async def handle_deposit_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    product_key = query.data.replace("buy_", "")
    product = PRODUCTS[product_key]
    
    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=product["title"],
        description=product["description"],
        payload=product_key,
        provider_token=PROVIDER_TOKEN,
        currency=product["currency"],
        prices=[LabeledPrice(product["title"], product["price"])],
        start_parameter="nsource_casino"
    )

# üí≥ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô
async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    user_id = update.effective_user.id
    product_key = payment.invoice_payload
    product = PRODUCTS[product_key]
    
    user_data[user_id]['game_balance'] += product["credits"]
    user_data[user_id]['total_deposited'] += product["credits"]
    user_data[user_id]['real_money_spent'] += product["price"]
    
    save_data()
    
    await update.message.reply_text(
        f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!\n\n"
        f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: {product['price']} Stars\n"
        f"üíé –ó–∞—á–∏—Å–ª–µ–Ω–æ: {product['credits']} ‚≠ê\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n\n"
        f"üéÆ –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!"
    )

# üéÆ –°–ò–°–¢–ï–ú–ê –ò–ì–†
async def play_games_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    balance = round(user_data[user_id]['game_balance'], 1)
    current_bet = user_data[user_id]['current_bet']
    slots_mode = user_data[user_id].get('slots_mode', 'normal')
    
    slots_mode_text = "–û–±—ã—á–Ω—ã–µ" if slots_mode == 'normal' else "777"
    
    games_text = f"""
üéÆ –í—ã–±–æ—Ä –∏–≥—Ä—ã

üíé –ë–∞–ª–∞–Ω—Å: {balance} ‚≠ê
üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_bet} ‚≠ê
üé∞ –†–µ–∂–∏–º —Å–ª–æ—Ç–æ–≤: {slots_mode_text}
üìä –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–∫–∏: {MIN_BET}-{MAX_BET} ‚≠ê

üéÅ –ù–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã:
üî• –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥ - –±–æ–Ω—É—Å—ã –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥ (–≤–æ –≤—Å–µ—Ö –∏–≥—Ä–∞—Ö)
üéâ –°–ª—É—á–∞–π–Ω—ã–µ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∏ - —à–∞–Ω—Å x2-x8!
üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã 0-20% - –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –ø–æ–ª—É—á–∞–π—Ç–µ —á–∞—Å—Ç—å —Å—Ç–∞–≤–∫–∏!

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–π dice —ç–º–æ–¥–∑–∏ –≤ —á–∞—Ç!
    """
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã (4 –≤—ã–∏–≥—Ä—ã—à–∞)", callback_data="play_slots")],
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã 777 (—Ç–æ–ª—å–∫–æ –¥–∂–µ–∫–ø–æ—Ç)", callback_data="play_slots777")],
        [InlineKeyboardButton("üéØ –î–∞—Ä—Ç—Å", callback_data="play_dart")],
        [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫", callback_data="play_dice")],
        [InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥", callback_data="play_bowling")],
        [InlineKeyboardButton("‚öΩ –§—É—Ç–±–æ–ª (2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –≥–æ–ª–∞)", callback_data="play_football")],
        [InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª (2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –±—Ä–æ—Å–∫–∞)", callback_data="play_basketball")],
        [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
        [InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(games_text, reply_markup=reply_markup)

async def handle_game_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    game_type = query.data.replace("play_", "")
    current_bet = user_data[user_id]['current_bet']
    
    if game_type == 'slots777':
        user_data[user_id]['slots_mode'] = '777'
        await query.edit_message_text("‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –°–ª–æ—Ç—ã 777! –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã –±—É–¥—É—Ç –≤ —Ä–µ–∂–∏–º–µ 777 (—Ç–æ–ª—å–∫–æ –¥–∂–µ–∫–ø–æ—Ç 777).")
        return
    elif game_type == 'slots':
        user_data[user_id]['slots_mode'] = 'normal'
        await query.edit_message_text("‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –æ–±—ã—á–Ω—ã–µ –°–ª–æ—Ç—ã! –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã –±—É–¥—É—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.")
        return
    
    if user_data[user_id]['game_balance'] < current_bet and not admin_mode.get(user_id, False):
        await query.edit_message_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
            f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet} ‚≠ê\n\n"
            "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
                [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")],
                [InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
            ])
        )
        return
    
    if not admin_mode.get(user_id, False):
        user_data[user_id]['game_balance'] -= current_bet
    
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    game_emojis = {
        'slots': 'üé∞', 
        'slots777': 'üé∞',
        'dart': 'üéØ', 
        'dice': 'üé≤',
        'bowling': 'üé≥', 
        'football': '‚öΩ', 
        'basketball': 'üèÄ'
    }
    
    emoji = game_emojis.get(game_type, 'üé∞')
    
    user_sessions[user_id] = {
        'game_type': game_type,
        'emoji': emoji,
        'bet': current_bet if not admin_mode.get(user_id, False) else 0,
        'message_id': query.message.message_id,
        'chat_id': query.message.chat_id
    }
    
    dice_message = await context.bot.send_dice(chat_id=query.message.chat_id, emoji=emoji)
    
    delay = DICE_DELAYS.get(emoji, 3.0)
    await asyncio.sleep(delay)
    
    await process_dice_result(user_id, emoji, dice_message.dice.value, current_bet if not admin_mode.get(user_id, False) else 0, dice_message, context)
    
    save_data()

async def handle_user_dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user_id = update.effective_user.id
    
    if not message.dice:
        return
    
    emoji = message.dice.emoji
    value = message.dice.value
    
    if emoji not in GAMES_CONFIG:
        return
    
    current_bet = user_data[user_id]['current_bet']
    
    if user_data[user_id]['game_balance'] < current_bet and not admin_mode.get(user_id, False):
        await message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
            f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet} ‚≠ê\n\n"
            "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
                [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")]
            ])
        )
        return
    
    cost = current_bet if not admin_mode.get(user_id, False) else 0
    if not admin_mode.get(user_id, False):
        user_data[user_id]['game_balance'] -= cost
    
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    user_sessions[user_id] = {
        'game_type': 'slots',
        'emoji': emoji,
        'bet': cost,
        'message_id': message.message_id,
        'chat_id': message.chat_id
    }
    
    delay = DICE_DELAYS.get(emoji, 3.0)
    await asyncio.sleep(delay)
    
    await process_dice_result(user_id, emoji, value, cost, message, context)
    
    save_data()

async def process_dice_result(user_id: int, emoji: str, value: int, cost: int, message, context: ContextTypes.DEFAULT_TYPE):
    slots_mode = user_data[user_id].get('slots_mode', 'normal')
    
    if emoji == "üé∞" and slots_mode == '777':
        game_config = SLOTS_777_CONFIG.get(emoji)
    else:
        game_config = GAMES_CONFIG.get(emoji)
        
    if not game_config:
        return
    
    result_config = game_config["values"].get(value)
    if not result_config:
        result_config = {"win": False, "base_prize": 0, "message": f"{emoji} - –ø—Ä–æ–∏–≥—Ä—ã—à"}
    
    base_prize_amount = result_config["base_prize"]
    is_win = result_config["win"]
    
    final_prize, bonus_messages = calculate_win_bonuses(user_id, base_prize_amount, cost, emoji, is_win)
    
    result_text = ""
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è {prize} –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if is_win:
        user_data[user_id]['game_balance'] += final_prize
        user_data[user_id]['total_wins'] += 1
        
        win_message = result_config["message"].format(prize=final_prize)
        
        result_text = (
            f"{win_message}\n\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
            f"üìä (–°–ø–∏—Å–∞–Ω–æ: {cost} ‚≠ê + –í—ã–∏–≥—Ä—ã—à: {final_prize} ‚≠ê)"
        )
        
        if bonus_messages:
            result_text += "\n\n" + "\n".join(bonus_messages)
    else:
        user_data[user_id]['game_balance'] += final_prize
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–∞
        loss_message = result_config["message"].format(prize=final_prize)
        
        result_text = (
            f"{loss_message}\n\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê\n"
            f"üìä (–°–ø–∏—Å–∞–Ω–æ: {cost} ‚≠ê + –í–æ–∑–≤—Ä–∞—Ç: {final_prize} ‚≠ê)"
        )
        
        if bonus_messages:
            result_text += "\n\n" + "\n".join(bonus_messages)
    
    await message.reply_text(result_text)
    
    weekly_reward = update_daily_activity(user_id)
    if weekly_reward:
        user_data[user_id]['game_balance'] += weekly_reward
        await message.reply_text(
            f"üéÅ –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–ê–Ø –ù–ê–ì–†–ê–î–ê!\n\n"
            f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {weekly_reward} ‚≠ê\n"
            f"üíé –ë–∞–ª–∞–Ω—Å: {round(user_data[user_id]['game_balance'], 1)} ‚≠ê"
        )

# üéØ CALLBACK –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–¢–ê–í–ö–ò
async def change_bet_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    current_bet = user_data[user_id]['current_bet']
    
    bet_text = f"""
üéØ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏

üíé –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_bet} ‚≠ê
üìä –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–æ–∫: {MIN_BET}-{MAX_BET} ‚≠ê

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bet <—Å—É–º–º–∞> –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏.

–ü—Ä–∏–º–µ—Ä:
/bet 10 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 10 ‚≠ê
/bet 100 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 100 ‚≠ê
/bet 1000 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 1000 ‚≠ê
    """
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="play_games")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(bet_text, reply_markup=reply_markup)

# üîô CALLBACK –î–õ–ê –í–û–ó–í–†–ê–¢–ê –í –ü–†–û–§–ò–õ–¨
async def back_to_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await profile(update, context)

# üëë –ê–î–ú–ò–ù –°–ò–°–¢–ï–ú–ê
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if len(context.args) == 0:
        return
    
    code = context.args[0]
    if code == ADMIN_CODE:
        admin_mode[user_id] = True
        await update.message.reply_text(
            "üëë –†–ï–ñ–ò–ú –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!\n\n"
            "‚ú® –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã.\n"
            "üéÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!"
        )
    else:
        return

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    total_users = len(user_data)
    total_games = sum(data['total_games'] for data in user_data.values())
    total_balance = sum(round(data['game_balance'], 1) for data in user_data.values())
    total_deposited = sum(data['total_deposited'] for data in user_data.values())
    
    total_win_streaks = sum(data['max_win_streak'] for data in user_data.values())
    total_mega_wins = sum(data['mega_wins_count'] for data in user_data.values())
    total_mega_amount = sum(round(data['total_mega_win_amount'], 1) for data in user_data.values())
    
    admin_text = f"""
üëë –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø

üìä –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}
üíé –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} ‚≠ê
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ –≤—Å–µ–≥–æ: {total_deposited} ‚≠ê

üé∞ –°–ò–°–¢–ï–ú–´ –ë–û–ù–£–°–û–í:
üî• –ú–∞–∫—Å. —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥: {total_win_streaks}
üéâ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {total_mega_wins}
üí´ –°—É–º–º–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {total_mega_amount} ‚≠ê

‚ö° –ë–´–°–¢–†–´–ô –î–û–°–¢–£–ü:
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–∏", callback_data="admin_top"),
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏", callback_data="admin_balance"),
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="admin_search")
        ],
        [
            InlineKeyboardButton("üõ†Ô∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system"),
            InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promo")
        ],
        [
            InlineKeyboardButton("üö´ –ë–∞–Ω-–º–µ–Ω–µ–¥–∂–µ—Ä", callback_data="admin_ban"),
            InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", callback_data="admin_backup")
        ],
        [
            InlineKeyboardButton("üí∏ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_withdrawals"),
            InlineKeyboardButton("üéÆ –¢–µ—Å—Ç –∏–≥—Ä", callback_data="admin_play")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
            InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="admin_exit")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(admin_text, reply_markup=reply_markup)

# üìä –ê–î–ú–ò–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê
async def admin_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    total_users = len(user_data)
    total_games = sum(data['total_games'] for data in user_data.values())
    total_wins = sum(data['total_wins'] for data in user_data.values())
    total_balance = sum(round(data['game_balance'], 1) for data in user_data.values())
    total_deposited = sum(data['total_deposited'] for data in user_data.values())
    total_real_money = sum(data['real_money_spent'] for data in user_data.values())
    
    total_win_streaks = sum(data['max_win_streak'] for data in user_data.values())
    total_mega_wins = sum(data['mega_wins_count'] for data in user_data.values())
    total_mega_amount = sum(round(data['total_mega_win_amount'], 1) for data in user_data.values())
    avg_win_streak = total_win_streaks / total_users if total_users > 0 else 0
    
    total_bet_amount = sum(data['current_bet'] * data['total_games'] for data in user_data.values())
    total_win_amount = total_balance + total_deposited
    rtp = (total_win_amount / total_bet_amount * 100) if total_bet_amount > 0 else 0
    
    win_rate = (total_wins / total_games * 100) if total_games > 0 else 0
    
    richest_user = max(user_data.items(), key=lambda x: x[1]['game_balance'], default=(0, {'game_balance': 0}))
    most_active = max(user_data.items(), key=lambda x: x[1]['total_games'], default=(0, {'total_games': 0}))
    best_streak_user = max(user_data.items(), key=lambda x: x[1]['max_win_streak'], default=(0, {'max_win_streak': 0}))
    most_mega_wins = max(user_data.items(), key=lambda x: x[1]['mega_wins_count'], default=(0, {'mega_wins_count': 0}))
    
    stats_text = f"""
üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ù–æ–≤—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len([uid for uid, data in user_data.items() if datetime.datetime.fromisoformat(data['last_activity']).date() == datetime.datetime.now().date()])}

üéÆ –ò–ì–†–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–±–µ–¥: {total_wins}
‚Ä¢ –û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
‚Ä¢ RTP (Return to Player): {rtp:.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {total_bet_amount // total_games if total_games > 0 else 0} ‚≠ê

üí∞ –§–ò–ù–ê–ù–°–´:
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} ‚≠ê
‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ –≤—Å–µ–≥–æ: {total_deposited} ‚≠ê
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏: {total_real_money} Stars
‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {total_real_money - total_balance} Stars

üé∞ –°–ò–°–¢–ï–ú–´ –ë–û–ù–£–°–û–í:
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–∏–π –ø–æ–±–µ–¥: {total_win_streaks}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–µ—Ä–∏—è: {avg_win_streak:.1f}
‚Ä¢ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {total_mega_wins}
‚Ä¢ –°—É–º–º–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {total_mega_amount} ‚≠ê

üèÜ –†–ï–ö–û–†–î–´:
‚Ä¢ –°–∞–º—ã–π –±–æ–≥–∞—Ç—ã–π: {richest_user[0]} ({round(richest_user[1]['game_balance'], 1)} ‚≠ê)
‚Ä¢ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π: {most_active[0]} ({most_active[1]['total_games']} –∏–≥—Ä)
‚Ä¢ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {best_streak_user[0]} ({best_streak_user[1]['max_win_streak']} –ø–æ–±–µ–¥)
‚Ä¢ –õ–∏–¥–µ—Ä –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {most_mega_wins[0]} ({most_mega_wins[1]['mega_wins_count']} —Ä–∞–∑)
    """
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(stats_text, reply_markup=reply_markup)

# üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
async def admin_users_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    page = int(context.user_data.get('admin_users_page', 0))
    users_per_page = 8
    all_users = list(user_data.items())
    total_pages = (len(all_users) + users_per_page - 1) // users_per_page
    
    start_idx = page * users_per_page
    end_idx = start_idx + users_per_page
    page_users = all_users[start_idx:end_idx]
    
    users_text = f"üë• –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})\n\n"
    
    for i, (uid, data) in enumerate(page_users, start_idx + 1):
        users_text += f"{i}. ID: {uid} | üí∞: {round(data['game_balance'], 1)} ‚≠ê | üéÆ: {data['total_games']} | üî•: {data['win_streak']} | üéâ: {data['mega_wins_count']}\n"
    
    keyboard = []
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_users_prev_{page}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_users_next_{page}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="admin_search")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(users_text, reply_markup=reply_markup)

# üèÜ –¢–û–ü –ò–ì–†–û–ö–û–í
async def admin_top_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    top_balance = sorted(user_data.items(), key=lambda x: x[1]['game_balance'], reverse=True)[:10]
    top_games = sorted(user_data.items(), key=lambda x: x[1]['total_games'], reverse=True)[:10]
    top_wins = sorted(user_data.items(), key=lambda x: x[1]['total_wins'], reverse=True)[:10]
    top_streaks = sorted(user_data.items(), key=lambda x: x[1]['max_win_streak'], reverse=True)[:10]
    top_mega_wins = sorted(user_data.items(), key=lambda x: x[1]['mega_wins_count'], reverse=True)[:10]
    
    top_text = "üèÜ –¢–û–ü –ò–ì–†–û–ö–û–í\n\n"
    
    top_text += "üí∞ –ü–û –ë–ê–õ–ê–ù–°–£:\n"
    for i, (uid, data) in enumerate(top_balance, 1):
        top_text += f"{i}. ID: {uid} - {round(data['game_balance'], 1)} ‚≠ê\n"
    
    top_text += "\nüéÆ –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ò–ì–†:\n"
    for i, (uid, data) in enumerate(top_games, 1):
        top_text += f"{i}. ID: {uid} - {data['total_games']} –∏–≥—Ä\n"
    
    top_text += "\nüèÜ –ü–û –ü–û–ë–ï–î–ê–ú:\n"
    for i, (uid, data) in enumerate(top_wins, 1):
        win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
        top_text += f"{i}. ID: {uid} - {data['total_wins']} –ø–æ–±–µ–¥ ({win_rate:.1f}%)\n"
    
    top_text += "\nüî• –ü–û –°–ï–†–ò–Ø–ú –ü–û–ë–ï–î:\n"
    for i, (uid, data) in enumerate(top_streaks, 1):
        top_text += f"{i}. ID: {uid} - {data['max_win_streak']} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥\n"
    
    top_text += "\nüéâ –ü–û –ú–ï–ì–ê-–í–´–ò–ì–†–´–®–ê–º:\n"
    for i, (uid, data) in enumerate(top_mega_wins, 1):
        top_text += f"{i}. ID: {uid} - {data['mega_wins_count']} –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π\n"
    
    keyboard = [
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(top_text, reply_markup=reply_markup)

# üì¢ –°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–ö–ò
async def admin_broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    broadcast_text = """
üì¢ –°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–ö–ò

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.

üé∞ –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥ —Å –±–æ–Ω—É—Å–∞–º–∏ (–≤–æ –≤—Å–µ—Ö –∏–≥—Ä–∞—Ö)
‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∏ x2-x8
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç—ã 0-20% –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã ‚öΩ –∏ üèÄ

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: 
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
‚Ä¢ –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel
    """
    
    context.user_data['waiting_for_broadcast'] = True
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(broadcast_text, reply_markup=reply_markup)

# üí∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê–ú–ò
async def admin_balance_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    balance_text = """
üí∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê–ú–ò

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/addbalance <user_id> <amount> - –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
/setbalance <user_id> <amount> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
/resetbalance <user_id> - –°–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å

–ü—Ä–∏–º–µ—Ä—ã:
/addbalance 123456789 1000
/setbalance 123456789 5000
/resetbalance 123456789
    """
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(balance_text, reply_markup=reply_markup)

# üîç –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
async def admin_search_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    search_text = """
üîç –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:

/searchid <user_id> - –ù–∞–π—Ç–∏ –ø–æ ID
/searchname <–∏–º—è> - –ù–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
/searchbalance <min> <max> - –ù–∞–π—Ç–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –±–∞–ª–∞–Ω—Å–∞
/searchstreak <min_streak> - –ù–∞–π—Ç–∏ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥
/searchmega <min_mega> - –ù–∞–π—Ç–∏ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π

–ü—Ä–∏–º–µ—Ä—ã:
/searchid 123456789
/searchname John
/searchbalance 100 1000
/searchstreak 5
/searchmega 3
    """
    
    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(search_text, reply_markup=reply_markup)

# üõ†Ô∏è –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
async def admin_system_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    import psutil
    import platform
    
    registration_dates = [datetime.datetime.fromisoformat(data['registration_date']) for data in user_data.values()]
    if registration_dates:
        start_time = min(registration_dates)
        uptime = datetime.datetime.now() - start_time
    else:
        uptime = datetime.timedelta(0)
    
    system_info = f"""
üõ†Ô∏è –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø

üíª –°–ò–°–¢–ï–ú–ê:
‚Ä¢ –û–°: {platform.system()} {platform.release()}
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor() or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ –ü–∞–º—è—Ç—å: {psutil.virtual_memory().percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
‚Ä¢ –î–∏—Å–∫: {psutil.disk_usage('/').percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ

ü§ñ –ë–û–¢:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(user_sessions)}
‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {sum(admin_mode.values())}
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}

üìä –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {psutil.cpu_percent()}%
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {psutil.virtual_memory().used // (1024**3)}GB/{psutil.virtual_memory().total // (1024**3)}GB

üé∞ –°–ò–°–¢–ï–ú–´ –ë–û–ù–£–°–û–í:
‚Ä¢ –®–∞–Ω—Å –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∞: {MEGA_WIN_CONFIG['chance']*100}%
‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∞: {MEGA_WIN_CONFIG['min_multiplier']}-{MEGA_WIN_CONFIG['max_multiplier']}x
‚Ä¢ –ë–æ–Ω—É—Å—ã –∑–∞ —Å–µ—Ä–∏–∏: {len(WIN_STREAK_BONUSES)} —É—Ä–æ–≤–Ω–µ–π
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç—ã –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ: {REFUND_CONFIG['min_refund']*100}%-{REFUND_CONFIG['max_refund']*100}%
    """
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_system")],
        [InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", callback_data="admin_backup")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(system_info, reply_markup=reply_markup)

# üéÅ –°–ò–°–¢–ï–ú–ê –ü–†–û–ú–û–ö–û–î–û–í
async def admin_promo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    promo_text = """
üéÅ –°–ò–°–¢–ï–ú–ê –ü–†–û–ú–û–ö–û–î–û–í

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/promo create <–∫–æ–¥> <—Å—É–º–º–∞> <–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π> - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
/promo delete <–∫–æ–¥> - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
/promo list - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
/promo stats <–∫–æ–¥> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞

–ü—Ä–∏–º–µ—Ä:
/promo create SUMMER2024 100 50
- –°–æ–∑–¥–∞—Å—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 100 ‚≠ê —Å 50 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏
    """
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(promo_text, reply_markup=reply_markup)

# üö´ –ë–ê–ù-–ú–ï–ù–ï–î–ñ–ï–†
async def admin_ban_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    ban_text = """
üö´ –ë–ê–ù-–ú–ï–ù–ï–î–ñ–ï–†

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:

/ban <user_id> <–ø—Ä–∏—á–∏–Ω–∞> - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban <user_id> - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/banlist - –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
/mute <user_id> <–≤—Ä–µ–º—è> - –ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unmute <user_id> - –°–Ω—è—Ç—å –∑–∞–≥–ª—É—à–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
/ban 123456789 –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
/ban 123456789 7d - –±–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π
/mute 123456789 1h - –º—É—Ç –Ω–∞ 1 —á–∞—Å
    """
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(ban_text, reply_markup=reply_markup)

# üíæ –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø
async def admin_backup_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    save_data()
    backup_time = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    
    backup_text = f"""
üíæ –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø

‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
üïê –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {backup_time}

üìä –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}
‚Ä¢ –ò–≥—Ä: {sum(data['total_games'] for data in user_data.values())}
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {sum(round(data['game_balance'], 1) for data in user_data.values())} ‚≠ê
‚Ä¢ –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥: {sum(data['max_win_streak'] for data in user_data.values())}
‚Ä¢ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∏: {sum(data['mega_wins_count'] for data in user_data.values())}

–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /restore
    """
    
    keyboard = [
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å backup", callback_data="admin_download_backup")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(backup_text, reply_markup=reply_markup)

# üí∏ –ó–ê–Ø–í–ö–ò –ù–ê –í–´–í–û–î
async def admin_withdrawals_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    if not withdrawal_requests:
        await query.edit_message_text("üì≠ –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç")
        return
    
    total_withdrawals = 0
    withdrawals_text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:\n\n"
    
    for uid, requests in withdrawal_requests.items():
        for req in requests:
            total_withdrawals += req['amount']
            withdrawals_text += f"üë§ User: {uid}\n"
            withdrawals_text += f"üí∏ –°—É–º–º–∞: {req['amount']} ‚≠ê\n"
            withdrawals_text += f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: {req['gifts_count']}\n"
            withdrawals_text += f"‚è∞ –í—Ä–µ–º—è: {req['timestamp'][:16]}\n"
            withdrawals_text += f"üìä –°—Ç–∞—Ç—É—Å: {req['status']}\n"
            withdrawals_text += "‚îÄ" * 30 + "\n"
    
    withdrawals_text += f"\nüí∞ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: {total_withdrawals} ‚≠ê"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(withdrawals_text, reply_markup=reply_markup)

# üì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ë–≠–ö–ê–ü–ê
async def admin_download_backup_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    backup_filename = f"backup_{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.json"
    
    with open('data.json', 'rb') as file:
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=file,
            filename=backup_filename,
            caption=f"üìä Backup –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞\nüïê {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
    
    await query.message.reply_text("‚úÖ Backup —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# üéÆ –ê–î–ú–ò–ù–°–ö–ò–ï –ò–ì–†–´
async def admin_play_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    games_text = "üëë –ê–î–ú–ò–ù - –ë–ï–°–ü–õ–ê–¢–ù–´–ï –ò–ì–†–´\n\nüéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:"
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_slots")],
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã 777 (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_slots777")],
        [InlineKeyboardButton("üéØ –î–∞—Ä—Ç—Å (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_dart")],
        [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫ (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_dice")],
        [InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥ (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_bowling")],
        [InlineKeyboardButton("‚öΩ –§—É—Ç–±–æ–ª (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_football")],
        [InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_basketball")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(games_text, reply_markup=reply_markup)

# ‚öôÔ∏è –ê–î–ú–ò–ù–°–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò
async def admin_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        return
    
    settings_text = f"""
‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú –ë–û–ù–£–°–û–í

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:

üé∞ –°–ï–†–ò–ò –ü–û–ë–ï–î (–ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º –∏–≥—Ä–∞–º):
‚Ä¢ 2 –ø–æ–±–µ–¥—ã: x{WIN_STREAK_BONUSES[2]['multiplier']}
‚Ä¢ 3 –ø–æ–±–µ–¥—ã: x{WIN_STREAK_BONUSES[3]['multiplier']}  
‚Ä¢ 5 –ø–æ–±–µ–¥: x{WIN_STREAK_BONUSES[5]['multiplier']}

üéâ –ú–ï–ì–ê-–í–´–ò–ì–†–´–®–ò:
‚Ä¢ –®–∞–Ω—Å: {MEGA_WIN_CONFIG['chance']*100}%
‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {MEGA_WIN_CONFIG['min_multiplier']}-{MEGA_WIN_CONFIG['max_multiplier']}x

üîÑ –í–û–ó–í–†–ê–¢–´ –ü–†–ò –ü–†–û–ò–ì–†–´–®–ï:
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç: {REFUND_CONFIG['min_refund']*100}%
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç: {REFUND_CONFIG['max_refund']*100}%

‚öΩ –§–£–¢–ë–û–õ:
‚Ä¢ 2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –≥–æ–ª–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º

üèÄ –ë–ê–°–ö–ï–¢–ë–û–õ:
‚Ä¢ 2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –±—Ä–æ—Å–∫–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º
    """
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(settings_text, reply_markup=reply_markup)

# ‚ùå –í–´–•–û–î –ò–ó –ê–î–ú–ò–ù–ö–ò
async def admin_exit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    admin_mode[user_id] = False
    await query.edit_message_text("üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

# üÜï –ù–û–í–´–ï –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not admin_mode.get(user_id, False):
        return
    
    await admin_stats_callback(update, context)

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not admin_mode.get(user_id, False):
        return
    
    await admin_users_callback(update, context)

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not admin_mode.get(user_id, False):
        return
    
    await admin_top_callback(update, context)

# üëë –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
async def add_balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    if len(context.args) != 2:
        await update.message.reply_text("""
üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance <user_id> <amount>

–ü—Ä–∏–º–µ—Ä—ã:
/addbalance 123456789 1000 - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ 1000 ‚≠ê
/addbalance 123456789 500 - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ 500 ‚≠ê
        """)
        return
    
    try:
        target_user_id = int(context.args[0])
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: user_id –∏ amount –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    if target_user_id not in user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data[target_user_id]['game_balance'] += amount
    user_data[target_user_id]['total_deposited'] += amount
    
    save_data()
    
    await update.message.reply_text(
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} ‚≠ê\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {round(user_data[target_user_id]['game_balance'], 1)} ‚≠ê"
    )

async def set_balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    if len(context.args) != 2:
        await update.message.reply_text("""
üí≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance <user_id> <amount>

–ü—Ä–∏–º–µ—Ä—ã:
/setbalance 123456789 5000 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å 5000 ‚≠ê
/setbalance 123456789 0 - –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å
        """)
        return
    
    try:
        target_user_id = int(context.args[0])
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: user_id –∏ amount –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    if target_user_id not in user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    old_balance = round(user_data[target_user_id]['game_balance'], 1)
    user_data[target_user_id]['game_balance'] = amount
    
    save_data()
    
    await update.message.reply_text(
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∏–∑–º–µ–Ω–µ–Ω\n"
        f"üí∞ –ë—ã–ª–æ: {old_balance} ‚≠ê\n"
        f"üí∞ –°—Ç–∞–ª–æ: {amount} ‚≠ê"
    )

async def reset_balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("""
üîÑ –°–±—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resetbalance <user_id>

–ü—Ä–∏–º–µ—Ä:
/resetbalance 123456789 - —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ 0
        """)
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    if target_user_id not in user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    old_balance = round(user_data[target_user_id]['game_balance'], 1)
    user_data[target_user_id]['game_balance'] = 0
    
    save_data()
    
    await update.message.reply_text(
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–±—Ä–æ—à–µ–Ω\n"
        f"üí∞ –ë—ã–ª–æ: {old_balance} ‚≠ê\n"
        f"üí∞ –°—Ç–∞–ª–æ: 0 ‚≠ê"
    )

async def search_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("""
üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /searchid <user_id>

–ü—Ä–∏–º–µ—Ä:
/searchid 123456789 - –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 123456789
        """)
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    if target_user_id not in user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    data = user_data[target_user_id]
    win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
    
    user_info = f"""
üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

üÜî ID: {target_user_id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {data['registration_date'][:10]}
‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['last_activity'][:16]}

üíé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üí∞ –ë–∞–ª–∞–Ω—Å: {round(data['game_balance'], 1)} ‚≠ê
üéØ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {data['current_bet']} ‚≠ê
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {data['total_games']}
üèÜ –ü–æ–±–µ–¥: {data['total_wins']}
üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {data['total_deposited']} ‚≠ê
üíµ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö: {data['real_money_spent']} Stars

üé∞ –°–∏—Å—Ç–µ–º—ã –±–æ–Ω—É—Å–æ–≤:
üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {data['win_streak']} –ø–æ–±–µ–¥
üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {data['max_win_streak']} –ø–æ–±–µ–¥
üéâ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {data['mega_wins_count']}
üí´ –°—É–º–º–∞ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {round(data['total_mega_win_amount'], 1)} ‚≠ê
    """
    
    await update.message.reply_text(user_info)

# üîç –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ü–û–ò–°–ö–ê
async def search_streak_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("""
üîç –ü–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–∏—è–º –ø–æ–±–µ–¥

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /searchstreak <–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è_—Å–µ—Ä–∏—è>

–ü—Ä–∏–º–µ—Ä:
/searchstreak 5 - –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–∏–µ–π –æ—Ç 5 –ø–æ–±–µ–¥
        """)
        return
    
    try:
        min_streak = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    found_users = []
    for uid, data in user_data.items():
        if data['max_win_streak'] >= min_streak:
            found_users.append((uid, data))
    
    if not found_users:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Å–µ—Ä–∏–µ–π –æ—Ç {min_streak} –ø–æ–±–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    result_text = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Å–µ—Ä–∏–µ–π –æ—Ç {min_streak} –ø–æ–±–µ–¥:\n\n"
    for i, (uid, data) in enumerate(found_users[:20], 1):
        result_text += f"{i}. ID: {uid} | –°–µ—Ä–∏—è: {data['max_win_streak']} | –ë–∞–ª–∞–Ω—Å: {round(data['game_balance'], 1)} ‚≠ê\n"
    
    if len(found_users) > 20:
        result_text += f"\n... –∏ –µ—â–µ {len(found_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await update.message.reply_text(result_text)

async def search_mega_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("""
üîç –ü–æ–∏—Å–∫ –ø–æ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∞–º

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /searchmega <–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>

–ü—Ä–∏–º–µ—Ä:
/searchmega 3 - –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å 3+ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∞–º–∏
        """)
        return
    
    try:
        min_mega = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    found_users = []
    for uid, data in user_data.items():
        if data['mega_wins_count'] >= min_mega:
            found_users.append((uid, data))
    
    if not found_users:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å {min_mega}+ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    result_text = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å {min_mega}+ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∞–º–∏:\n\n"
    for i, (uid, data) in enumerate(found_users[:20], 1):
        result_text += f"{i}. ID: {uid} | –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∏: {data['mega_wins_count']} | –°—É–º–º–∞: {round(data['total_mega_win_amount'], 1)} ‚≠ê\n"
    
    if len(found_users) > 20:
        result_text += f"\n... –∏ –µ—â–µ {len(found_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await update.message.reply_text(result_text)

async def reset_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("""
üîÑ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resetuser <user_id>

–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!

–ü—Ä–∏–º–µ—Ä:
/resetuser 123456789 - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """)
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    if target_user_id not in user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    old_data = user_data[target_user_id].copy()
    
    user_data[target_user_id] = {
        'game_balance': 0.0,
        'total_games': 0,
        'total_wins': 0,
        'total_deposited': 0,
        'real_money_spent': 0,
        'current_bet': 5,
        'registration_date': datetime.datetime.now().isoformat(),
        'last_activity': datetime.datetime.now().isoformat(),
        'slots_mode': 'normal',
        'win_streak': 0,
        'max_win_streak': 0,
        'mega_wins_count': 0,
        'total_mega_win_amount': 0.0
    }
    
    save_data()
    
    await update.message.reply_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω\n\n"
        f"üìä –ë—ã–ª–æ:\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {round(old_data['game_balance'], 1)} ‚≠ê\n"
        f"üéÆ –ò–≥—Ä: {old_data['total_games']}\n"
        f"üèÜ –ü–æ–±–µ–¥: {old_data['total_wins']}\n"
        f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {old_data['total_deposited']} ‚≠ê\n"
        f"üî• –ú–∞–∫—Å. —Å–µ—Ä–∏—è: {old_data['max_win_streak']}\n"
        f"üéâ –ú–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–µ–π: {old_data['mega_wins_count']}"
    )

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("""
üö´ –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id> <–ø—Ä–∏—á–∏–Ω–∞>

–ü—Ä–∏–º–µ—Ä—ã:
/ban 123456789 –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
/ban 123456789 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞
/ban 123456789 –°–ø–∞–º
        """)
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    reason = ' '.join(context.args[1:])
    
    if target_user_id not in user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await update.message.reply_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–∞–Ω–µ–Ω\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        f"üí° –î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unban {target_user_id}"
    )

async def withdrawals_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False):
        return
    
    if not withdrawal_requests:
        await update.message.reply_text("üì≠ –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç")
        return
    
    total_withdrawals = 0
    withdrawals_text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:\n\n"
    
    for uid, requests in withdrawal_requests.items():
        for req in requests:
            total_withdrawals += req['amount']
            withdrawals_text += f"üë§ User: {uid}\n"
            withdrawals_text += f"üí∏ –°—É–º–º–∞: {req['amount']} ‚≠ê\n"
            withdrawals_text += f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: {req['gifts_count']}\n"
            withdrawals_text += f"‚è∞ –í—Ä–µ–º—è: {req['timestamp'][:16]}\n"
            withdrawals_text += f"üìä –°—Ç–∞—Ç—É—Å: {req['status']}\n"
            withdrawals_text += "‚îÄ" * 30 + "\n"
    
    withdrawals_text += f"\nüí∞ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–æ: {total_withdrawals} ‚≠ê"
    
    await update.message.reply_text(withdrawals_text)

# üîß –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–°–°–´–õ–ö–ò
async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not admin_mode.get(user_id, False) or not context.user_data.get('waiting_for_broadcast'):
        return
    
    message_text = update.message.text
    context.user_data['waiting_for_broadcast'] = False
    
    progress_msg = await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    success_count = 0
    fail_count = 0
    
    for uid in user_data:
        try:
            await context.bot.send_message(
                chat_id=uid,
                text=f"üì¢ –û–ë–™–Ø–í–õ–ï–ù–ò–ï –û–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ò:\n\n{message_text}"
            )
            success_count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            fail_count += 1
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    
    await progress_msg.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {success_count + fail_count}"
    )

# üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù–ö–ò
async def handle_admin_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    callback_data = query.data
    
    if callback_data == 'admin_back':
        await admin_panel(update, context)
    elif callback_data == 'admin_stats':
        await admin_stats_callback(update, context)
    elif callback_data == 'admin_users':
        await admin_users_callback(update, context)
    elif callback_data == 'admin_top':
        await admin_top_callback(update, context)
    elif callback_data == 'admin_broadcast':
        await admin_broadcast_callback(update, context)
    elif callback_data == 'admin_balance':
        await admin_balance_callback(update, context)
    elif callback_data == 'admin_search':
        await admin_search_callback(update, context)
    elif callback_data == 'admin_system':
        await admin_system_callback(update, context)
    elif callback_data == 'admin_promo':
        await admin_promo_callback(update, context)
    elif callback_data == 'admin_ban':
        await admin_ban_callback(update, context)
    elif callback_data == 'admin_backup':
        await admin_backup_callback(update, context)
    elif callback_data == 'admin_withdrawals':
        await admin_withdrawals_callback(update, context)
    elif callback_data == 'admin_download_backup':
        await admin_download_backup_callback(update, context)
    elif callback_data == 'admin_play':
        await admin_play_callback(update, context)
    elif callback_data == 'admin_settings':
        await admin_settings_callback(update, context)
    elif callback_data == 'admin_exit':
        await admin_exit_callback(update, context)
    elif callback_data.startswith('admin_play_'):
        await handle_game_selection(update, context)
    elif callback_data.startswith('admin_users_'):
        if 'prev' in callback_data:
            page = int(callback_data.split('_')[-1]) - 1
        else:
            page = int(callback_data.split('_')[-1]) + 1
        context.user_data['admin_users_page'] = page
        await admin_users_callback(update, context)

# üÜò –ö–û–ú–ê–ù–î–ê –ü–û–ú–û–©–ò
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üé∞ *NSource Casino - –ü–æ–º–æ—â—å*

*üéÅ –ù–û–í–´–ï –°–ò–°–¢–ï–ú–´:*
‚Ä¢ *üî• –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥* - –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥ (–≤–æ –≤—Å–µ—Ö –∏–≥—Ä–∞—Ö)
‚Ä¢ *üéâ –°–ª—É—á–∞–π–Ω—ã–µ –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∏* - —à–∞–Ω—Å —É–≤–µ–ª–∏—á–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à –≤ 2-8 —Ä–∞–∑!
‚Ä¢ *üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã 0-20%* - –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –ø–æ–ª—É—á–∞–π—Ç–µ —á–∞—Å—Ç—å —Å—Ç–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ!

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
/deposit - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
/withdraw - –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
/activity - –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
/bet [—Å—É–º–º–∞] - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*
1. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /deposit
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ /bet
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π dice-—ç–º–æ–¥–∑–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏
4. –í—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –±–∞–ª–∞–Ω—Å!

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:*
üé∞ –°–ª–æ—Ç—ã - 64 –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, 4 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö (5-20x —Å—Ç–∞–≤–∫–∏)
üé∞ –°–ª–æ—Ç—ã 777 - —Ç–æ–ª—å–∫–æ –¥–∂–µ–∫–ø–æ—Ç 777 (50x —Å—Ç–∞–≤–∫–∏)
üéØ –î–∞—Ä—Ç—Å - –ü–æ–±–µ–¥–∞ –Ω–∞ 6 (3x —Å—Ç–∞–≤–∫–∏)
üé≤ –ö—É–±–∏–∫ - –ü–æ–±–µ–¥–∞ –Ω–∞ 6 (3x —Å—Ç–∞–≤–∫–∏)  
üé≥ –ë–æ—É–ª–∏–Ω–≥ - –ü–æ–±–µ–¥–∞ –Ω–∞ 6 (3x —Å—Ç–∞–≤–∫–∏)
‚öΩ –§—É—Ç–±–æ–ª - 2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –≥–æ–ª–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º
üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª - 2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –±—Ä–æ—Å–∫–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º

*–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:*
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 15 ‚≠ê
1 –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –∫–∞–∂–¥—ã–µ 15 ‚≠ê
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

# üîß –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK QUERY
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    callback_data = query.data
    
    if callback_data.startswith('admin_'):
        await handle_admin_callback_query(update, context)
    
    elif callback_data == 'withdraw':
        await withdraw_callback(update, context)
    elif callback_data.startswith('withdraw_'):
        await handle_withdraw_selection(update, context)
    elif callback_data == 'confirm_withdraw':
        await confirm_withdraw(update, context)
    
    elif callback_data == 'play_games':
        await play_games_callback(update, context)
    elif callback_data.startswith('buy_'):
        await handle_deposit_selection(update, context)
    elif callback_data.startswith('play_'):
        await handle_game_selection(update, context)
    elif callback_data == 'deposit':
        await deposit_callback(update, context)
    elif callback_data == 'change_bet':
        await change_bet_callback(update, context)
    elif callback_data == 'back_to_profile':
        await back_to_profile_callback(update, context)

# üåê FLASK –î–õ–Ø RAILWAY
app = Flask(__name__)

@app.route('/')
def home():
    return "üé∞ NSource Casino Bot - –ü–æ–ª–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —Å–µ—Ä–∏—è–º–∏ –ø–æ–±–µ–¥, –º–µ–≥–∞-–≤—ã–∏–≥—Ä—ã—à–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞–º–∏!"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)

# üìù –£–°–¢–ê–ù–û–í–ö–ê –ü–û–î–°–ö–ê–ó–û–ö –ö–û–ú–ê–ù–î
async def set_bot_commands(application):
    commands = [
        ("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        ("profile", "üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        ("deposit", "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
        ("withdraw", "üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"),
        ("activity", "üìà –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"),
        ("bet", "üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É"),
        ("help", "üÜò –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    ]
    
    from telegram import BotCommand
    await application.bot.set_my_commands(
        [BotCommand(command, description) for command, description in commands]
    )

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
def main():
    load_data()
    
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.post_init = set_bot_commands
    
    # –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("deposit", deposit_command))
    application.add_handler(CommandHandler("withdraw", withdraw_command))
    application.add_handler(CommandHandler("activity", activity_command))
    application.add_handler(CommandHandler("bet", bet_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("addbalance", add_balance_command))
    application.add_handler(CommandHandler("setbalance", set_balance_command))
    application.add_handler(CommandHandler("resetbalance", reset_balance_command))
    application.add_handler(CommandHandler("searchid", search_id_command))
    application.add_handler(CommandHandler("searchstreak", search_streak_command))
    application.add_handler(CommandHandler("searchmega", search_mega_command))
    application.add_handler(CommandHandler("resetuser", reset_user_command))
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("withdrawals", withdrawals_command))
    
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("users", users_command))
    application.add_handler(CommandHandler("top", top_command))
    
    # CALLBACK'–ò
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –ü–õ–ê–¢–ï–ñ–ò
    application.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    
    # –°–û–û–ë–©–ï–ù–ò–Ø
    application.add_handler(MessageHandler(filters.Dice.ALL, handle_user_dice))
    
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–°–°–´–õ–ö–ò
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_broadcast_message))
    
    print("üé∞ NSource Casino Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã: üé∞ üéØ üé≤ üé≥ ‚öΩ üèÄ")
    print("üí∞ –°–∏—Å—Ç–µ–º–∞ —Å –∏–∑–º–µ–Ω—è–µ–º–æ–π —Å—Ç–∞–≤–∫–æ–π –æ—Ç 1 –¥–æ 100000 ‚≠ê!")
    print("üí∏ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤!")
    print("üé∞ –†–µ–∂–∏–º—ã —Å–ª–æ—Ç–æ–≤: –æ–±—ã—á–Ω—ã–µ –∏ 777 (—Ç–æ–ª—å–∫–æ –¥–∂–µ–∫–ø–æ—Ç)!")
    print("üî• –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥ —Å –±–æ–Ω—É—Å–∞–º–∏ (–≤–æ –≤—Å–µ—Ö –∏–≥—Ä–∞—Ö)!")
    print("üéâ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–ì–ê-–í–´–ò–ì–†–´–®–ò: x2-x8 —Å —à–∞–Ω—Å–æ–º 1.5%!")
    print("üîÑ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –í–û–ó–í–†–ê–¢–´: 0-20% –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –≤–æ –≤—Å–µ—Ö –∏–≥—Ä–∞—Ö!")
    print("‚öΩ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –§–£–¢–ë–û–õ: 2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –≥–æ–ª–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º!")
    print("üèÄ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–ê–°–ö–ï–¢–ë–û–õ: 2 –≤–æ–∑–≤—Ä–∞—Ç–∞ + 3 –±—Ä–æ—Å–∫–∞ —Å –≤—ã–∏–≥—Ä—ã—à–µ–º!")
    print("üëë –°–∫—Ä—ã—Ç–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–¥—É)!")
    print("‚è±Ô∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã!")
    application.run_polling()

if __name__ == '__main__':
    main()
