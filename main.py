import os
import json
import random
import datetime
from collections import defaultdict
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, PreCheckoutQueryHandler
from threading import Thread
from flask import Flask

# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8378526693:AAFOwAb6pVp1GOE0tXZN4PDLFnD_TTT1djg")
PROVIDER_TOKEN = os.environ.get("PROVIDER_TOKEN", "TEST_PROVIDER_TOKEN")
ADMIN_CODE = os.environ.get("ADMIN_CODE", "1337")

# üéØ –ù–ê–°–¢–†–û–ô–ö–ò –ò–ì–†
GAME_COST = 0  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# üé∞ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –ú–´ –•–û–¢–ò–ú –£–ó–ù–ê–¢–¨ –í–°–ï –ó–ù–ê–ß–ï–ù–ò–Ø
SLOT_VALUES_RESEARCH = {}

# üóÉÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•
user_data = defaultdict(lambda: {
    'game_balance': 1000,  # –ú–Ω–æ–≥–æ –∑–≤–µ–∑–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    'total_games': 0,
    'total_wins': 0,
})

# üë§ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üî¨ –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–õ–û–¢–û–í\n\n"
        "üéØ –¶–µ–ª—å: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Å–µ 64 –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/test_slots - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã\n"
        "/research - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "/reset_research - –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å üé∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç!"
    )

async def test_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤"""
    user_id = update.effective_user.id
    
    # –î–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–≤–µ–∑–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_data[user_id]['game_balance'] = 1000
    
    await update.message.reply_text(
        "üé∞ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–õ–û–¢–û–í\n\n"
        "üí∞ –ë–∞–ª–∞–Ω—Å: 1000 –∑–≤–µ–∑–¥ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
        "üéØ –ò–≥—Ä–∞–π –≤ —Å–ª–æ—Ç—ã –∏ —è –±—É–¥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è\n"
        "üìä –ò—Å–ø–æ–ª—å–∑—É–π /research —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        "–û—Ç–ø—Ä–∞–≤—å üé∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )

async def research_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if not SLOT_VALUES_RESEARCH:
        await update.message.reply_text("üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ. –°—ã–≥—Ä–∞–π –≤ —Å–ª–æ—Ç—ã —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ!")
        return
    
    research_text = "üî¨ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –°–õ–û–¢–û–í\n\n"
    research_text += f"üìà –ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π: {len(SLOT_VALUES_RESEARCH)}/64\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    for i in range(0, 64, 8):
        range_values = []
        for j in range(i+1, i+9):
            if j in SLOT_VALUES_RESEARCH:
                range_values.append(f"üé∞{j}")
            else:
                range_values.append(f"‚ùì{j}")
        
        research_text += f"{i+1:02d}-{i+8:02d}: {' '.join(range_values)}\n"
    
    research_text += f"\nüìã –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {sorted(SLOT_VALUES_RESEARCH.keys())}"
    
    await update.message.reply_text(research_text)

async def reset_research(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"""
    SLOT_VALUES_RESEARCH.clear()
    await update.message.reply_text("üîÑ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")

# üéÆ –°–ò–°–¢–ï–ú–ê –ò–ì–† - –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú
async def handle_game_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    emoji = update.message.text
    
    if emoji != "üé∞":
        await update.message.reply_text("üî¨ –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å–ª–æ—Ç—ã (üé∞)")
        return
    
    user_data[user_id]['total_games'] += 1
    
    context.user_data['expecting_dice'] = True
    context.user_data['last_game_type'] = 'slots'
    context.user_data['last_game_user_id'] = user_id
    
    dice_message = await context.bot.send_dice(chat_id=update.message.chat_id, emoji=emoji)
    context.user_data['last_dice_message_id'] = dice_message.message_id
    
    await update.message.reply_text(
        f"üî¨ –¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–æ—Å–æ–∫ #{user_data[user_id]['total_games']}\n"
        f"üí∏ –°–ø–∏—Å–∞–Ω–æ: 0 –∑–≤–µ–∑–¥ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥"
    )

# üé∞ –û–ë–†–ê–ë–û–¢–ö–ê DICE - –ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –†–ï–ñ–ò–ú
async def handle_dice_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user_id = message.from_user.id
    
    if not message.dice:
        return
    
    if not context.user_data.get('expecting_dice', False):
        return
    
    if context.user_data.get('last_game_user_id') != user_id:
        return
    
    emoji = message.dice.emoji
    value = message.dice.value
    
    if emoji == "üé∞":
        # –ó–ê–ü–ò–°–´–í–ê–ï–ú –ó–ù–ê–ß–ï–ù–ò–ï –í –ë–ê–ó–£ –î–ê–ù–ù–´–• –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø
        if value not in SLOT_VALUES_RESEARCH:
            SLOT_VALUES_RESEARCH[value] = {
                'first_seen': datetime.datetime.now().isoformat(),
                'count': 0,
                'users': set()
            }
        
        SLOT_VALUES_RESEARCH[value]['count'] += 1
        SLOT_VALUES_RESEARCH[value]['users'].add(user_id)
        
        # –§–û–†–ú–ò–†–£–ï–ú –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
        result_text = f"üé∞ –¢–ï–°–¢–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢\n\n"
        result_text += f"üî¢ –í—ã–ø–∞–≤—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}\n"
        result_text += f"üìä –í—Å–µ–≥–æ —Ç–∞–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {SLOT_VALUES_RESEARCH[value]['count']}\n"
        result_text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤: {len(SLOT_VALUES_RESEARCH[value]['users'])}\n"
        result_text += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {len(SLOT_VALUES_RESEARCH)}/64 –∑–Ω–∞—á–µ–Ω–∏–π\n\n"
        
        # –ê–ù–ê–õ–ò–ó –ö–û–ú–ë–ò–ù–ê–¶–ò–ò
        if value <= 16:
            combo_type = "–í–´–°–û–ö–û–ï (1-16)"
        elif value <= 32:
            combo_type = "–°–†–ï–î–ù–ï–ï (17-32)" 
        elif value <= 48:
            combo_type = "–ù–ò–ó–ö–û–ï (33-48)"
        else:
            combo_type = "–û–ß–ï–ù–¨ –ù–ò–ó–ö–û–ï (49-64)"
        
        result_text += f"üéØ –î–∏–∞–ø–∞–∑–æ–Ω: {combo_type}\n"
        
        # –ü–†–ï–î–ü–û–õ–û–ñ–ï–ù–ò–ï –û –í–´–ò–ì–†–´–®–ï
        if value in [1, 17, 33, 49]:
            result_text += "üíé –í–æ–∑–º–æ–∂–Ω—ã–π –î–ñ–ï–ö–ü–û–¢ (–∫—Ä–∞–π–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)\n"
        elif value % 8 == 0:
            result_text += "üî• –í–æ–∑–º–æ–∂–Ω—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à (–∫—Ä–∞—Ç–Ω—ã–µ 8)\n"
        elif value % 4 == 0:
            result_text += "‚≠ê –í–æ–∑–º–æ–∂–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à (–∫—Ä–∞—Ç–Ω—ã–µ 4)\n"
        else:
            result_text += "üé™ –û–±—ã—á–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è\n"
        
        result_text += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π /research –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        await message.reply_text(result_text)
    
    context.user_data.pop('expecting_dice', None)
    context.user_data.pop('last_game_type', None)
    context.user_data.pop('last_dice_message_id', None)
    context.user_data.pop('last_game_user_id', None)

# üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    callback_data = query.data
    
    if callback_data == 'test_slots':
        user_id = query.from_user.id
        user_data[user_id]['game_balance'] = 1000
        
        await query.edit_message_text(
            "üé∞ –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù\n\n"
            "–û—Ç–ø—Ä–∞–≤—å üé∞ –≤ —á–∞—Ç —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –±—Ä–æ—Å–æ–∫!\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/research - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/reset_research - –°–±—Ä–æ—Å–∏—Ç—å"
        )

# üåê FLASK –î–õ–Ø RAILWAY
app = Flask(__name__)

@app.route('/')
def home():
    return "üî¨ Slot Research Bot is running!"

@app.route('/research')
def research_web():
    """–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º"""
    if not SLOT_VALUES_RESEARCH:
        return "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ"
    
    html = "<h1>üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –°–ª–æ—Ç–æ–≤</h1>"
    html += f"<p>–ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π: {len(SLOT_VALUES_RESEARCH)}/64</p>"
    html += "<table border='1'><tr><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th><th>–¢–µ—Å—Ç–µ—Ä–æ–≤</th></tr>"
    
    for value, data in sorted(SLOT_VALUES_RESEARCH.items()):
        html += f"<tr><td>{value}</td><td>{data['count']}</td><td>{len(data['users'])}</td></tr>"
    
    html += "</table>"
    return html

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
def main():
    port = int(os.environ.get("PORT", 5000))
    
    def run_flask():
        app.run(host='0.0.0.0', port=port)
    
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test_slots", test_slots))
    application.add_handler(CommandHandler("research", research_command))
    application.add_handler(CommandHandler("reset_research", reset_research))
    
    # CALLBACK'–ò
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –°–û–û–ë–©–ï–ù–ò–Ø
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(üé∞)$"), handle_game_message))
    application.add_handler(MessageHandler(filters.Dice.ALL, handle_dice_result))
    
    print("üî¨ Slot Research Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    application.run_polling()

if __name__ == '__main__':
    main()
