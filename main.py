import os
import json
import random
import datetime
from collections import defaultdict
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, PreCheckoutQueryHandler
from threading import Thread
from flask import Flask

# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = "8378526693:AAFOwAb6pVp1GOE0tXZN4PDLFnD_TTT1djg"
PROVIDER_TOKEN = "TEST_PROVIDER_TOKEN"
ADMIN_CODE = "1337"

# üéØ –ù–ê–°–¢–†–û–ô–ö–ò –ò–ì–†
GAME_COST = 5

# üí∞ –ü–ê–ö–ï–¢–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø (1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 –∏–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞)
PRODUCTS = {
    "pack_5": {"title": "5 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 5 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 5, "currency": "XTR", "credits": 5},
    "pack_10": {"title": "10 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 10 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 10, "currency": "XTR", "credits": 10},
    "pack_25": {"title": "25 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 25 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 25, "currency": "XTR", "credits": 25},
    "pack_50": {"title": "50 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 50 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 50, "currency": "XTR", "credits": 50},
    "pack_100": {"title": "100 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 100 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 100, "currency": "XTR", "credits": 100},
    "pack_250": {"title": "250 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 250 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 250, "currency": "XTR", "credits": 250},
    "pack_500": {"title": "500 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 500 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 500, "currency": "XTR", "credits": 500},
    "pack_1000": {"title": "1000 –ò–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 1000 –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥", "price": 1000, "currency": "XTR", "credits": 1000}
}

# üé∞ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–õ–û–¢–û–í - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø!
# –í Telegram Dice –¥–ª—è üé∞ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 1 –¥–æ 64 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–Ω—ã–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º
# –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
SLOT_CONFIG = {
    # –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ
    1: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    5: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    9: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    13: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    17: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    21: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    25: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    29: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    33: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    37: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    41: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    45: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    49: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    53: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    57: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    61: {"name": "–î–ñ–ï–ö–ü–û–¢ 777", "stars": 100},
    
    # –î—Ä—É–≥–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ - –Ω—É–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
    2: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    6: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    10: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    14: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    18: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    22: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    26: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    30: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    34: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    38: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    42: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    46: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    50: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    54: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    58: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    62: {"name": "–¢–†–ò –õ–ò–ú–û–ù–ê", "stars": 50},
    
    3: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    7: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    11: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    15: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    19: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    23: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    27: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    31: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    35: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    39: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    43: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    47: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    51: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    55: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    59: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    63: {"name": "–¢–†–ò –í–ò–®–ù–ò", "stars": 25},
    
    4: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    8: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    12: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    16: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    20: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    24: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    28: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    32: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    36: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    40: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    44: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    48: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    52: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    56: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    60: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15},
    64: {"name": "–¢–†–ò –ë–ê–†–ê", "stars": 15}
}

# üéÆ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ì–†
GAMES_CONFIG = {
    "üé∞": {"cost": 5, "type": "slots"},
    "üéØ": {"cost": 5, "type": "dart", "win": 6, "prize": 15},
    "üé≤": {"cost": 5, "type": "dice", "win": 6, "prize": 15},
    "üé≥": {"cost": 5, "type": "bowling", "win": 6, "prize": 15},
    "‚öΩ": {"cost": 5, "type": "football", "win": 5, "prize": 15},
    "üèÄ": {"cost": 5, "type": "basketball", "win": 5, "prize": 15}
}

# üóÉÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•
user_data = defaultdict(lambda: {
    'game_balance': 0,
    'total_games': 0,
    'total_wins': 0,
    'total_deposited': 0,
    'real_money_spent': 0,
    'registration_date': datetime.datetime.now().isoformat(),
    'last_activity': datetime.datetime.now().isoformat()
})

user_activity = defaultdict(lambda: {
    'last_play_date': None,
    'consecutive_days': 0,
    'plays_today': 0,
    'weekly_reward_claimed': False
})

consecutive_wins = defaultdict(int)
admin_mode = defaultdict(bool)

# üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•
def save_data():
    try:
        data = {
            'user_data': dict(user_data),
            'user_activity': dict(user_activity),
            'consecutive_wins': dict(consecutive_wins),
            'admin_mode': dict(admin_mode)
        }
        with open('data.json', 'w') as f:
            json.dump(data, f, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def load_data():
    try:
        with open('data.json', 'r') as f:
            data = json.load(f)
            user_data.update(data.get('user_data', {}))
            user_activity.update(data.get('user_activity', {}))
            consecutive_wins.update(data.get('consecutive_wins', {}))
            admin_mode.update(data.get('admin_mode', {}))
    except FileNotFoundError:
        pass

# üéÅ –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò
WEEKLY_REWARDS = [15, 25, 50]

def update_daily_activity(user_id: int):
    today = datetime.datetime.now().date()
    activity = user_activity[user_id]
    
    if activity['last_play_date'] != today:
        if activity['last_play_date'] and activity['plays_today'] >= 3:
            activity['consecutive_days'] += 1
        elif activity['last_play_date'] and (today - activity['last_play_date']).days > 1:
            activity['consecutive_days'] = 0
        
        activity['plays_today'] = 0
        activity['last_play_date'] = today
    
    activity['plays_today'] += 1
    
    if (activity['consecutive_days'] >= 7 and 
        activity['plays_today'] >= 3 and 
        not activity['weekly_reward_claimed']):
        
        reward = random.choice(WEEKLY_REWARDS)
        activity['consecutive_days'] = 0
        activity['weekly_reward_claimed'] = True
        return reward
    
    return None

# üë§ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
NSource Casino

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã (5 –∑–≤–µ–∑–¥ –∑–∞ –∏–≥—Ä—É):
üé∞ –°–ª–æ—Ç—ã | üéØ –î–∞—Ä—Ç—Å | üé≤ –ö—É–±–∏–∫
üé≥ –ë–æ—É–ª–∏–Ω–≥ | ‚öΩ –§—É—Ç–±–æ–ª | üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª

üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 1:1
1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 –∏–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞

üéÅ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
–ò–≥—Ä–∞–π 3+ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ = —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (15-50 –∑–≤–µ–∑–¥)

–ö–æ–º–∞–Ω–¥—ã:
/profile - –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
/deposit - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å  
/activity - –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —ç–º–æ–¥–∑–∏ –∏–≥—Ä—ã —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
    """
    
    await update.message.reply_text(welcome_text)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    data = user_data[user_id]
    
    win_rate = (data['total_wins'] / data['total_games'] * 100) if data['total_games'] > 0 else 0
    
    profile_text = f"""
üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üë§ –ò–º—è: {user.first_name}
üÜî ID: {user_id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {data['registration_date'][:10]}

üíé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üí∞ –ë–∞–ª–∞–Ω—Å: {data['game_balance']} –∑–≤–µ–∑–¥
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {data['total_games']}
üèÜ –ü–æ–±–µ–¥: {data['total_wins']}
üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {data['total_deposited']} –∑–≤–µ–∑–¥
    """
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity")]
    ]
    
    if admin_mode.get(user_id, False):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(profile_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(profile_text, reply_markup=reply_markup)

async def deposit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deposit"""
    user_id = update.effective_user.id
    data = user_data[user_id]
    
    deposit_text = f"""
üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data['game_balance']} –∑–≤–µ–∑–¥

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
üí´ 1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 –∏–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞
    """
    
    keyboard = []
    for product_key, product in PRODUCTS.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{product['title']} - {product['price']} Stars", 
                callback_data=f"buy_{product_key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    if admin_mode.get(user_id, False):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(deposit_text, reply_markup=reply_markup)

async def activity_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /activity"""
    user_id = update.effective_user.id
    activity_data = user_activity[user_id]
    
    today = datetime.datetime.now().date()
    plays_remaining = max(0, 3 - activity_data['plays_today'])
    
    activity_text = f"""
üìä –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

üéÆ –°—ã–≥—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {activity_data['plays_today']}/3
üìÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {activity_data['consecutive_days']}/7
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä –¥–ª—è –∑–∞—á–µ—Ç–∞: {plays_remaining}

üéÅ –ò–≥—Ä–∞–π—Ç–µ 3+ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!
    """
    
    if activity_data['weekly_reward_claimed']:
        activity_text += "\n‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!"
    else:
        days_needed = 7 - activity_data['consecutive_days']
        activity_text += f"\nüéØ –î–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã: {days_needed} –¥–Ω–µ–π"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]]
    
    if admin_mode.get(user_id, False):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    
    await update.message.reply_text(activity_text, reply_markup=InlineKeyboardMarkup(keyboard))

# üí≥ –°–ò–°–¢–ï–ú–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
async def deposit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    current_balance = user_data[user_id]['game_balance']
    
    deposit_text = f"""
üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} –∑–≤–µ–∑–¥

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
üí´ 1 —Ä–µ–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ = 1 –∏–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞
    """
    
    keyboard = []
    for product_key, product in PRODUCTS.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{product['title']} - {product['price']} Stars", 
                callback_data=f"buy_{product_key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    if admin_mode.get(user_id, False):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(deposit_text, reply_markup=reply_markup)

async def handle_deposit_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    product_key = query.data.replace("buy_", "")
    product = PRODUCTS[product_key]
    
    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=product["title"],
        description=product["description"],
        payload=product_key,
        provider_token=PROVIDER_TOKEN,
        currency=product["currency"],
        prices=[LabeledPrice(product["title"], product["price"] * 100)],
        start_parameter="nsource_casino",
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False
    )

# üí∞ –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô
async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    user_id = update.effective_user.id
    product_key = payment.invoice_payload
    product = PRODUCTS[product_key]
    
    user_data[user_id]['game_balance'] += product["credits"]
    user_data[user_id]['total_deposited'] += product["credits"]
    user_data[user_id]['real_money_spent'] += product["price"]
    
    save_data()
    
    await update.message.reply_text(
        f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!\n\n"
        f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: {product['price']} Stars\n"
        f"üíé –ó–∞—á–∏—Å–ª–µ–Ω–æ: {product['credits']} –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥\n\n"
        f"üéÆ –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å", callback_data="play_games")],
            [InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
        ])
    )

# üéÆ –°–ò–°–¢–ï–ú–ê –ò–ì–†
async def play_games_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    balance = user_data[user_id]['game_balance']
    
    games_text = f"""
üéÆ –í—ã–±–æ—Ä –∏–≥—Ä—ã

üíé –ë–∞–ª–∞–Ω—Å: {balance} –∑–≤–µ–∑–¥
üéØ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã: 5 –∑–≤–µ–∑–¥

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:
    """
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã (5 –∑–≤–µ–∑–¥)", callback_data="play_slots")],
        [InlineKeyboardButton("üéØ –î–∞—Ä—Ç—Å (5 –∑–≤–µ–∑–¥)", callback_data="play_dart")],
        [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫ (5 –∑–≤–µ–∑–¥)", callback_data="play_dice")],
        [InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥ (5 –∑–≤–µ–∑–¥)", callback_data="play_bowling")],
        [InlineKeyboardButton("‚öΩ –§—É—Ç–±–æ–ª (5 –∑–≤–µ–∑–¥)", callback_data="play_football")],
        [InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª (5 –∑–≤–µ–∑–¥)", callback_data="play_basketball")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
        [InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
    ]
    
    if admin_mode.get(user_id, False):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(games_text, reply_markup=reply_markup)

async def handle_game_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    game_type = query.data.replace("play_", "")
    
    # –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
    if not admin_mode.get(user_id, False) and user_data[user_id]['game_balance'] < GAME_COST:
        await query.edit_message_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥\n"
            f"üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: {GAME_COST} –∑–≤–µ–∑–¥\n\n"
            "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
                [InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
            ])
        )
        return
    
    # –°–ü–ò–°–ê–ù–ò–ï –°–†–ï–î–°–¢–í (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
    if not admin_mode.get(user_id, False):
        user_data[user_id]['game_balance'] -= GAME_COST
    
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    game_emojis = {
        'slots': 'üé∞', 'dart': 'üéØ', 'dice': 'üé≤',
        'bowling': 'üé≥', 'football': '‚öΩ', 'basketball': 'üèÄ'
    }
    
    emoji = game_emojis.get(game_type, 'üé∞')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    context.user_data['expecting_dice'] = True
    context.user_data['last_game_type'] = game_type
    context.user_data['last_game_cost'] = GAME_COST if not admin_mode.get(user_id, False) else 0
    context.user_data['last_game_user_id'] = user_id
    
    dice_message = await context.bot.send_dice(chat_id=query.message.chat_id, emoji=emoji)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å dice –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    context.user_data['last_dice_message_id'] = dice_message.message_id
    context.user_data['last_dice_chat_id'] = dice_message.chat_id
    
    message_text = f"üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! {emoji}\n"
    if admin_mode.get(user_id, False):
        message_text += "üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞: –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
    else:
        message_text += f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {GAME_COST} –∑–≤–µ–∑–¥\n"
    message_text += f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥"
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ï—â–µ –∏–≥—Ä–∞—Ç—å", callback_data="play_games")],
        [InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
    ]
    
    if admin_mode.get(user_id, False):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    
    await query.edit_message_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    save_data()

# üé∞ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò DICE - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø!
async def handle_dice_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user_id = message.from_user.id
    
    print(f"üé≤ –ü–æ–ª—É—á–µ–Ω dice: {message.dice.emoji}, –∑–Ω–∞—á–µ–Ω–∏–µ: {message.dice.value}")  # –î–ï–ë–ê–ì
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—à–µ–π –∏–≥—Ä—ã
    if not message.dice:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã dice –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.user_data.get('expecting_dice', False):
        print("‚ùå –ù–µ –æ–∂–∏–¥–∞–ª–∏ dice")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if context.user_data.get('last_game_user_id') != user_id:
        print("‚ùå –ù–µ —Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    
    emoji = message.dice.emoji
    value = message.dice.value
    
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    result_text = ""
    is_win = False
    
    # üé∞ –û–ë–†–ê–ë–û–¢–ö–ê –°–õ–û–¢–û–í - –£–õ–£–ß–®–ï–ù–ù–ê–Ø!
    if emoji == "üé∞":
        print(f"üé∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã, –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
        
        # –î–û–ë–ê–í–ò–ú –î–ï–ë–ê–ì –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –†–ï–ê–õ–¨–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô
        debug_text = f"üé∞ DEBUG: –í—ã–ø–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ {value}. "
        
        if value in SLOT_CONFIG:
            win_combo = SLOT_CONFIG[value]
            user_data[user_id]['game_balance'] += win_combo["stars"]
            user_data[user_id]['total_wins'] += 1
            is_win = True
            
            result_text = (
                f"üéâ {win_combo['name']}!\n\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_combo['stars']} –∑–≤–µ–∑–¥\n"
                f"üíé –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥"
            )
            debug_text += f"–í–´–ò–ì–†–´–®: {win_combo['name']} - {win_combo['stars']} –∑–≤–µ–∑–¥"
        else:
            user_data[user_id]['total_wins'] += 0  # –ü—Ä–æ–∏–≥—Ä—ã—à
            result_text = f"üò¢ –ù–µ –ø–æ–≤–µ–∑–ª–æ...\nüíé –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥"
            debug_text += "–ü–†–û–ò–ì–†–´–®"
        
        print(debug_text)
    
    # üéØ –î–†–£–ì–ò–ï –ò–ì–†–´
    else:
        game_type = context.user_data.get('last_game_type')
        if not game_type:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–≥—Ä—ã")
            return
            
        game_config = None
        for emoji_key, config in GAMES_CONFIG.items():
            if config["type"] == game_type:
                game_config = config
                break
        
        if game_config and value == game_config["win"]:
            base_prize = game_config["prize"]
            consecutive_wins[user_id] = consecutive_wins.get(user_id, 0) + 1
            
            total_prize = base_prize
            bonus_msg = ""
            
            if consecutive_wins[user_id] >= 2:
                total_prize += 25
                bonus_msg = " üéØ –î–í–ï –ü–û–ë–ï–î–´ –ü–û–î–†–Ø–î! +25 –∑–≤–µ–∑–¥"
                consecutive_wins[user_id] = 0
            
            user_data[user_id]['game_balance'] += total_prize
            user_data[user_id]['total_wins'] += 1
            is_win = True
            
            game_names = {
                "dart": "üéØ –ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨!",
                "dice": "üé≤ –í–´–ü–ê–õ–û 6!",
                "bowling": "üé≥ –°–¢–†–ê–ô–ö!",
                "football": "‚öΩ –ì–û–û–û–õ!",
                "basketball": "üèÄ –ü–û–ü–ê–î–ê–ù–ò–ï!"
            }
            
            result_text = (
                f"üéâ {game_names[game_type]}\n\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {total_prize} –∑–≤–µ–∑–¥{bonus_msg}\n"
                f"üíé –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥"
            )
        else:
            consecutive_wins[user_id] = 0
            result_text = f"üò¢ –ú–∏–º–æ...\nüíé –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result_text:
        await message.reply_text(result_text)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}")
    
    # üìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò
    weekly_reward = update_daily_activity(user_id)
    if weekly_reward:
        user_data[user_id]['game_balance'] += weekly_reward
        await message.reply_text(
            f"üéÅ –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–ê–Ø –ù–ê–ì–†–ê–î–ê!\n\n"
            f"üìÖ 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n"
            f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {weekly_reward} –∑–≤–µ–∑–¥\n"
            f"üíé –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥"
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    context.user_data.pop('expecting_dice', None)
    context.user_data.pop('last_game_type', None)
    context.user_data.pop('last_dice_message_id', None)
    context.user_data.pop('last_dice_chat_id', None)
    context.user_data.pop('last_game_user_id', None)
    context.user_data.pop('last_game_cost', None)
    
    save_data()

# üéÆ –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô (–æ—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–æ–¥–∑–∏)
async def handle_game_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    emoji = update.message.text
    
    if emoji not in GAMES_CONFIG:
        return
    
    # –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
    if not admin_mode.get(user_id, False) and user_data[user_id]['game_balance'] < GAME_COST:
        await update.message.reply_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ò—Å–ø–æ–ª—å–∑—É–π /deposit –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")]
            ])
        )
        return
    
    # –°–ü–ò–°–ê–ù–ò–ï –°–†–ï–î–°–¢–í (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
    if not admin_mode.get(user_id, False):
        user_data[user_id]['game_balance'] -= GAME_COST
    
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    game_type = GAMES_CONFIG[emoji]["type"]
    context.user_data['expecting_dice'] = True
    context.user_data['last_game_type'] = game_type
    context.user_data['last_game_cost'] = GAME_COST if not admin_mode.get(user_id, False) else 0
    context.user_data['last_game_user_id'] = user_id
    
    dice_message = await context.bot.send_dice(chat_id=update.message.chat_id, emoji=emoji)
    context.user_data['last_dice_message_id'] = dice_message.message_id
    context.user_data['last_dice_chat_id'] = dice_message.chat_id
    
    message_text = f"üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! {emoji}\n"
    if admin_mode.get(user_id, False):
        message_text += "üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞: –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
    else:
        message_text += f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {GAME_COST} –∑–≤–µ–∑–¥\n"
    message_text += f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥"
    
    await update.message.reply_text(message_text)
    save_data()

# üëë –ê–î–ú–ò–ù –°–ò–°–¢–ï–ú–ê
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if len(context.args) == 0:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–∫–æ–¥>")
        return
    
    code = context.args[0]
    if code == ADMIN_CODE:
        admin_mode[user_id] = True
        await update.message.reply_text(
            "üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üéÆ –ò–≥—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
            "‚Ä¢ üí∞ –ü–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å –ª—é–±—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "‚Ä¢ üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="admin_play")],
                [InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_deposit")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
                [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="admin_exit")]
            ])
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–¥–º–∏–Ω–∞")

async def admin_play_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    games_text = "üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã\n\nüéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:"
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_slots")],
        [InlineKeyboardButton("üéØ –î–∞—Ä—Ç—Å (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_dart")],
        [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫ (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_dice")],
        [InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥ (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_bowling")],
        [InlineKeyboardButton("‚öΩ –§—É—Ç–±–æ–ª (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_football")],
        [InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª (–ë–ï–°–ü–õ–ê–¢–ù–û)", callback_data="admin_play_basketball")],
        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(games_text, reply_markup=reply_markup)

async def admin_handle_game_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not admin_mode.get(user_id, False):
        await query.answer("–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        return
    
    game_type = query.data.replace("admin_play_", "")
    
    # –í —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    user_data[user_id]['total_games'] += 1
    user_data[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    game_emojis = {
        'slots': 'üé∞', 'dart': 'üéØ', 'dice': 'üé≤',
        'bowling': 'üé≥', 'football': '‚öΩ', 'basketball': 'üèÄ'
    }
    
    emoji = game_emojis.get(game_type, 'üé∞')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    context.user_data['expecting_dice'] = True
    context.user_data['last_game_type'] = game_type
    context.user_data['last_game_cost'] = 0  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    context.user_data['last_game_user_id'] = user_id
    
    dice_message = await context.bot.send_dice(chat_id=query.message.chat_id, emoji=emoji)
    context.user_data['last_dice_message_id'] = dice_message.message_id
    context.user_data['last_dice_chat_id'] = dice_message.chat_id
    
    await query.edit_message_text(
        f"üëë –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º - –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! {emoji}\n"
        f"üí∏ –°–ø–∏—Å–∞–Ω–æ: 0 –∑–≤–µ–∑–¥ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['game_balance']} –∑–≤–µ–∑–¥",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üéÆ –ï—â–µ –∏–≥—Ä–∞—Ç—å", callback_data="admin_play")],
            [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ])
    )

# üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    callback_data = query.data
    
    # –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
    if callback_data.startswith('admin_'):
        if callback_data == 'admin_play':
            await admin_play_callback(update, context)
        elif callback_data.startswith('admin_play_'):
            await admin_handle_game_selection(update, context)
        elif callback_data == 'admin_back':
            user_id = query.from_user.id
            if admin_mode.get(user_id, False):
                await query.edit_message_text(
                    "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="admin_play")],
                        [InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_deposit")],
                        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
                        [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="admin_exit")]
                    ])
                )
        elif callback_data == 'admin_exit':
            user_id = query.from_user.id
            admin_mode[user_id] = False
            await query.edit_message_text("üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    # –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
    elif callback_data.startswith('buy_'):
        await handle_deposit_selection(update, context)
    elif callback_data.startswith('play_'):
        await handle_game_selection(update, context)
    elif callback_data == 'deposit':
        await deposit_callback(update, context)
    elif callback_data == 'play_games':
        await play_games_callback(update, context)
    elif callback_data == 'activity':
        await activity_callback(update, context)
    elif callback_data == 'back_to_profile':
        await back_to_profile_callback(update, context)

async def activity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    activity_data = user_activity[user_id]
    
    today = datetime.datetime.now().date()
    plays_remaining = max(0, 3 - activity_data['plays_today'])
    
    activity_text = f"""
üìä –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

üéÆ –°—ã–≥—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {activity_data['plays_today']}/3
üìÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {activity_data['consecutive_days']}/7
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä –¥–ª—è –∑–∞—á–µ—Ç–∞: {plays_remaining}

üéÅ –ò–≥—Ä–∞–π—Ç–µ 3+ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!
    """
    
    if activity_data['weekly_reward_claimed']:
        activity_text += "\n‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!"
    else:
        days_needed = 7 - activity_data['consecutive_days']
        activity_text += f"\nüéØ –î–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã: {days_needed} –¥–Ω–µ–π"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]]
    
    if admin_mode.get(user_id, False):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    
    await query.edit_message_text(
        activity_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def back_to_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await profile(update, context)

# üåê KEEP ALIVE
app = Flask('')

@app.route('/')
def home():
    return "NSource Casino Bot is alive!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
def main():
    load_data()
    keep_alive()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("deposit", deposit_command))
    application.add_handler(CommandHandler("activity", activity_command))
    application.add_handler(CommandHandler("admin", admin_command))
    
    # CALLBACK'–ò
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –ü–õ–ê–¢–ï–ñ–ò
    application.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    
    # –°–û–û–ë–©–ï–ù–ò–Ø
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(üé∞|üéØ|üé≤|üé≥|‚öΩ|üèÄ)$"), handle_game_message))
    application.add_handler(MessageHandler(filters.DICE, handle_dice_result))
    
    print("üé∞ NSource Casino Bot –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()