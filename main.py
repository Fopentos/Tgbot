import os
import json
import random
import datetime
from collections import defaultdict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from threading import Thread
from flask import Flask

# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = "8378526693:AAFOwAb6pVp1GOE0tXZN4PDLFnD_TTT1djg"

# üéØ –ù–ê–°–¢–†–û–ô–ö–ò –ò–ì–†
BASKETBALL_VALUES = 5  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∏–º–∞—Ü–∏–π –±–∞—Å–∫–µ—Ç–±–æ–ª–∞
FOOTBALL_VALUES = 5    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∏–º–∞—Ü–∏–π —Ñ—É—Ç–±–æ–ª–∞

# üèÄ –£–ù–ò–ö–ê–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –ö–ê–ñ–î–û–ô –ê–ù–ò–ú–ê–¶–ò–ò –ë–ê–°–ö–ï–¢–ë–û–õ–ê
BASKETBALL_MESSAGES = {
    1: "üèÄ –ê–ù–ò–ú–ê–¶–ò–Ø #1 - –ö–†–ê–°–ò–í–û–ï –ü–û–ü–ê–î–ê–ù–ò–ï!",
    2: "üèÄ –ê–ù–ò–ú–ê–¶–ò–Ø #2 - –ò–î–ï–ê–õ–¨–ù–´–ô –ë–†–û–°–û–ö!",
    3: "üèÄ –ê–ù–ò–ú–ê–¶–ò–Ø #3 - –¢–†–ï–•–û–ß–ö–û–í–´–ô!",
    4: "üèÄ –ê–ù–ò–ú–ê–¶–ò–Ø #4 - –°–õ–≠–ú-–î–ê–ù–ö!",
    5: "üèÄ –ê–ù–ò–ú–ê–¶–ò–Ø #5 - –ö–û–†–û–¢–ö–ò–ô –ë–†–û–°–û–ö!"
}

# ‚öΩ –£–ù–ò–ö–ê–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –ö–ê–ñ–î–û–ô –ê–ù–ò–ú–ê–¶–ò–ò –§–£–¢–ë–û–õ–ê
FOOTBALL_MESSAGES = {
    1: "‚öΩ –ê–ù–ò–ú–ê–¶–ò–Ø #1 - –ö–†–ê–°–ò–í–´–ô –£–î–ê–†!",
    2: "‚öΩ –ê–ù–ò–ú–ê–¶–ò–Ø #2 - –ò–î–ï–ê–õ–¨–ù–´–ô –ì–û–õ!",
    3: "‚öΩ –ê–ù–ò–ú–ê–¶–ò–Ø #3 - –°–ò–õ–¨–ù–´–ô –£–î–ê–†!",
    4: "‚öΩ –ê–ù–ò–ú–ê–¶–ò–Ø #4 - –ü–ï–ù–ê–õ–¨–¢–ò!",
    5: "‚öΩ –ê–ù–ò–ú–ê–¶–ò–Ø #5 - –ö–û–†–û–¢–ö–ò–ô –£–î–ê–†!"
}

# üóÉÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–• –î–õ–Ø –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø
basketball_research_data = {}
football_research_data = {}
user_data = defaultdict(lambda: {
    'total_games': 0,
})

# üë§ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéØ –†–ï–ñ–ò–ú –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –ê–ù–ò–ú–ê–¶–ò–ô\n\n"
        "–ò—Å—Å–ª–µ–¥—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –±–∞—Å–∫–µ—Ç–±–æ–ª–∞ üèÄ –∏ —Ñ—É—Ç–±–æ–ª–∞ ‚öΩ!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/research - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n"
        "/basketball X - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–Ω–∏–º–∞—Ü–∏–∏ –±–∞—Å–∫–µ—Ç–±–æ–ª–∞\n"
        "/football X - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ—É—Ç–±–æ–ª–∞\n"
        "/test_all - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä\n\n"
        "–û—Ç–ø—Ä–∞–≤—å üèÄ –∏–ª–∏ ‚öΩ —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏!"
    )

async def test_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä"""
    user_id = update.effective_user.id
    
    await update.message.reply_text(
        "üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ò–ì–† –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π üèÄ –∏–ª–∏ ‚öΩ –≤ —á–∞—Ç - —è –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∂–¥–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏!\n\n"
        f"üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª: {BASKETBALL_VALUES} –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π\n"
        f"‚öΩ –§—É—Ç–±–æ–ª: {FOOTBALL_VALUES} –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π\n\n"
        "–ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π /research –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    )

async def research_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä"""
    research_text = "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –í–°–ï–• –ò–ì–†\n\n"
    
    # –ë–∞—Å–∫–µ—Ç–±–æ–ª
    research_text += "üèÄ –ë–ê–°–ö–ï–¢–ë–û–õ:\n"
    if basketball_research_data:
        research_text += f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(basketball_research_data)}/{BASKETBALL_VALUES} –∑–Ω–∞—á–µ–Ω–∏–π\n"
        for value in sorted(basketball_research_data.keys()):
            data = basketball_research_data[value]
            research_text += f"üèÄ #{value}: {data['count']} —Ä–∞–∑\n"
    else:
        research_text += "‚ùì –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç\n"
    
    research_text += "\n‚öΩ –§–£–¢–ë–û–õ:\n"
    if football_research_data:
        research_text += f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(football_research_data)}/{FOOTBALL_VALUES} –∑–Ω–∞—á–µ–Ω–∏–π\n"
        for value in sorted(football_research_data.keys()):
            data = football_research_data[value]
            research_text += f"‚öΩ #{value}: {data['count']} —Ä–∞–∑\n"
    else:
        research_text += "‚ùì –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç\n"
    
    await update.message.reply_text(research_text)

async def basketball_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –±–∞—Å–∫–µ—Ç–±–æ–ª–∞"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /basketball <–Ω–æ–º–µ—Ä>")
        return
    
    try:
        anim_number = int(context.args[0])
        if anim_number in basketball_research_data:
            data = basketball_research_data[anim_number]
            info_text = f"üèÄ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ê–ù–ò–ú–ê–¶–ò–ò #{anim_number}\n\n"
            info_text += f"üìä –í—ã–ø–∞–¥–∞–ª–∞ —Ä–∞–∑: {data['count']}\n"
            info_text += f"üë• –¢–µ—Å—Ç–µ—Ä–æ–≤: {len(data['users'])}\n"
            info_text += f"üìÖ –ü–µ—Ä–≤—ã–π —Ä–∞–∑: {data['first_seen'][:19]}\n"
            info_text += f"üéØ –°–æ–æ–±—â–µ–Ω–∏–µ: {BASKETBALL_MESSAGES.get(anim_number, '–ù–ï–ò–ó–í–ï–°–¢–ù–û')}\n"
        else:
            info_text = f"üèÄ –ê–Ω–∏–º–∞—Ü–∏—è #{anim_number} –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n–ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å üèÄ"
            
        await update.message.reply_text(info_text)
        
    except ValueError:
        await update.message.reply_text("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

async def football_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ—É—Ç–±–æ–ª–∞"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /football <–Ω–æ–º–µ—Ä>")
        return
    
    try:
        anim_number = int(context.args[0])
        if anim_number in football_research_data:
            data = football_research_data[anim_number]
            info_text = f"‚öΩ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ê–ù–ò–ú–ê–¶–ò–ò #{anim_number}\n\n"
            info_text += f"üìä –í—ã–ø–∞–¥–∞–ª–∞ —Ä–∞–∑: {data['count']}\n"
            info_text += f"üë• –¢–µ—Å—Ç–µ—Ä–æ–≤: {len(data['users'])}\n"
            info_text += f"üìÖ –ü–µ—Ä–≤—ã–π —Ä–∞–∑: {data['first_seen'][:19]}\n"
            info_text += f"üéØ –°–æ–æ–±—â–µ–Ω–∏–µ: {FOOTBALL_MESSAGES.get(anim_number, '–ù–ï–ò–ó–í–ï–°–¢–ù–û')}\n"
        else:
            info_text = f"‚öΩ –ê–Ω–∏–º–∞—Ü–∏—è #{anim_number} –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n–ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å ‚öΩ"
            
        await update.message.reply_text(info_text)
        
    except ValueError:
        await update.message.reply_text("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

def generate_basketball_message(value):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞—Å–∫–µ—Ç–±–æ–ª–∞"""
    if value in BASKETBALL_MESSAGES:
        message = BASKETBALL_MESSAGES[value]
    else:
        message = f"üèÄ –ê–ù–ò–ú–ê–¶–ò–Ø #{value} - –ù–û–í–ê–Ø –ö–û–ú–ë–ò–ù–ê–¶–ò–Ø!"
    
    return f"{message}\nüî¢ –ù–æ–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è: {value}"

def generate_football_message(value):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É—Ç–±–æ–ª–∞"""
    if value in FOOTBALL_MESSAGES:
        message = FOOTBALL_MESSAGES[value]
    else:
        message = f"‚öΩ –ê–ù–ò–ú–ê–¶–ò–Ø #{value} - –ù–û–í–ê–Ø –ö–û–ú–ë–ò–ù–ê–¶–ò–Ø!"
    
    return f"{message}\nüî¢ –ù–æ–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è: {value}"

# üéÆ –°–ò–°–¢–ï–ú–ê –ò–ì–† - –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –î–õ–Ø –í–°–ï–• –ò–ì–†
async def handle_game_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    emoji = update.message.text
    
    if emoji not in ["üèÄ", "‚öΩ"]:
        await update.message.reply_text("üéØ –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ üèÄ –∏ ‚öΩ!")
        return
    
    user_data[user_id]['total_games'] += 1
    
    context.user_data['expecting_dice'] = True
    context.user_data['last_game_type'] = 'basketball' if emoji == "üèÄ" else 'football'
    context.user_data['last_game_user_id'] = user_id
    
    dice_message = await context.bot.send_dice(chat_id=update.message.chat_id, emoji=emoji)
    context.user_data['last_dice_message_id'] = dice_message.message_id
    
    game_name = "–ë–ê–°–ö–ï–¢–ë–û–õ" if emoji == "üèÄ" else "–§–£–¢–ë–û–õ"
    await update.message.reply_text(
        f"üî¨ –¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–æ—Å–æ–∫ #{user_data[user_id]['total_games']} ({game_name})\n"
        f"üéØ –û–ø—Ä–µ–¥–µ–ª—è—é –Ω–æ–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏..."
    )

# üéØ –û–ë–†–ê–ë–û–¢–ö–ê DICE - –£–ù–ò–ö–ê–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ó–ù–ê–ß–ï–ù–ò–Ø
async def handle_dice_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user_id = message.from_user.id
    
    if not message.dice:
        return
    
    if not context.user_data.get('expecting_dice', False):
        return
    
    if context.user_data.get('last_game_user_id') != user_id:
        return
    
    emoji = message.dice.emoji
    value = message.dice.value
    
    if emoji == "üèÄ":
        # –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –î–õ–Ø –ë–ê–°–ö–ï–¢–ë–û–õ–ê
        if value not in basketball_research_data:
            basketball_research_data[value] = {
                'first_seen': datetime.datetime.now().isoformat(),
                'count': 0,
                'users': set()
            }
        
        basketball_research_data[value]['count'] += 1
        basketball_research_data[value]['users'].add(user_id)
        
        # –£–ù–ò–ö–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ó–ù–ê–ß–ï–ù–ò–Ø
        result_text = generate_basketball_message(value)
        
        # –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£
        result_text += f"\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ç–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏:"
        result_text += f"\nüèÄ –í—ã–ø–∞–¥–∞–ª–∞ —Ä–∞–∑: {basketball_research_data[value]['count']}"
        result_text += f"\nüë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤: {len(basketball_research_data[value]['users'])}"
        result_text += f"\nüìà –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(basketball_research_data)}/{BASKETBALL_VALUES}"
        
        # –°–°–´–õ–ö–ê –ù–ê –ö–û–ú–ê–ù–î–£ –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê
        result_text += f"\n\nüí° –ü–æ–¥—Ä–æ–±–Ω–µ–µ: /basketball {value}"
        
        await message.reply_text(result_text)
    
    elif emoji == "‚öΩ":
        # –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –î–õ–Ø –§–£–¢–ë–û–õ–ê
        if value not in football_research_data:
            football_research_data[value] = {
                'first_seen': datetime.datetime.now().isoformat(),
                'count': 0,
                'users': set()
            }
        
        football_research_data[value]['count'] += 1
        football_research_data[value]['users'].add(user_id)
        
        # –£–ù–ò–ö–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ó–ù–ê–ß–ï–ù–ò–Ø
        result_text = generate_football_message(value)
        
        # –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£
        result_text += f"\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ç–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏:"
        result_text += f"\n‚öΩ –í—ã–ø–∞–¥–∞–ª–∞ —Ä–∞–∑: {football_research_data[value]['count']}"
        result_text += f"\nüë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤: {len(football_research_data[value]['users'])}"
        result_text += f"\nüìà –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(football_research_data)}/{FOOTBALL_VALUES}"
        
        # –°–°–´–õ–ö–ê –ù–ê –ö–û–ú–ê–ù–î–£ –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê
        result_text += f"\n\nüí° –ü–æ–¥—Ä–æ–±–Ω–µ–µ: /football {value}"
        
        await message.reply_text(result_text)
    
    context.user_data.pop('expecting_dice', None)
    context.user_data.pop('last_game_type', None)
    context.user_data.pop('last_dice_message_id', None)
    context.user_data.pop('last_game_user_id', None)

# üåê FLASK –î–õ–Ø RAILWAY
app = Flask(__name__)

@app.route('/')
def home():
    return "üéØ Research Bot - –ò—Å—Å–ª–µ–¥—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ üèÄ –∏ ‚öΩ!"

@app.route('/research')
def research_web():
    """–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º"""
    html = "<h1>üéØ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π üèÄ –∏ ‚öΩ</h1>"
    
    # –ë–∞—Å–∫–µ—Ç–±–æ–ª
    html += "<h2>üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª</h2>"
    if basketball_research_data:
        html += f"<p>–ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π: {len(basketball_research_data)}/{BASKETBALL_VALUES}</p>"
        html += "<table border='1'><tr><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th><th>–°–æ–æ–±—â–µ–Ω–∏–µ</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th><th>–¢–µ—Å—Ç–µ—Ä–æ–≤</th></tr>"
        for value in sorted(basketball_research_data.keys()):
            data = basketball_research_data[value]
            message = BASKETBALL_MESSAGES.get(value, "–ù–û–í–ê–Ø –ö–û–ú–ë–ò–ù–ê–¶–ò–Ø")
            html += f"<tr><td>{value}</td><td>{message}</td><td>{data['count']}</td><td>{len(data['users'])}</td></tr>"
        html += "</table>"
    else:
        html += "<p>–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç</p>"
    
    # –§—É—Ç–±–æ–ª
    html += "<h2>‚öΩ –§—É—Ç–±–æ–ª</h2>"
    if football_research_data:
        html += f"<p>–ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π: {len(football_research_data)}/{FOOTBALL_VALUES}</p>"
        html += "<table border='1'><tr><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th><th>–°–æ–æ–±—â–µ–Ω–∏–µ</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th><th>–¢–µ—Å—Ç–µ—Ä–æ–≤</th></tr>"
        for value in sorted(football_research_data.keys()):
            data = football_research_data[value]
            message = FOOTBALL_MESSAGES.get(value, "–ù–û–í–ê–Ø –ö–û–ú–ë–ò–ù–ê–¶–ò–Ø")
            html += f"<tr><td>{value}</td><td>{message}</td><td>{data['count']}</td><td>{len(data['users'])}</td></tr>"
        html += "</table>"
    else:
        html += "<p>–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç</p>"
    
    return html

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
def main():
    port = int(os.environ.get("PORT", 5000))
    
    def run_flask():
        app.run(host='0.0.0.0', port=port)
    
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test_all", test_all))
    application.add_handler(CommandHandler("research", research_command))
    application.add_handler(CommandHandler("basketball", basketball_info_command))
    application.add_handler(CommandHandler("football", football_info_command))
    
    # –°–û–û–ë–©–ï–ù–ò–Ø
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(üèÄ|‚öΩ)$"), handle_game_message))
    application.add_handler(MessageHandler(filters.Dice.ALL, handle_dice_result))
    
    print("üéØ Research Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üî¨ –ò—Å—Å–ª–µ–¥—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ üèÄ –∏ ‚öΩ!")
    print("üìä –ö–æ–º–∞–Ω–¥—ã: /start, /test_all, /research, /basketball, /football")
    application.run_polling()

if __name__ == '__main__':
    main()
